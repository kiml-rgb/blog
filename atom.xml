<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Theme</title>
  
  <subtitle>Keep theme quick starter</subtitle>
  <link href="https://kiml.github.io/atom.xml" rel="self"/>
  
  <link href="https://kiml.github.io/"/>
  <updated>2024-06-23T12:02:28.725Z</updated>
  <id>https://kiml.github.io/</id>
  
  <author>
    <name>Keep Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>36 代码随想录算法训练营第三十六天-完全背包</title>
    <link href="https://kiml.github.io/posts/b717497e/"/>
    <id>https://kiml.github.io/posts/b717497e/</id>
    <published>2024-06-22T01:08:05.000Z</published>
    <updated>2024-06-23T12:02:28.725Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：看完完全组合的解析之后，完成 518 和 377。CM70就是377。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-22 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="518-零钱兑换-II">518 零钱兑换 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/coin-change-ii/" >https://leetcode.cn/problems/coin-change-ii/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：填满 i（包括 i）这么大容积的包，有 <code>dp[i]</code> 种方法</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] += dp[i - coin]</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 1</code>。假设数组个数为 0，获取 dp[0]，就是 1。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：  </span></span><br><span class="line"><span class="comment"> * 1. 这是一个完全背包的题目（正序）  </span></span><br><span class="line"><span class="comment"> * 2. 求的是组合数量 dp[i] += dp[i - coin];  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> amount 总数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> coins 硬币总和  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 有几种组合方法  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;  </span><br><span class="line">    <span class="comment">// 填满 i（包括 i）这么大容积的包，有 `dp[i]` 种方法  </span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> coin; i &lt; dp.length; i++) &#123;  </span><br><span class="line">            dp[i] += dp[i - coin];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[amount];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="377-组合总和-Ⅳ">377 组合总和 Ⅳ</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/combination-sum-iv" >https://leetcode.cn/problems/combination-sum-iv<i class="fas fa-external-link-alt"></i></a>)</p><p><strong>如果求组合数就是外层 for 循环遍历物品，内层 for 遍历背包</strong>。</p><p><strong>如果求排列数就是外层 for 遍历背包，内层 for 循环遍历物品</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 完全背包+排列</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums   数组  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 总数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 有几种排列</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">combinationSum4</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (i &gt;= num) &#123;  </span><br><span class="line">                dp[i] += dp[i - num];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[target];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="70-爬楼梯-（进阶）">70 爬楼梯 （进阶）</h3><p>题目链接：(<a class="link"   href="https://kamacoder.com/problempage.php?pid=1067" >https://kamacoder.com/problempage.php?pid=1067<i class="fas fa-external-link-alt"></i></a>)</p><p>就是完全背包 + 排列，解法和上题一模一样。nums 取值为 <code>1- 每次最多爬的阶梯数量</code></p><h2 id="看解析">看解析</h2><h3 id="完全背包">完全背包</h3><p>有 N 件物品和一个最多能背重量为 W 的背包。第 i 件物品的重量是 <code>weight[i]</code>，得到的价值是 <code>value[i] </code>。<strong>每件物品都有无限个（也就是可以放入背包多次）</strong>，求解将哪些物品装入背包里物品价值总和最大。</p><p><strong>完全背包和 01 背包问题唯一不同的地方就是，每种物品有无限件</strong>。</p><p><strong>二维数组</strong>：</p><ol><li class="lvl-3"><p>递推公式：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - item[i][0]] + item[i][1])</code>（即，不重复存放当前物品/重复存放当前物品）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 均为 0。<code>dp[0][j]</code> 为第一格按背包大小取重复值。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    integerBreak(<span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">15</span>&#125;, &#123;<span class="number">3</span>, <span class="number">20</span>&#125;, &#123;<span class="number">4</span>, <span class="number">30</span>&#125;&#125;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] item)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[item.length][n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 纵列初始化为0（数组定义，不用初始化）  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 横列初始化不一样了  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].length &amp;&amp; n &gt;= item[<span class="number">0</span>][<span class="number">0</span>]; j++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][j] = j / item[<span class="number">0</span>][<span class="number">0</span>] * item[<span class="number">0</span>][<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; item.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j - item[i][<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="comment">// 如果当前物品不能放入，背包值 = 当前值的前一列</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="comment">// 如果当前物品可以放入</span></span><br><span class="line"><span class="comment">// 比较前一列和（范围大小还是[0, i]，如果是 i - 1，范围大小就是[0, i - 1]）</span></span><br><span class="line"><span class="comment">// 也就是说，包不包含这个数本身（可不可以重复计数）</span></span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - item[i][<span class="number">0</span>]] + item[i][<span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一维数组（状态压缩）</strong>：</p><ol><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.max(dp[i], dp[i - item[0]] + item[1]);</code></p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 0</code></p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。（<strong>而完全背包的物品是可以添加多次的，所以要从小到大去遍历</strong>。（😅老实说，看了好几几遍都没懂））</p></li><li class="lvl-3"><p><strong>这里完全背包一维 dp 数组可以交换遍历顺序</strong>：因为 <code>dp[j]</code> 是用到其左边的数据 <code>dp[j - weight[i]]</code> 的，而先遍历背包再遍历物品也是满足的。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">integerBreak1</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] items)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] item : items) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (i &gt;= item[<span class="number">0</span>]) &#123;  </span><br><span class="line">                dp[i] = Math.max(dp[i], dp[i - item[<span class="number">0</span>]] + item[<span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="518-零钱兑换-II-2">518 零钱兑换 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html" >https://programmercarl.com/0518.零钱兑换II.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="377-组合总和-Ⅳ-2">377 组合总和 Ⅳ</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0377.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%E2%85%A3.html" >https://programmercarl.com/0377.组合总和Ⅳ.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="70-爬楼梯-（进阶）-2">70 爬楼梯 （进阶）</h3>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：看完完全组合的解析之后，完成 518 和 377。CM70就是377。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-22 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="完全背包" scheme="https://kiml.github.io/tags/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>实操：AI编程</title>
    <link href="https://kiml.github.io/posts/6501e090/"/>
    <id>https://kiml.github.io/posts/6501e090/</id>
    <published>2024-06-21T07:24:04.000Z</published>
    <updated>2024-06-21T13:13:02.251Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="dafdda95a0afafa3aea072f481f648eecb922da7406669698264fc21124d566b">abeb8d7735f0ac1430d5930ae71b6720b0442317ed254a69c11041c65159e9be845a26339db56165385334e2c44d7c39d657f984d7b54ce1264d731e88a779b901dc1b5c40f4ca0c12ed4e617aa243d58e1a96f7c5f15d1a4375354c89656ec1c748313f3438dedcf8764ba0c273437cf5f261dba60d2dc57185268453f029b36f4e4987a066dfc11281b383bcebf589ecd770260e3b2712a4beb72dcbb90440523174f7002b5926b6263c39dba374b682fa3fc1d78a55fc4e0a2396c3012fe81c8e0aa3482afe65ba00dcfbcfe3d5eba7b410194cea6fe01186ce0128c7061fa435721ab965a590a808b5c93e6707960988180404570dbed267ef0acee102dec4d49d7e976cdde376bb822309afd48f25b11d356e6c66a5e21cf8780a10bfc6eda28914db1f745afc16283f67b6e8ab09618eef6f8f44aef6a5a0a51a55b2c357ae4c512cdf9ddd59bfec64a545d78b83825db044b4c5568885d02b3dada7047e78f1792c3724ad97e0e7c07d365ffbce1c22ffa427f3dabbe89363774bda87bf3e75a9d10fbca9de78a67d510b757b1f3eb5437f173b9a6103e03198dd020bbc9bac90b27de035cd452512febfc2d8d33fa7a0ffa5346518e8ad34de3ef5c44addf43b13e4f2c5d6d46d038635de329ef603b7538799936a9d27ea4f21308f8b368bd1a3e76e5e0be3d8cbab0ad7e5aebcea3f7b6f8a5f391f3e92aa30c117b57ff27f8937c3a781f73eb04ae889ea72455fd43bcc22fb295f93134df254a8a5e7f16f4fd97a8c821c85f8d5521f3c14ebdfaa79151eeac2042376073e67c019fc4974253642a0f1b4e3fc8470e0dd64c147c15f60f61c864e5651d8752320271e7ab160fe1a0a3fcbd2b0208fa90c2c6a46f301ce041ad98e33090f9cb8910968150bc03ca7dd9defc4e1150897e28bb7f5fab7c52353510fb3d5ffd03e7f13956ef4fbce5fa88e8a6841607474348844f97691dba995181cd64647a174635b1192fbca6bf19d625e784c0ac02aaf69f7fd0b12ed1b372dab29ebe4c9916becadddb38a100af46d4e217d8ab62470b62b4fe2e83ede10ac005c03792dbd2354d473c6b986e0973cb9714f65097069691d2523d4a773d96641556f59456f29d58fd43f974f5545d622c81a188ebfc9dcdd219aba053e7ac860478136505c88cd30e4044a524280865b181167b124df17701bf4bcb395ddbfce3eb65d57273f9d77a19d8076e9fa59ebc04fcd3463c34bfceb82ed103bb3caf1c65c316e2849b5900d5ece9195373f9f643536040e9ee31e4ff1fa9103918f224831df8881fbe4e21600adc42cc62fce8a6768b69913207a7b28bd06396a74da0f1f05f8664e87104e9ef75c0fd3edae559f79b2e0c0a2cc3a9aeb81e845bfac775de7da9a857e5dd5778c4e5b16c065d5cb1b50e224a27a8603d12046f0fd54ae099907aee98bbcfc771b5ca8ebd62813380ebf8bc82453b2e81466e20c2d9263d4761588d6f833b1a1a4bfb0e0742797d4e520c8ba35e34693bad370c7bfbbd499d1c72bc5cf2d342bb1f4227ddb6e727c47f45854c560c591b4c8336d4cac79b7b7c8f8434f2ecfd9e8f51eed5f413054ebfbac071d65a808d22ce78cbacbf0dda09acfa7cdcb11741e5e3ee18196ec3f335b0c1efd022c41b51ebaa140ad6e398cd5eb66971c559244a0667d3f66c0b6a8ec83c6b11058b7f4fbc1c6ec81fdcd96ef0004730d157cfcf552c95fae473524832a5110b77f31cdcedb488af07f5a0e23b178eb2e411097ed6dddf7a1ff2728611d3c595c2f0b50ef5d323f73e268b703bad2e2f6e5a1e958f5e1456f6ce53ee3efd2ce03e954e00bf19d267a02ba7f21119a479961c08b7e7e7cde8a789bbcc90167adc2df602c444be32d905360415323f5b9100e21e01f25919b4d876aed7a154269a3b9ff337093e0f9915ed8af5dda68dde009369ef166a10f849f66c4648f8642925c7f06f57ebc0002ce42a4e57b32471a62ab817de061c4fd44c35fea871fb335df96cd0f958ac7fda2cba1a507ff67c6cf18e9d18b49d7f9474682ef1d11273d24691ae79924c8ad246f7c6d931630b41846ccef106bea9c1897d02781a707006f31668e890f7a00f7d98056ff7a5748aab664dde239e9bf8f058b4bf4df3c0843898097686ee6f482a67eb1b6eb1694b426089162ae1db0b0322e525c559afa8a5c240c47ee8b5ba933a44ffdc7b48b7f4dda042039bc311e474689b7ffc852874a22cb68ba0f6d559fe1586f837bcdf0eba09e0ca1ae9ae96f4242ba96c1550028c6ac5e2b37f3179feadb5179c509f56082f11fc57cd63ec580f0fc3650a9c652984f42ddda956ca833ccf190d490d9534efe073ff158f371b1c69cdb009bb90acc519b334c6fbc8d06906f281233191980048cc1f06a30aa012ca6abb4d8b8e4ad2347bdb970e2e9291b30d5e4f4ff2cbddbec39fbd2929b3267211fb10c4897a7d3b6801f524fb304c0461383a98e9df945b0807bcb8c84fdcc6a53b62eea1f3fc6575643970058fcacf88bdc486d5bdf1eea5a0b6febd00b97c7cc4a5fa0fdff10e40fe4d653210b1263e9b13a842d3e0a20805aa2415c4dc0833300c489d23d543d2681b1807ecb0b4bb5caf3dd33cf129a04812d0abec1380d54e7b141a69e7f286cc4283f8d85e1e5bd</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十五天-1049最后一块石头的重量 II、494目标和、474一和零</title>
    <link href="https://kiml.github.io/posts/bde30672/"/>
    <id>https://kiml.github.io/posts/bde30672/</id>
    <published>2024-06-21T01:19:10.000Z</published>
    <updated>2024-06-23T12:01:51.805Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：1049 和昨天那题差不多。494、474。。。☠️动规还是先了解解法。后面刷别的题组的时候再说。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-21 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="1049-最后一块石头的重量-II">1049 最后一块石头的重量 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/last-stone-weight-ii" >https://leetcode.cn/problems/last-stone-weight-ii<i class="fas fa-external-link-alt"></i></a>)</p><p>本题可以抽象成让石头分成尽量相同的两堆，然后进行相撞。即背包大小为总和除以 2，求能放入的最大价值。</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：从石头里任取，背包大小为 i，能放入的最大价值。<code>weight[i] = store[i]</code>，<code>value[i] = store[i]</code>。</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.max(dp[i], dp[i - weight[j]] + value[j])</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 0</code>。</p></li><li class="lvl-3"><p>遍历顺序：从后向前遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(stones).sum();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[sum / <span class="number">2</span> + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> stone : stones) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> dp.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j &gt;= stone) &#123;  </span><br><span class="line">    dp[j] = Math.max(dp[j], dp[j - stone] + stone);  </span><br><span class="line">&#125; </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> sum - dp[sum / <span class="number">2</span>] * <span class="number">2</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="494-目标和">494 目标和</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/target-sum" >https://leetcode.cn/problems/target-sum<i class="fas fa-external-link-alt"></i></a>)</p><p>完全没思路</p><h3 id="474-一和零">474 一和零</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/ones-and-zeroes" >https://leetcode.cn/problems/ones-and-zeroes<i class="fas fa-external-link-alt"></i></a>)</p><p>看不懂，题目都看不懂☠️</p><h2 id="看解析">看解析</h2><h3 id="1049-最后一块石头的重量-II-2">1049 最后一块石头的重量 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/1049.%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII.html" >https://programmercarl.com/1049.最后一块石头的重量II.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="494-目标和-2">494 目标和</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html" >https://programmercarl.com/0494.目标和.html<i class="fas fa-external-link-alt"></i></a>)</p><p>假设正数集合总和是 left，负数集合总和是 right。总和 <code>sum = left + right</code>。目标值 <code>target = left - right</code>。可以得到 left 即正数之和 <code>= (sum + target)/2</code>。</p><p><strong>本题是装满有几种方法。这是一个组合问题</strong>，用的解法就和之前不一样。</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：填满 i（包括 i）这么大容积的包，有 <code>dp[i]</code> 种方法</p></li><li class="lvl-3"><p>递推公式：<code>dp[j] += dp[j - nums[i]]</code>。</p></li></ol><blockquote><ul class="lvl-1"><li class="lvl-2"><p>已经有一个 1（nums[i]） 的话，有 dp[4] 种方法 凑成 容量为 5 的背包。</p></li><li class="lvl-2"><p>已经有一个 2（nums[i]） 的话，有 dp[3] 种方法 凑成 容量为 5 的背包。</p></li><li class="lvl-2"><p>已经有一个 3（nums[i]） 的话，有 dp[2] 种方法 凑成 容量为 5 的背包</p></li><li class="lvl-2"><p>已经有一个 4（nums[i]） 的话，有 dp[1] 种方法 凑成 容量为 5 的背包</p></li><li class="lvl-2"><p>已经有一个 5 （nums[i]）的话，有 dp[0] 种方法 凑成 容量为 5 的背包</p></li></ul><p>那么凑整 dp[5] 有多少方法呢，也就是把 所有的 dp[j - nums[i]] 累加起来。</p></blockquote><ol start="3"><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 1</code>。假设数组个数为 0，获取 dp[0]，就是 1。</p></li><li class="lvl-3"><p>遍历顺序：从后向前遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();  </span><br><span class="line">    <span class="keyword">if</span> ((sum + target) % <span class="number">2</span> == <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (sum &lt; Math.abs(target)) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (sum + target) / <span class="number">2</span>;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[left + <span class="number">1</span>];  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> dp.length - <span class="number">1</span>; j &gt;= num; j--) &#123;  </span><br><span class="line">    <span class="comment">// 这里比较难理解</span></span><br><span class="line">            dp[j] += dp[j - num];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[left];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="474-一和零-2">474 一和零</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html" >https://programmercarl.com/0474.一和零.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：<strong>最多有 i 个 0 和 j 个 1 的 strs 的最大子集的大小为 <code>dp[i][j]</code></strong>。物品的重量是 0 的个数，1 的个数。价值就是 1。（难点在二维数组。。反正看了解析又感觉懂了，自己写又不会☠️）</p></li><li class="lvl-3"><p>递推公式：<code>dp[i][j] = Math.max(dp[i][j], dp[i - x][j - y]) + 1</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0][0] = 0</code>。</p></li><li class="lvl-3"><p>遍历顺序：从后向前遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 这里x计算0的数量， y计算1的数量  </span></span><br><span class="line">    <span class="type">int</span> x, y;  </span><br><span class="line">    <span class="keyword">for</span> (String str : strs) &#123;  </span><br><span class="line">        x = <span class="number">0</span>;  </span><br><span class="line">        y = <span class="number">0</span>;  </span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : chars) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;0&#x27;</span>) &#123;  </span><br><span class="line">                x++;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                y++;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= <span class="number">0</span>; j--) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (i &gt;= x &amp;&amp; j &gt;= y) &#123;  </span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[i - x][j - y] + <span class="number">1</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> dp[m][n];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：1049 和昨天那题差不多。494、474。。。☠️动规还是先了解解法。后面刷别的题组的时候再说。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-21 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="01背包" scheme="https://kiml.github.io/tags/01%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>Obsidian 的插件使用</title>
    <link href="https://kiml.github.io/posts/d62035eb/"/>
    <id>https://kiml.github.io/posts/d62035eb/</id>
    <published>2024-06-20T08:42:53.000Z</published>
    <updated>2024-06-20T09:38:45.828Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言整理了一些常用的 Obsidian 插件。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-20 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="工具">工具</h2><h3 id="File-Tree-定位">File Tree 定位</h3><blockquote><p>更好的文件管理方式。</p><p>介绍：内链：[[Obsidian + Git + Hexo + 图床 = Blog + 个人笔记体系#File Tree 定位]]<br>外链：<a class="link"   href="https://kiml.site/posts/121fccfa/#File-Tree-%E5%AE%9A%E4%BD%8D" >File Tree 定位<i class="fas fa-external-link-alt"></i></a></p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>插件名称：File Tree Alternative</p></li><li class="lvl-2"><p>分享地址：obsidian://show-plugin?id=table-editor-obsidian</p></li></ul><h3 id="Advanced-Tables">Advanced Tables</h3><blockquote><p>更快的表格创建方式。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>插件名称：Advanced Tables</p></li><li class="lvl-2"><p>分享链接：obsidian://show-plugin?id=table-editor-obsidian</p></li></ul><h3 id="Annotator">Annotator</h3><blockquote><p>PDF 阅读器。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>插件名称：Annotator</p></li><li class="lvl-2"><p>分享链接：obsidian://show-plugin?id=obsidian-annotator</p></li></ul><h3 id="Emoji-Toolbar">Emoji Toolbar</h3><blockquote><p>在文章中插入 emoji。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>插件名称：Emoji Toolbar</p></li><li class="lvl-2"><p>分享链接：obsidian://show-plugin?id=obsidian-emoji-toolbar</p></li></ul><h3 id="ePub-Reader">ePub Reader</h3><blockquote><p>ePub 格式文件阅读器。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>插件名称：ePub Reader</p></li><li class="lvl-2"><p>分享链接：obsidian://show-plugin?id=obsidian-epub-plugin</p></li></ul><h3 id="Excalidraw">Excalidraw</h3><blockquote><p>Excalidraw 绘图工具</p></blockquote><ul class="lvl-0"><li class="lvl-3"><p>插件名称：Excalidraw</p></li><li class="lvl-3"><p>分享链接：obsidian://show-plugin?id=obsidian-excalidraw-plugin</p></li></ul><h3 id="Latex-Suite">Latex Suite</h3><blockquote><p>数学公式支持</p></blockquote><ul class="lvl-0"><li class="lvl-3"><p>插件名称：Latex Suite</p></li><li class="lvl-3"><p>分享链接：obsidian://show-plugin?id=obsidian-latex-suite</p></li></ul><h3 id="Pandoc">Pandoc</h3><blockquote><p>将 Markdown 格式文件导出成其他格式文件。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>插件名称：Pandoc</p></li><li class="lvl-2"><p>分享链接：obsidian://show-plugin?id=obsidian-pandoc</p></li></ul><h3 id="Privacy-Glasses">Privacy Glasses</h3><blockquote><p>模糊处理文件，如果在公共场合处理文件可以用到这个。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>插件名称：Privacy Glasses</p></li><li class="lvl-2"><p>分享链接：obsidian://show-plugin?id=privacy-glasses</p></li></ul><h2 id="美化">美化</h2><h3 id="Linter">Linter</h3><blockquote><p>Markdown 文件格式化工具。（包括中日韩语与英文之间的空格，非常好用）</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>插件名称：Linter</p></li><li class="lvl-2"><p>分享链接：obsidian://show-plugin?id=obsidian-linter</p></li></ul><h3 id="Blue-Topaz-Style-Settings">Blue Topaz + Style Settings</h3><blockquote><p>目前在使用的主题，主题可以直接在 Obsidian 中搜索。可以配合 Style Settings 一起使用（非常好用）。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p>插件名称：Style Settings</p></li><li class="lvl-2"><p>分享地址：obsidian://show-plugin?id=obsidian-style-settings</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言整理了一些常用的 Obsidian 插件。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-20 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="博客" scheme="https://kiml.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客" scheme="https://kiml.github.io/tags/%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="Obsidian" scheme="https://kiml.github.io/tags/Obsidian/"/>
    
  </entry>
  
  <entry>
    <title>04 从 AI 编程认知 AI</title>
    <link href="https://kiml.github.io/posts/19ad1a27/"/>
    <id>https://kiml.github.io/posts/19ad1a27/</id>
    <published>2024-06-20T06:52:10.000Z</published>
    <updated>2024-06-20T09:51:14.891Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7dc7ba93dbda4c9ee248689b9479d6a913ac9f9cd43cf75a6d7f787f5e48ffbc"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十四天-01背包问题 二维、01背包问题 一维、416分割等和子集</title>
    <link href="https://kiml.github.io/posts/23390fe6/"/>
    <id>https://kiml.github.io/posts/23390fe6/</id>
    <published>2024-06-20T01:05:13.000Z</published>
    <updated>2024-06-23T12:01:44.915Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：前两题为背包基础题，直接看的题解。416 也是看的解析。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-20 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="416-分割等和子集">416 分割等和子集</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/partition-equal-subset-sum" >https://leetcode.cn/problems/partition-equal-subset-sum<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="看解析">看解析</h2><h3 id="01-背包问题-二维">01 背包问题 二维</h3><p>题目链接 + 解析：(<a class="link"   href="https://programmercarl.com/%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%8001%E8%83%8C%E5%8C%85-1.html" >https://programmercarl.com/背包理论基础01背包-1.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：<strong>从下标为 <code>[0-i]</code> 的物品里任意取，放进容量为 j 的背包，价值总和最大是多少</strong>。</p></li><li class="lvl-3"><p>递推公式：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i])</code>（即，不存放当前物品/存放当前物品）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 均为 0，<code>dp[0][j]</code> 需要根据实际情况来。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    integerBreak(<span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">15</span>&#125;, &#123;<span class="number">3</span>, <span class="number">20</span>&#125;, &#123;<span class="number">4</span>, <span class="number">30</span>&#125;&#125;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 二维数组解法  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 背包大小  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> item 物品及重量及价值  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] item)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[item.length][n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp[<span class="number">0</span>].length &amp;&amp; n &gt;= item[<span class="number">0</span>][<span class="number">0</span>]; i++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][i] = item[<span class="number">0</span>][<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; item.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j - item[i][<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - item[i][<span class="number">0</span>]] + item[i][<span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="01-背包问题-一维">01 背包问题 一维</h3><p>题目链接 + 解析：(<a class="link"   href="https://programmercarl.com/%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%8001%E8%83%8C%E5%8C%85-2" >https://programmercarl.com/背包理论基础01背包-2<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[j]</code> 的含义：<strong>从物品里任意取，放进容量为 j 的背包，价值总和最大是多少</strong>。</p></li><li class="lvl-3"><p>递推公式：<code>dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i])</code>（即，要么等于原值，要么等于放入物品的值）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 0</code>。</p></li><li class="lvl-3"><p>遍历顺序：<strong>从后向前遍历</strong>。（这里需要注意，因为递推公式内需要上一层的原值，只有倒序遍历，可以获取上一层的原值。）</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 一维数组解法  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 背包大小  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> item 物品及重量及价值  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">integerBreak1</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] item)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] ints : item) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> dp.length - <span class="number">1</span>; j &gt;= ints[<span class="number">0</span>]; j--) &#123;    </span><br><span class="line">            dp[j] = Math.max(dp[j], dp[j - ints[<span class="number">0</span>]] + ints[<span class="number">1</span>]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="416-分割等和子集-2">416 分割等和子集</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.html" >https://programmercarl.com/0416.分割等和子集.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[j]</code> 的含义：<strong>从物品里任意取，求总量的最大值，判断是否等于 <code>j</code> 即 <code>sum/2</code></strong>。这题要抽象，设置 i 位置的重量和价值都为 i</p></li><li class="lvl-3"><p>递推公式：<code>dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i])</code>（<strong>如果 <code>dp[j] == j</code> 说明，集合中的子集总和正好可以凑成总和 j</strong>）</p></li><li class="lvl-3"><p>dp 数组的初始化：因为是正整数数组，所以可以初始化为 0。</p></li><li class="lvl-3"><p>遍历顺序：从后向前遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();  </span><br><span class="line">    <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[sum / <span class="number">2</span> + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> dp.length - <span class="number">1</span>; j &gt;= num; j--) &#123;    </span><br><span class="line">            dp[j] = Math.max(dp[j], dp[j - num] + num);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (dp[sum / <span class="number">2</span>] == sum / <span class="number">2</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：前两题为背包基础题，直接看的题解。416 也是看的解析。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-20 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="01背包" scheme="https://kiml.github.io/tags/01%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>【AI 大模型全栈】Function Calling</title>
    <link href="https://kiml.github.io/posts/4ee04905/"/>
    <id>https://kiml.github.io/posts/4ee04905/</id>
    <published>2024-06-19T09:27:32.000Z</published>
    <updated>2024-06-20T09:51:14.888Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b51740439654fded695704233dcce5f4cbcedde7079feca66665a8436a809cc1"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>面试-07 MySQL</title>
    <link href="https://kiml.github.io/posts/1f8a8b53/"/>
    <id>https://kiml.github.io/posts/1f8a8b53/</id>
    <published>2024-06-19T06:37:08.000Z</published>
    <updated>2024-06-20T14:23:03.246Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>❗表示必掌握，❔表示基本不会问</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-19 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="引擎">引擎</h2><h3 id="❗MySQL-有哪些常用的存储引擎？它们的区别是什么？怎么选择？">❗MySQL 有哪些常用的存储引擎？它们的区别是什么？怎么选择？</h3><p>常见的存储引擎有：InnoDB（最常用），MyISAM（次常用），MEMORY（最次）。</p><p>InnoDB：是最常用的存储引擎，采用 BTree 索引，最适用于需要增删改的表，支持事务，支持并发控制（MVCC），InnoDB 是现在 MySQL 默认的存储引擎。<em>分库分表、读写分离、主备切换</em>（技术方案很成熟）</p><p>MyISAM：是 5.5 版本之前默认的存储引擎，采用 BTree 索引，访问速度快，但不支持事务和外键，所以只适用于查询需求的表。</p><ul class="lvl-0"><li class="lvl-2"><p>基于 MyISAM 的报表系统，hadoop 前一天把报表数据查询然后保存到 MySQL，后面只要查询。<strong>MySQL 的单表建议控制数据量在几百万</strong>，一般是 500w。后面这种报表数据量会很大，sql 也很复杂，不适合用 MySQL。<br>MEMORY：基于内存存储，采用的是哈希索引，速度快，但存储量受内存大小限制，而且安全性低，一但断电，内存就会清空，一般不使用这种存储引擎。</p></li></ul><h3 id="为什么-MyISAM-访问查询速度快？">为什么 MyISAM 访问查询速度快？</h3><p>MyISAM 相比于 InnoDB，不需要添加隐藏值来实现 MVCC 保证高并发，也不需要事务锁，MyISAM 通过舍弃并发控制和事务保证来提升查询速度。</p><p>此外 MyISAM 是非聚集索引，且叶节点始终是地址直接指向数据文件，而 InnoDB 可能出现回表的情况，所以相对来说，MyISAM 的访问速度比 InnoDB 快。</p><h3 id="❗MyISAM-的底层数据结构是什么？">❗MyISAM 的底层数据结构是什么？</h3><p>MyIsam 则是非聚集型索引，底层是 BTree 数据结构，myisam 存储会有三个文件，<strong>一个是表文件，一个是索引文件，另外一个是数据文件</strong> ，无论是否是主键索引，索引文件最终都是以地址指向数据文件中的表数据。</p><h3 id="❗InnoDB-的数据结构又是什么？">❗InnoDB 的数据结构又是什么？</h3><p>要求必须要有主键，默认内置根据主键建立一个索引，叫聚簇索引。<em>如果对于某个非主键的字段创建索引，最后那个叶子节点的值就是主键的值。可以用主键的值到聚簇索引里根据主键值再次找到数据。</em></p><p>InnoDB 的数据“类型”是 BTree，底层数据“结构”是 B+Tree，B+Tree 是 BTree 数据结构的变种，是绝对平衡树，所有叶节点在同一高度。</p><p>B+Tree 是一个多路平衡二叉树，也就是说它不只有左右两个分支，而是可以一个节点下有很多分支。</p><p>B+Tree 除叶子节点外，都只存储 key 值，所有的数据都存储在叶子节点上，<strong>且所有的叶子节点间都连有指针，使所有数据成为有序序列，可以用来做全表顺序描扫或范围查询</strong>。</p><p>B+Tree 的数据检索规则为左闭合区间，这样可以实现向右添加。</p><h4 id="为什么使用-B-Tree-而不使用普通的-Tree？">为什么使用 B+Tree 而不使用普通的 Tree？</h4><p>普通的 tree 最多只能有 2 路，而 B+Tree 则是多路数据结构，而且在数据量庞大的情况下，Tree 可能高度会很高，增加 IO 次数，降低了性能，而 B+Tree，一页大小为 16KB，单纯用来存索引的话，假设索引为 int 类型，即 4 个字节，不考虑子节点引用的情况下，每个节点可以 2000 个关键字，即 2000 路，能够搜索的关键字个数远远的大于普通的二叉树（有只两路）。</p><h4 id="为什么使用-B-Tree-而不使用-B-Tree？">为什么使用 B+Tree 而不使用 B-Tree？</h4><p>数据库在查询数据时，以页的方式将磁盘数据加载到数据建库内存，默认每页数据大小是 16kb，为了提升查询效率，需要减少磁盘的 IO 次数。</p><p>B-Tree 数据结构，每个节点中直接保存数据，这样的话 16kb 的页包含的节点数量就会比较少，所以在查询时，需要加载更多的页。</p><p>B+Tree 数据结构，只有叶子节点包含数据，其他非叶子节点只包含索引列的值，16kb 的页能包含的节点数量就大增，相对于 BTree 而言，能够更少的加载页。</p><h4 id="为什么不用-Hash-或者红黑数？">为什么不用 Hash 或者红黑数？</h4><p>业务查询一般可能不是查询一条，而是查询多条。</p><p>hash 索引查询单条确实比较快，但是他是无序的，查询多条或者排序的话性能就比较低了，并且在内存资源紧张的情况下，树索引可以分批装入内存进行计算。</p><p>红黑树因为大数据存储下，树的高度很高，每个节点都有数且，这样可能会导致多次 IO，查询效率比较低，红黑树并不适合庞大数据搜索。</p><p>而 B+ 树可以一次性装入更多的叶子节点到内存，并且树的高度可以控制到很低，叶子节点存储数据并且形成链表可以避免跨层查询，这种“矮胖”的数据结构更适合于庞大数据搜索。</p><h4 id="B-Tree-叶子节点中的数据怎么有序？">B+Tree 叶子节点中的数据怎么有序？</h4><p>索引是表数据之外的一种数据结构，数据结构即是存储方式，也就是在表数据之外还会生成一张专门搜索而用的表，新加入的数据会找到对应子节点所在的范围，按照升序从小到大排列。</p><p>所以 InnoDB 的批量插入效率是较低的，如果需要批量插入，就需要进行一定的数据库优化。</p><h5 id="怎么优化数据库来提升数据批量插入的效率呢？">怎么优化数据库来提升数据批量插入的效率呢？</h5><ol><li class="lvl-3"><p>尽量保持数据有序。减少数据插入时对索引的维护成本。</p></li><li class="lvl-3"><p>一次插入多条数据 (不宜过多)。减少日志，降低日志刷新磁盘的频率。减少 sql 解析次数。</p></li><li class="lvl-3"><p>尽量保证主键足够小，且表上没有多余的索引。</p></li><li class="lvl-3"><p>如果允许，考虑临时关闭二进制日志。</p></li><li class="lvl-3"><p>确保 innodb_buffer_pool_size，innodb_log_buffer_size，max_allowed_packet 足够大。注：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>innodb_buffer_pool_size：InnoDB 最重要的参数，缓存 innodb 表的素引、数据和插入数据的缓冲。</p></li><li class="lvl-2"><p>innodb_log_buffer_size：日志缓冲区，大量事务时可以将默认 3M 设为 16M。</p></li><li class="lvl-2"><p>max_allowed_packet：网络包大小，避免出现较大的网络包错误。</p></li></ul><h3 id="为什么-InnoDB-能支持事务特性？">为什么 InnoDB 能支持事务特性？</h3><p>redo log 重做日志用来保证事务的持久性：当 commit 时，必须先将事务的所有日志写到重做日志文件进行持久化，直到 commit 结束日志才算完成。</p><p>undo log 回滚日志保证事务的原子性：事务完成前，操作并没有真正执行，而记录在日志中，undoglo 会记录之前事务对应的行数据，回滚时，会根据日志进行反向操作，对中间记录的每一步操作进行逻辑删除，从而保证原子性。</p><p>undo log + redo log 保证事务的一致性：操作过程中由 redo log 保证持久化，一但过程中出错，就由 undo log 回滚。</p><p>锁（共享、排他）用来保证事务的隔离性：事务的隔离性的实现原理就是锁，InnoDB 主要有 2 种锁，行级锁跟意向锁。（具体见 MySQL 锁回答）</p><h4 id="什么是-InnoDB-回表？">什么是 InnoDB 回表？</h4><p>即第一次 B+tree 的叶节点上没能直接获取数据，还需要通过叶节点上的数据做为新的索引在另一张表上进行第二次 B+tree 的扫描，直到获取最终想要的数据。</p><h5 id="那有没有好的解决办法？">那有没有好的解决办法？</h5><p>覆盖索引（就是联合索引）。解决回表问题，只需要在一棵索引树上就能获取 SQL 所需的所有数据，无需回表，速度更快。</p><p>覆盖索引的实现方法是，将需要查询的数据与主键共同设为索引，即联合索引，索引扫描遵循最左匹配原则，通过一次扫描 B+tree 即可查询到相应的结果，实现覆盖索引。</p><p>所以创建索引的时候，尽可能创建“覆盖索引”，减少回表操作，提升搜索性能。</p><h4 id="❗什么是最左匹配原则？">❗什么是最左匹配原则？</h4><p>联合索引进扫 B+tree 扫描时，会最左边的索引条件起点优先，任何连续的索引都能匹配的上。比如有一个联合索引为（name, price, address），那么它的匹配索引有三个，按照优先级分别是：name、name+price、name+price+address（注：必须是从最左开始，且连续）</p><ol><li class="lvl-3"><p>全列匹配，可以使用</p></li><li class="lvl-3"><p>最左前缀匹配。最左边，一列、两列、三列匹配都行</p></li><li class="lvl-3"><p>最左匹配原则，但是中间某个值没匹配。会匹配的部分走索引，然后后面的值根据过滤出来的值，再匹配。（<strong>线上常用，效果还好</strong>）</p></li><li class="lvl-3"><p>没有最左前缀匹配。<em>比如直接从 price 开始匹配，就不会走索引</em></p></li><li class="lvl-3"><p>前缀匹配。like 操作只有 <code>XX%</code> 才会进行匹配</p></li><li class="lvl-3"><p>范围列表查询。只有范围字段可以查询。</p></li><li class="lvl-3"><p>包含函数。使用函数的字段不会用上索引。</p></li></ol><h5 id="那是不是覆盖索引越多越好？">那是不是覆盖索引越多越好？</h5><p>不是。在 BTree 数据类型在保证树的平衡的过程中，每次关键字的变化，都会导致结构发生很大的变化，这个过程是特别浪费时间的，所以创建索引一定要创建合适的索引，而不是把所有的字段都创建索引，创建冗余索引只会在对数据进行新增，删除，修改时增加性能消耗。</p><h3 id="百万级别或以上的数据如何删除？">百万级别或以上的数据如何删除？</h3><p>索引文件是单独存在的文件，对存储表的操作都会连带到索引文件上，为了提高删除速度，可以优先删除索引（百万级约 3 分钟），然后优先删除无用数据，最后对需要保留的数据重新创建索引。这样就算需要回滚，也比全部回滚速度更快。</p><h2 id="事务">事务</h2><h3 id="❗你能说说事务的几个特性是啥？有哪几种隔离级别？">❗你能说说事务的几个特性是啥？有哪几种隔离级别？</h3><p>——ACID（只有 InnoDB 才支持事务）。</p><ol><li class="lvl-3"><p>原子性（undo log 回滚保证事务的原子性）：指同一对的事务操作，要么全成功，要么全失败，操作失败不能对数据库有影响。</p></li><li class="lvl-3"><p>一致性（undo log+redo log 保证事务一致性）：事务操作之后，数据库内的数据总量保持一致。（能量守恒）</p></li><li class="lvl-3"><p>隔离性（锁保证事务隔离性）：相同的表，不同事务之间不能互相干扰。</p></li><li class="lvl-3"><p>持久性（redo log 重做日志用来保证事务持久性）：事务一旦被提交，就需要在数据永久化存储，即便故障也不会丢失提交事务的操作。</p></li></ol><p>4 种。</p><ol><li class="lvl-3"><p>读未提交（RU：read uncommitted）：读到了别的事务没有提交的数据。可能存在【脏读 + 不可重复读 + 幻读】的问题。</p></li><li class="lvl-3"><p>读已提交（RC：read committed）：可能存在【不可重复读 + 幻读】问题。</p></li><li class="lvl-3"><p>可重复读（RR：repeatable read）：可能存在【幻读】问题。【MySQL 默认】</p></li><li class="lvl-3"><p>串行化（serializable）：无以上问题，但效率低，一般在分布式事务的情况下用该级别。</p></li></ol><h4 id="❗什么是脏读？幻读？不可重复读？">❗什么是脏读？幻读？不可重复读？</h4><p>脏读 (Drity Read)：是指在一个事务处理过程中读取了另一个未提交的事务中的数据 , 导致两次查询结果不一致。</p><p>可重复读 (Non-repeatable read): 事务开启后关闭前，多次读取同一条记录，结果却不能保证一致，所以叫不可重复读。主要问题不在同一个数据库的问题，而在不同的服务器，不同数据库时会出现的问题，因为两台电脑之间要保证数据相同，是需要时间进行复制的，从表在复制主表的过程中，很可能因为修改数据过快而导致复制到错误数据。</p><p>幻读 (Phantom Read):select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入。或不存在执行 delete 删除，却发现删除成功。</p><h4 id="❗事务的隔离级别是怎么解决以上三种问题的？">❗事务的隔离级别是怎么解决以上三种问题的？</h4><p>解决脏读：修改时加排他锁（写锁），直到事务提交后才释放，读取时加共享锁（读锁），其他事务只能读取，不能再有更新操作。防止脏读。</p><p>解决不可重复读：innodb 引擎采用了 MVCC（多版本并发控制）来解决不可重复读问题。mvcc 是利用在每条数据后面加了隐藏的两列（创建版本号和删除版本号）当执行查询的时，当前查询版本号&gt;= 创建版本号 并且 &gt;删除版本号，MVCC 可以在大多数情况下代替行级锁，使用 MVCC，能降低其系统开销。</p><p>解决幻读：采用 next-key 锁解决幻读问题，next-key 锁包含两部分：记录锁（行锁）+ 间隙锁，就是在索引和索引之间上面加锁。</p><h4 id="❗InnoDB-是怎么做到并发控制的？MVCC">❗InnoDB 是怎么做到并发控制的？MVCC</h4><blockquote><p>事务 id，在 mysql 内部是全局唯一递增的。<br><strong>当一个事务内查询的时候，mysql 只会查询创建事务 id &lt;= 当前事务 id 的数据且当前事务 id &lt; 删除事务 id。</strong></p></blockquote><p>通过多版本并发控制（MVCC）实现。</p><p>指的是一种提高并发的技术。最早的数据库系统，只有读读之间可以并发，读写，写读，写写都要阻塞。引入多版本之后，只有写写之间相互阻塞，其他三种操作都可以并行，这样大幅度提高了 InnoDB 的并发度。</p><p>在内部实现中，InnoDB 通过 undo log 保存每条数据的多个版本，并且能够找回数据历史版本提供给用户读，每个事务读到的数据版本可能是不一样的。<strong>在同一个事务中，用户只能看到该事务创建快照之前已经提交的修改和该事务本身做的修改。</strong></p><p>MVCC 在 Read Committed 和 Repeatable Read 两个隔离级别下工作。</p><p>MySQL 的 InnoDB 存储引擎默认事务隔离级别是 RR(可重复读)，是通过 &quot; 行级锁 +MVCC&quot; 一起实现的，正常读的时候不加锁，写的时候加锁。而 MVCC 的实现依赖：隐藏字段、Read View、Undo log。</p><p>隐藏字段是 InnoDb 存储引擎在每行数据的后面自动加上的字段，包括事务 id 字段（最重要，每次新增或修改会修改 id 号，删除的话是逻辑删除，当做更新处理，会多一个更新记录）和回滚指针字段（指向 undo log 的上一次事务对应的数据）。</p><p>ReadView 就是快照，主要是用来做可见性判断的，保证其它事务对该事务不可见，里面包括该事务的最大事务 ID，最小事务 ID 以及未提交的事务 ID 等。</p><p>Undo log 中存储的是老版本数据，用于回滚。如当一个事务需要读取记录行时，如果当前记录行不可见，可以顺着 undo log 链找到满足其可见性条件的记录行版本。</p><h2 id="锁">锁</h2><h3 id="MySQL-数据库锁的实现原理">MySQL 数据库锁的实现原理</h3><p>在关系型数据库中，可以按照锁的粒度把数据库锁分为行级锁 (INNODB 引擎)、表级锁 (MYISAM 引擎) 和页级锁 (BDB 引擎 )。</p><p>MyISAM 和 InnoDB 存储引擎使用的锁：</p><ul class="lvl-0"><li class="lvl-2"><p>MyISAM 采用表级锁。（一个例子：<em>hadoop 处理数据出了问题，上午 10 点还在插入大量数据，导致锁表。页面报错 504</em>）</p></li><li class="lvl-2"><p>InnoDB 支持行级锁和表级锁，默认为行级锁。（<mark>innoDB 在执行增删改时会自动给行加排他锁</mark>）</p></li></ul><p>行级锁：行级锁是 Mysql 中锁定粒度最细的一种锁，表示只针对当前操作的行进行加锁。行级锁能大大减少数据库操作的冲突。其加锁粒度最小，但加锁的开销也最大。行级锁分为<strong>共享锁（读锁）</strong> 和 <strong>排他锁（写锁）</strong>。</p><p><strong>共享锁和排他锁</strong><br>共享锁: 又叫做读锁。 当用户要进行数据的读取时，对数据加上共享锁。共享锁可以同时加上多个。</p><p>排他锁: 又叫做写锁。 当用户要进行数据的写入时，对数据加上排他锁。排他锁只可以加一个，他和其他的排他锁，共享锁都相斥。</p><p><strong>悲观锁和乐观锁</strong><br>数据库管理系统（DBMS）中的并发控制的任务是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。乐观并发控制（乐观锁）和悲观并发控制（悲观锁）是并发控制主要采用的技术手段。</p><p>悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。在<mark>查询完数据</mark>的时候就把事务锁起来，直到提交事务。实现方式：使用数据库中的锁机制。</p><p>乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。在修改数据的时候把事务锁起来，通过 version 的方式来进行锁定。实现方式：<mark>乐观锁一般会使用版本号机制或 CAS 算法实现</mark>。</p><p><mark>两种锁的使用场景</mark>（❗线上少用悲观锁）</p><p>从上面对两种锁的介绍，我们知道两种锁各有优缺点，不可认为一种好于另一种，像乐观锁适用于写比较少的情况下（多读场景），即冲突真的很少发生的时候，这样可以省去了锁的开销，加大了系统的整个吞吐量。</p><p>但如果是多写的情况，一般会经常产生冲突，这就会导致上层应用会不断的进行 retry，这样反倒是降低了性能，所以一般多写的场景下用悲观锁就比较合适。</p><h4 id="❗如果死锁了咋办？">❗如果死锁了咋办？</h4><p>死锁是指两个或多个事务在同一资源上相互占用，并请求锁定对方的资源，从而导致恶性循环的现象。</p><p>表级锁不会产生死锁，行级锁和页级锁会产生死锁。</p><p>常见的解决死锁的方法：<mark>一般是看死锁的相关 log，然后解决出问题的 sql</mark></p><ol><li class="lvl-3"><p>如果不同程序会并发存取多个表，尽量约定以相同的顺序访问表，可以大大降低死锁机会。</p></li><li class="lvl-3"><p>在同一个事务中，尽可能做到一次锁定所需要的所有资源，减少死锁产生概率；</p></li><li class="lvl-3"><p>对于非常容易产生死锁的业务部分，可以尝试使用升级锁定颗粒度，通过表级锁定来减少死锁产生的概率；</p></li></ol><p>如果业务处理不好可以用分布式事务锁或者使用乐观锁。</p><h2 id="数据库优化">数据库优化</h2><h3 id="优化数据库">优化数据库</h3><ol><li class="lvl-3"><p>提升硬盘配置，换 SSD 固态硬盘，硬件直接决定了磁盘读写的快慢。</p></li><li class="lvl-3"><p>设计索引的时候，尽量保证主键足够小。</p></li><li class="lvl-3"><p>对数据库结构优化，索引可以适当冗余，可以减少多表联查。</p></li><li class="lvl-3"><p>尽量保证数据的有序性，提升批量插入的性能。</p></li><li class="lvl-3"><p>分库分表。</p></li><li class="lvl-3"><p>模糊查询和海量数据查询使用 ES：倒排索引，近实时查询。</p></li><li class="lvl-3"><p>数据迁移使用 XXL-Job：只保留当天数据，庞大的历史数据放到历史表。</p></li><li class="lvl-3"><p>SQL 语句的选用：比如固定长度用 char 更快，比如用 not exist(子查询仍然可以用索引查找是否存在) 替代 not in（索引失效，因为需要遍历判断）性能更好。</p></li></ol><h3 id="❗SQL-优化">❗SQL 优化</h3><ol><li class="lvl-3"><p>通过慢 SQL 日志查询</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>需要手动开启慢日志开关：</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看慢日志是否开启</span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br><span class="line"><span class="comment">-- 开启MySQL慢日志查询开关</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">-- 设置慢日志的时间为2秒，SQL语句执行时间超过2秒，就会视为慢查询，记录慢查询日志</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time <span class="operator">=</span> <span class="number">5</span>;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>查看慢日志记录的 sql</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">global</span> status <span class="keyword">like</span> <span class="string">&#x27;slow_queries&#x27;</span>; <span class="comment">-- 查看有多少慢查询 </span></span><br><span class="line"><span class="keyword">show</span> variables <span class="keyword">like</span> <span class="string">&#x27;%slow_query%&#x27;</span>; <span class="comment">-- 获取慢日志目录</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>使用<strong>explain</strong>命令来查看语句的执行计划，它可以显示数据库引擎对于 SQL 语句的执行的详细情况，包含是否使用索引，使用什么索引，使用的索引的相关信息等，具体的判断参数如下：</p></li></ol><table><thead><tr><th>id</th><th>select_type</th><th>table</th><th>type</th><th>possible_keys</th><th>key</th><th>key_len</th><th>ref</th><th>rows</th><th>Extra</th></tr></thead></table><p>id ：表示查询中各个子查询的执行顺序，id 值越大，优先级越高，越先被执行。</p><p>Select_type：每个子查询的查询类型。</p><ul class="lvl-0"><li class="lvl-3"><p>SIMPLE：不包含任何子查询或 union（全链接）等查询。</p></li><li class="lvl-3"><p>PRIMARY：包含子查询的最外层查询显示为 PRIMARY。</p></li><li class="lvl-3"><p>SUBQUERY：在 select 或 where 字句中包含的查询。</p></li><li class="lvl-3"><p>DERIVED：from 字句中包含的查询。</p></li><li class="lvl-3"><p>UNION：出现在 union 后的查询语句中。</p></li><li class="lvl-3"><p>UNION RESULT：从 UNION 中获取结果集。</p></li></ul><p>table：显示具体对应的表。</p><p><strong>type（很重要）</strong>：查看有没有走索引，及访问类型。</p><ul class="lvl-0"><li class="lvl-2"><p>ALL 扫描全表数据</p></li><li class="lvl-2"><p>index 遍历索引</p></li><li class="lvl-2"><p>range 索引范围查找</p></li><li class="lvl-2"><p>index_subquery 在子查询中使用 ref</p></li><li class="lvl-2"><p>unique_subquery 在子查询中使用 eq_ref</p></li><li class="lvl-2"><p>ref_or_null 对 Null 进行索引的优化的 ref</p></li><li class="lvl-2"><p>fulltext 使用全文索引</p></li><li class="lvl-2"><p>ref 使用非唯一索引查找数据</p></li><li class="lvl-2"><p>eq_ref 在 join 查询中使用 PRIMARY KEYorUNIQUE NOT NULL 索引关联。</p></li></ul><p>possible_keys ：可能使用的索引，注意不一定会使用。查询涉及到的字段上若存在索引，则该索引将被列出来。当该列为 NULL 时就要考虑当前的 SQL 是否需要优化了。</p><p><strong>key</strong> ：显示 MySQL 在查询中实际使用的索引，若没有使用索引，显示为 NULL。</p><ul class="lvl-0"><li class="lvl-2"><p>TIPS：查询中若使用了覆盖索引 (覆盖索引：索引的数据覆盖了需要查询的所有数据)，则该索引仅出现在 key 列表中。</p></li></ul><p>key_length：索引长度</p><p>ref：表示上述表的连接匹配条件，即哪些列或常量被用于查找索引列上的值</p><p>rows：返回估算的结果集数目，并不是一个准确的值。</p><h2 id="场景题">场景题</h2><h3 id="如果在实际工作中发现-MySQL-数据库-CPU-飙升到-500-，该怎么处理？">如果在实际工作中发现 MySQL 数据库 CPU 飙升到 500%，该怎么处理？</h3><ol><li class="lvl-3"><p>先用操作系统命令 top 命令查看情况；</p></li><li class="lvl-3"><p>如果是 mysql 造成的，就用 show processlist 语句看一下 MySQL 实例的连接情况，其中 state 列可以显示使用当前连接的 SQL 语句的状态，time 显示这个状态持续的时间，info 显示正在执行的语句；</p></li><li class="lvl-3"><p>找到可能有问题的 SQL 语句后，再通过 explain 执行计划看看它的索引情况。</p></li><li class="lvl-3"><p>针对具体情况做相应的优化。</p></li></ol><h3 id="❗在一个千万级的数据库查寻中，如何提高查询效率？分别说出在数据库设计、SQL-语句、java-等层面的解决方案。-一共三个方面-数据库设计方面，Sql-语句方面，java-方面">❗在一个千万级的数据库查寻中，如何提高查询效率？分别说出在数据库设计、SQL 语句、java 等层面的解决方案。(一共三个方面  数据库设计方面，Sql 语句方面，java 方面)</h3><ol><li class="lvl-3"><p>数据库设计方面：</p><ol><li class="lvl-7">对查询进行优化，应尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</li><li class="lvl-7">应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如： select id from t where num is null 可以在 num 上设置默认值 0，确保表中 num 列没有 null 值，然后这样查询： select id from t where num=0</li><li class="lvl-7">并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的，当索引列有大量数据重复时,查询可能不会去利用索引，如一表中有字段 sex，male、female 几乎各一半，那么即使在 sex 上建了索引也对查询效率起不了作用。</li><li class="lvl-7">索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。</li><li class="lvl-7">应尽可能的避免更新索引数据列，因为索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新索引数据列，那么需要考虑是否应将该索引建为索引。</li><li class="lvl-7">尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。 这是因为引擎在处理查询和连接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了。</li><li class="lvl-7">尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</li><li class="lvl-7">尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）。</li><li class="lvl-7">避免频繁创建和删除临时表，以减少系统表资源的消耗。</li><li class="lvl-8">临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件，最好使用导出表。</li><li class="lvl-8">在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log，以提高速度；如果数据量不大，为了缓和系统表的资源，应先 create table，然后 insert。</li><li class="lvl-8">如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</li></ol></li><li class="lvl-3"><p>SQL 语句方面：</p><ol><li class="lvl-7">应尽量避免在 where 子句中使用!=或&lt;&gt;操作符，否则将引擎放弃使用索引而进行全表扫描。</li><li class="lvl-7">应尽量避免在 where 子句中使用 or 来连接条件，否则将导致引擎放弃使用索引而进行全表扫描，select id from t where num=10 or num=20 可以这样查询： select id from t where num=10 union all select id from t where num=20</li><li class="lvl-7">in 和 not in 也要慎用，否则会导致全表扫描，如： select id from t where num in(1,2,3) 对于连续的数值，能用 between 就不要用 in 了： select id from t where num between 1 and 3</li><li class="lvl-7">下面的查询也将导致全表扫描： select id from t where name like ‘%abc%’</li><li class="lvl-7">如果在 where 子句中使用参数，也会导致全表扫描。因为 SQL 只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描： select id from t where num=@num。可以改为强制查询使用索引： select id from t with(index(索引名)) where num=@num</li><li class="lvl-7">应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。select id from t where num/2=100 应改为: <code>select id from t where num=100*2</code></li><li class="lvl-7">应尽量避免在 where 子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如： select id from t where substring(name,1,3)=’abc’–name 以 abc 开头的 id select id from t where datediff(day,createdate,’2005-11-30′)=0–‘2005-11-30’生成的 id 应改为: select id from t where name like ‘abc%’ select id from t where createdate&gt;=’2005-11-30′ and createdate&lt;’2005-12-1′</li><li class="lvl-7">不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</li><li class="lvl-7">很多时候用 exists 代替 in 是一个好的选择： select num from a where num in(select num from b)。用下面的语句替换： select num from a where exists(select 1 from b where num=a.num)</li><li class="lvl-8">任何地方都不要使用 select * from t ，用具体的字段列表代替 <code>*</code>，不要返回用不到的任何字段。</li><li class="lvl-8">尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过 1 万行，那么就应该考虑改写。</li><li class="lvl-8">尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</li><li class="lvl-8">尽量避免大事务操作，提高系统并发能力。</li></ol></li><li class="lvl-4"><p>java 方面：</p><ol><li class="lvl-8">尽可能的少造对象。</li><li class="lvl-8">合理摆正系统设计的位置。大量数据操作，和少量数据操作一定是分开的。大量的数据操作，肯定不是 ORM 框架搞定的。</li><li class="lvl-8">使用 JDBC 链接数据库操作数据</li><li class="lvl-8">控制好内存，让数据流起来，而不是全部读到内存再处理，而是边读取边处理；</li><li class="lvl-8">合理利用内存，有的数据要缓存</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
❗表示必掌握，❔表示基本不会问&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-19 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="面试" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十三天-62不同路径、63不同路径 II、343 整数拆分、96不同的二叉搜索树</title>
    <link href="https://kiml.github.io/posts/5da9e7f4/"/>
    <id>https://kiml.github.io/posts/5da9e7f4/</id>
    <published>2024-06-19T01:04:59.000Z</published>
    <updated>2024-06-20T09:43:56.667Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：62AC、63AC、343 不会。96 一刷先跳过。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-19 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="62-不同路径">62 不同路径</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/unique-paths" >https://leetcode.cn/problems/unique-paths<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[m][n]</code> 的含义：网格大小为 m x n 时的路径数</p></li><li class="lvl-3"><p>递推公式：<code>dp[m][n] = dp[m][n-1] + dp[m-1][n]</code></p></li><li class="lvl-3"><p>dp 数组的初始化：所有纵列横列为 1 的，都是 1。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">1</span> || n &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> || j == <span class="number">1</span>) &#123;  </span><br><span class="line">                dp[i][j] = <span class="number">1</span>;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> dp[m][n];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="63-不同路径-II">63 不同路径 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/unique-paths-ii" >https://leetcode.cn/problems/unique-paths-ii<i class="fas fa-external-link-alt"></i></a>)</p><p>这题的五部曲分析应该和上题一样。多了障碍格子，遇到障碍格子时，数计 0 （注意一下边界问题就行）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> obstacleGrid.length;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> obstacleGrid[<span class="number">0</span>].length;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) &#123;  </span><br><span class="line">                dp[i][j] = <span class="number">0</span>;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;  </span><br><span class="line">              dp[i][j] = <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;  </span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>];  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// System.out.println(&quot;dp = &quot; + Arrays.deepToString(dp));  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="343-整数拆分">343 整数拆分</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/integer-break/" >https://leetcode.cn/problems/integer-break/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：正整数 i 的拆分最大化乘积。</p></li><li class="lvl-3"><p>递推公式：想不出来。🤕</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[2] = 1</code>。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><h3 id="96-不同的二叉搜索树">96 不同的二叉搜索树</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/unique-binary-search-trees" >https://leetcode.cn/problems/unique-binary-search-trees<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="看解析">看解析</h2><h3 id="62-不同路径-2">62 不同路径</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html" >https://programmercarl.com/0062.不同路径.html<i class="fas fa-external-link-alt"></i></a>)</p><p>有一个状态压缩版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 在二维dp数组中，当前值的计算只依赖正上方和正左方，因此可以压缩成一维数组。</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// 初始化，第一行只能从正左方跳过来，所以只有一条路径。</span></span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">            <span class="comment">// 第一列也只有一条路，不用迭代，所以从第二列开始</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                dp[j] += dp[j - <span class="number">1</span>]; <span class="comment">// dp[j] = dp[j] (正上方)+ dp[j - 1] (正左方)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="63-不同路径-II-2">63 不同路径 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0063.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II.html" >https://programmercarl.com/0063.不同路径II.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="343-整数拆分-2">343 整数拆分</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0343.%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86.html" >https://programmercarl.com/0343.整数拆分.html<i class="fas fa-external-link-alt"></i></a>)</p><p>不是很懂，一刷先跳过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i - j; j++) &#123;  </span><br><span class="line">            <span class="comment">// 这里的 j 其实最大值为 i-j,再大只不过是重复而已，  </span></span><br><span class="line">            <span class="comment">// 并且，在本题中，我们分析 dp[0], dp[1]都是无意义的，  </span></span><br><span class="line">            <span class="comment">// j 最大到 i-j,就不会用到 dp[0]与dp[1]  </span></span><br><span class="line">            dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j]));  </span><br><span class="line">            <span class="comment">// j * (i - j) 是单纯的把整数 i 拆分为两个数 也就是 i,i-j ，再相乘  </span></span><br><span class="line">            <span class="comment">//而j * dp[i - j]是将 i 拆分成两个以及两个以上的个数,再相乘。  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> dp[n];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题也可以用贪心，每次拆成 n 个 3，如果剩下是 4，则保留 4，然后相乘，<strong>但是这个结论需要数学证明其合理性！</strong> 🥴本来想这么写的，但是好像想错了。具体的数学推导：(<a class="link"   href="https://leetcode.cn/problems/integer-break/solutions/29098/343-zheng-shu-chai-fen-tan-xin-by-jyd/" >https://leetcode.cn/problems/integer-break/solutions/29098/343-zheng-shu-chai-fen-tan-xin-by-jyd/<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="96-不同的二叉搜索树-2">96 不同的二叉搜索树</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0096.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html" >https://programmercarl.com/0096.不同的二叉搜索树.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：62AC、63AC、343 不会。96 一刷先跳过。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-19 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【AI 大模型全栈】Prompt Engineering</title>
    <link href="https://kiml.github.io/posts/bc2708e7/"/>
    <id>https://kiml.github.io/posts/bc2708e7/</id>
    <published>2024-06-18T09:15:03.000Z</published>
    <updated>2024-06-20T09:51:14.894Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="be580e5e3ca26b0c6d72c3b3dacbf1ec941958a03f5ad334c7f5973a4bf629a1">b79a5b68dbde0c28674057fff9fe72b7f681138d98c4e43c6fbb6dfec99b317720f0c8bfb6f29e729838af37d3028dc2fceaace96192ba6e9fa74ea1b9fe96208098e81c3a0b2b8b7f11f69b156715a15fc5bff6aacb9c182de4fba05aadb98e85d07dffbee7646ffa98cceb118f84041cadfb4964047592de6a5984833b7a8d79c0479b919e3b1b8ff69295ecd53bcbcf5aca146cd37f5ffa9ecdfc5c9002195c9b32d475825e4903ea669e2b25349485b8f89add5f37ecf055baed2b47b03419e5bf6ca8823e05291944c29eb99592d5fe98eea30543cde1c92f39f35fb8c728ff4b9e67399578b586756e1010d3b59d90b9ad6f749b7a6939f2a70182c52917b8214742ba963db0591fa3b6f5f25459bfcee89e273d602cfc7d0e0bf12542229a44130c5fd47ac215017f3f30fae515cb506d42f04b711f22154c489e535594d4d002ef7bae74a37f15db6a22d7ae658fc8de51e2ed0f6662c3aee363bb20a7f185f47c448cd8151270dcf224c6f60031d791bbbfac7f0015ffe8fb44cbdc67eec4752ed6adc7c77c582e983becd3cb6f99c5c599fcf4667200c273b4f2a912f1d62e508a694f0f4ba42e1710806e0ab55686792e37cce306dc581a37d873133246c7a7997cf09595c2f4dbe70f1d234d4d89e9f9e7108597ff393da4d67ecf230b34d41d18af23ad577bca3fd601904ccab226652b8caeb465de9b6c66b596f81276580f35db7fd114505579d0f790814e8752fa77a81842c7d4e7d02253701baf4c98db96716e1fb5137652db68123cb14a5327e6cc29ebae4964c1280f3c3b225bfb49100a61e0fabd22bee69653f0c21d36fac63b8b298dcf23f901fb76742744cfb8bc39a844daa8d8afac9517cd2443d310b6a88f42bd07c297210d87ef21222314b88ff5db71179a12a1df057f464bf2c6b6c4b9983672d11148be081316ebefa08f158a477198de0f99e31ad2655e882d1d3c62e23412a5b7905b1bf151096764ac07d9b043c1ccfa145e6319a8279ab71d85038d082e198e98518efbe0f841a16a3849ea1c93cc776b61b3a052af32d08457026c6b833d4042e990345f2b8324cabdec23d8cb84f13fb5d346abd618b9040a30ee74e48c1dc1ca2c70fa9498cd54ce7397df6f15d63e20056022447f9331aa08d0ae5b0a9f618345afb8dbe5c2be72cc83d08a6fb53db75b2047c1d6d58d08317ddff7d5e341d9acd4269d2fa7245f4a787fac6c2eb198a3cfce3c143cb38f0ffda707788cf890b2e112268eda259d0d939e9f628859b71bd7276067bd72d8e926cf05996449dfdc2aa6e8529c04f131b6f60b750c960a27aa4531baf1d0ee86e201a709cdb6d4e77c9a4ffc985617339e6d1c2bf55e5de163283cac90342c71ddf258cf84a100daf06da0c951229fc687464296ce5836a0d5c8f307097b1b811a339981d8adf17cd3b89e027917f9eef43e1c924a44ee3c7cde3cc89e5e9a220d6f0ed34fedb4a16668ecbde47301fe13308aa830a2a947531038cbff7dda41af1e367b8c59b7ad09bfc924c0b2cc24e50cf418cacd11ea9ccec11247e093184a7ecaf7e80521d53fc64f12ce6512331527f64749e7e204c30a7a5889c436fad7a8e0464c19572e5d894ca80984f484728167181b6348552937d7e3d36a66a424f565988ef0ab2183e75811eb633f9fbd549528c45044dfbb0e2b244652be4d468c3eb04793ac243d292f6a8b3cfa96d8af9fe4a58928ee4e7570fc222eadb6724b5d2df474bc6498819ea2810feb30d1f7039f50992b77656bcb724934cfcc9db55e5a182014dc7a64281b0893c5642b043d1f65da945c1c82f7392f3f2eb59f16bb966bb8aa4941174be38a5fcf3d27bacbebe3cf799ca415df85618021ddf121263d5c0c9d9ecf9ade5eede2cb8014f842ea213efd88303919bc1c6f48f5274d93d9ea208162c16aca3bbb8cfce07717a83f0e0a7ec8dffdb865439ef48c0448ac1b3f1f1bca9e811c8ceeefe43a7ef115d9bb473475273d2fe6a8b6d7c644671f8e0e7c072a48dd25cefb431673eeaf204bf41c89bf9540a1da16ae79c800d0539a845256b12ebe63c0b745bd74a1bd97567a525c5cdf66a4a22fa42a92d65165ac2c584f10970320543292740b33a9e49e3f5d0473820d64848e3a021f26f8e3466304d0cfc6244ece6bcdeac67389476d5a23836c26808440794b6195056bf8b02074ce4cdb4793f1be862cc3dd06736a231fec52e849955f813feee9990b1e451a2ceb0d6a559d34858d723a0d83b210896e19ccc5202ece2c7745ff6fd00458fecfcb61ecb546848552555e8d252fdb6bbe56e78bd88f8239b8a6caa83ddac256d54fc5da22ae81686c97d63983c0514891a215045422f52c8f304551b6946ccd4e971118e74786da484e4c0909dee96484d4f92dd72b1c6c04837874f9ce4e5df7275135ec1efa57435cca88d0e451e828722abd77e0fc7db1631eb9c4df4ca335b5666358ad65fc623c26424637ba18ed7aca09528b4314a7c14aaa3f57c86284e964e767e949fbb0d2ebd9300a9edfb376f4b232a50a52d8a74c813432c814c0ab8795cb1f55f6a4f8b413f4daf6f33d3cb38853e6d4387f4309b93f451c99574c674d80d6bee02065ed63a43abf5ab9e456268a4d49daf9307393449bb8feffc5a1f031b6aebbfd8b1961d89b9faaac00edfd2dfe6774717979790e9e2ba27093d0a78dc79130cdbe69ca83fade77e7914b31db46b0d2adfe89ac2b5cbcff205874c373a3bb19bb566b4df4ed95760092e7579b61ac751e106d4ce2f681b586ed6376092e18b5557f2264c2c6138cac09a9bd025b3d80b666aa803b415cae97772a7cd762bbc516ad1b42e86876e73f3eb79673e6fa745e0e1f6a31bd76dc16d147b32b01307644a4f672f68ade960bcee097b12ea18d4163a0a0d3df1c9464f060bc85ec350dfed892c657c1eb406e9acfad6a529215a1776f51188241c5defdf2db40b8045ad25d98c835676076ef9e56f88a996d4741b65321343e120710c5feabfac67c6e5a0ce365e7a9551b08b4821d5fa3e0831fc2b43f34f7ede03aba006cdb11ee84ac4df036e23eeb9461884c16e5fccf500f744e40c047af979ea669c1c70bdb037f800ad1e153499e2a0d09a603713644b0700108ac7a397c2a334a5fd167a9f3c2c774fa91492c8978fd0647ae90a4ca012c551a0b4018d9efde43f0e09c544b8c67a2c0f69222fa7a32683916989dd2b74c46bb9c8346e0ff6510046d568fe80aa1ddaf2ffdbea219f4babdd4fcc1077c41c524fb2e4750f0d3bff585739e7c080aa0903dc2aa90629731048d1433dbc5f3553fd26179152fa94b9279be51952d3a49618fe1403c8af104798d4fff033a269bc3679fe665f495ec630b8a03983421ca47fd2687b8e5aacc5d71fe5a1ff5b35793c24fca660075c961a4a78e737f1384fbe5ef0d29378ecf3170b9f715b2ad47119170e6ca4106689d192d02836249c4bad0ababadbafe43a3aad4b4323d293ecb887946cfbea69e02d9dc3ecd24e85805d1a6c312d88b5a66afec7b3ede430d3f898af21247374164bb1a383768744e072e1dec8ee0d4e4c97d2c146c9bb5fe6b2df8272cdbfed4797ef26a73d349b5b0e5748a2de75960db25494b10347568a333290e15ad0e8d4ee0fd9ded7c7f6920cb231c044bb38d6f3c7f37e3725b1a846e025c99541a7da67d094a5f36e1d0d91938e079e58432a29cd43fe52cf60eaa893ff691649914af628f13377eee5b4d3ce7a0ad5d5b432be0d705c80d770ba40e75c2670128dde85ca9aebd1a37214674c49bc5141300c5c48905370a61c8bbe67f7396d598c021c2ba54b5eed373359ff11b85eb5e5521dac6694681492602ef6c33af8908ce3aa6796ac966f12b111c21caf29898173d1daae1a40279f9d110503cc0b613bda74624ce998c614ec4887ae8c21867fb67a9b56b5ca609933daee2efd7da8cfc941991ee0c4e4e36264c62522884ce9aab9cc04a8eed26ceb53b89a0032d49e0480594aa985427bcabe87ec7d3ae9b98d98f4fb4380eac11b70adbf7c63d9eea34eba87d3cf3fc50c5b7ffac2bae34f6459eb8b743796712101d89cb20ba5d185e2618234075c13976c3606c07bd0aaa1324852030ab55e0780091fac5ef2216aad34e4635b54e67cdc381a55d444732b13e81b8c44a59a521935517c1e17ef11da3ae0e9ed85a2f10423eaa77ca7791aec8d480a362275fe0c4b68e0bd78dfa6cc5196fe554d7dc40cbb694e7c6f52af91a59f9269afb831eab8d3dc62faa6af2f527f216a7edb8215b60bc0b4e2c0c0a37cb5ba2e3403dad82b497addb59be436e1a84d8891443cd6de4bb7937750aa0b2a43e59d666fc500934d01fd6b731d05906212324e8717ae69d2b3d0d302515d5ceb3fc567e240ba62d4400521457040bd909b15b6a97cfd2184fdb85024fd47bf2c76a3a1e989767ff1089e9faa2479098eb96f874c48a1b68e7d9ec97be52294869ef0056b474d5c84e74cfb80aedf58492625ab4cd9e0f62b4db599d487123ffb251e2bc7ade238b05f88103fadc1967d12c29e8113720d0da96cd7b530bd77de8a085d76c0896c4942b404d4d5cb92b216f4c0df5207a5935fbef85ecb9ec7b9fbb1a645bff41d754458602aa31f452afb5d40d8ba2513a6bf7e470a6c07d3e702738fa464497e019c34601e09322d797ed2060db1ef2af0b14283fec1a9d0562002ee4f96e78bab8f9e133518e4aa01eddf981201783f7a9ce1cdaa84902319162555ec73d96d51335d04324d993436b6dab2ee2e6c236a20a78a0ab0c07ee62889961d372bc07627cfb806e7e446795bcdaa01c7c4ede3954bde81b061f5c28a34000b42272c0d3666a2b2162bb879bf554e028bf9d1bdcdd956e8f83d531dca7fec15d64671a248e29da8ea89a9eb9182e0ca329a064ac1fcf40bb8f5c0a2daa86c9fbb10efc861ff4125b6ceccb8a1e271a39e1fff0802587e350ec67e102035cbb4627a931ab34fde8b3c07079a2e96ed09c51d250e403773442c678677dc5a145c05ee42259d2a72d1310a0b8112e2c544851c59192f9978702921778965290550fde529236516e89d324ebb1b212b5f18f79bd762c02f2c0b4fb77cee650f730686cf16ea625214938ccccb3f5a1434d1f9f80d20c5f36b7e3b160c9048a39957f802e388c22e07e786558ebb208307db8ef661504180190e24dba37c06ad7873114f60c8a6172d0bba308c89231e6b8e1550d9148e067648a953b75d050c714a036d09c2a2fd9e5eaf2d859a9c4aac4bed26b46a2f49bd94b3c63e9ff8bed468ffa20b2d894f753325dd6258848e0ace5d9ae139583c3568b9939b54f22b3353c857723bfe2fd7a42f6c2f6a29fad971262a61c7677a7b0ad0d4f422d2c7b9b62d7edbb44f07764a50d5ad8b1a3bf8e05f3ec1135cec8a909c617cfcbc08a02cd4f19771e7e1bffea953a98d89959a68394ba57ed24884f96f13de3e6444d90d08fa08e035b3ec2a9a446fdbfd07b94017408659de3843bf1715225ebfd2a110041c5a4d0e5613e84a2b85af71133e9590fd55ab59db31c9c067fce78d6c53cccee2302631bef30188bc360bf07e2dcfb3abe08a8ee8d7cb36ea3402d98e03cdac4cebd53ba03b5535dd7a1edeaf20d0ded5db9ac91338d44b9299eb4c84396c2d85f71b477921134ff80e1d8b93a5fee46531b7750f44ed307eb7b44d90aa3c6225cde8ccbc9812c356086cfa0891dac827e6bf79d007b4132140c5fbb86ae122f4b165c3c06e1041a32ffd009c136fe201038fa4def4512ff115ca7410e2abe7963a0268391c345d02e3e18b9db482b3503bd4078bdcf68ee74af9b08505d096a7a102e581dee9d4f1779e92d09c948e9336fdc0818e7d219275cc5b7878dd5afd3633a363bd73c741a284db985ebf58c539da4c645705bc77817f43b1fb4ca0289f0d1571851a129d2faade5b5f9abd9713e8875eba133f09f7d02e1351ae1189ed43456f484482fe5496f40b1441c4be44d175da2a9918e73909a8954cfce6d8287e3e3b04d551b886c77d8d4bfc8593005c532e8c52c3a51e14b59285a02bc481723f31cf1076e260d13c622c70fc0db57cc32301807b9feb3e56766bf53f7ac2f1720eef96cfe95ffe2cfa2a0b0b957884859a67f5fd112c01506d37eb600b7245d2869a786a13f37926b18cab068b3273791dcc9e4b2746611a4b3da4dbb9fe9059d5eb20f87bdc49a0b5331a4ea7a187aaf8384de6f6def92f8ed39036d591694715f2a52ced0916ee7746b21441fcf3fccfbb60c88f5f6e365cd2ba57b994dc111a23ce0df179c5b12bad6728d3947937703a4d85ecc31016425e3a33bf6275474314f9bdb987f19d5a0f74f89cf380ad5a5bfa2d88606e7b216b5bc8dcb0bd82ad37ae21558354151fa8fbcc642ca2ab78fc8c017e50c93db3162f3c3dbd7697610386dc8afb5ba318ea787d9634fc4f801cf30b63c61093e4ea11d9fa579d4f5cc4b49dafc1249e04d1276d79fe56b9f62ea518754f81401f3248720e9c8c90638093fd9489b1d2bedf6f90bbcceb0c692004036a9142862f35be947b5dc90db9e4b582a546849cdfdaf0ffe23bb947e3aa0f486d7b88af1aa14320c333dd8741a05640a8700bd4d780a6937e9c889ccb3cd8d4dd6726027cc2e38a4a23956b2f359ab40ba9a3223da3e5a3823d17823b7db32748bf2940125fe20dc147de6e1745959408cbdfc09c7f532cdff992d7c78ddf33f902660c46e4c53add90e2eea1e08441742f944aaedf2193be1933f4fc525b9cdb5e7a0b9088c5e6d3fac87c05772de310af86c4e268a0db379d7118fe431d39355705a9dd21b4d467784519dac7f0637f98c4b5a63e4cb1eb279f3211c752090411a8b5def8adcda68690a556389ad48e987301bd51d3066709a203cec8b7db5218e9160afeb85e3dbe42eaad5531be50dc022ba03d7146d4e8d3f0d696e27ad4f89e7024ae1c07878831c0cf8c65a1733dcec6ccee3419350b801a51c4be260da24e20e696a034578193b9c3314d01ac8375050211a66be3224fbb31fbb3426cd0e457ffae2df2a3f468c7a82cc87a50f4c1901b10f82debf8de0e9cbab8f701c541bc9203de57ea2e465d6a103de7e7880e08c00145f58fb444afd0afebe691ac287b8b2af1b7f164a174c34bc6963ec01f2ada452f9a87eb684b619365a4192f8728d19ed749ddee9cda49ae58bbb5d33a1f23fe6900f01465d3eb986067141b9245f43eb50e53f91207a0d4400aa47d450be3d2a189bd7a64237a51940ec875b7899a2fb4433123ee0be8fccca35219585a045e59d39f517507da33cf649af5fd7b357605a4ea91280af4a59b5e023b7970fe5eafc4754fdd85297a4bfb4adce82bceef0b3a3f12032407386a07985260a07e8b0b684902ad49de6dedb81477911d551f8e5c5a830509d49dadaf04c8ddb9aab4b4352cf4af95187967ceb79b8b6d4ffb91a5c8d280d09adf572a979edbfdbf87a953d6603ff8dec90fad63085c23f407f4d35d3794a162b21b20f3902cde513ccfb79b1391d829700f367beff6159368153783e4dec0d5632633f558c79a76fa7303ad2995ca0e427969111cede5f004e573dbc7d1810931771041f959f90e0307eb57d0eedf117562cc40f168ca4f6a8027b1cbf4345f42f74d5728d2d000818c7dfbb375e354f66bb84ec6156854f98a35131a5135bba54ebe849171879a8df92e878aa4b0e0f3b298cdcd2d1409760ac713a45bfddfc6c9252166341a040c25b99afa4649ca812dbf056e7fd51558796652d29c621928b630ec308a5192e241cc3c7ec451d88f6a177b13eb64d47bc053854765903dc41a2770687bb596e4bb7676e9f1c08e783f0fdbb9a419086b98e210839c8e5bf80981cff154d1486d1718edd887c168ba14d04d04f99b9d8ee9cc551d9600368916310012135de6efaa092d760764e7cf480315807eb5bbb45126cdc1ebf8df890d9a82c0176c83e1b3a525747a4c0f7d4724a4d8f48894adb3bb290f1b2bb8b4bbc5c328c5e60590069d166aa890c71012ba1a840d421d2cf0ab9649c3a0be66c09f65b6fc853959bc94294367ab33211d09c7511338f24d937ba000af173beb3200de0de472d84d92a29912f288fc6a209cfa3fac1ab0f5428f016f5bff9fa8255336b5521aab841fe2ee878242f7e0bbc726e431f9731097cd15eb7e9fc290bafb24ceb41d678855100ff9313f230e203b8db24df482bbf0f307b0a9197233119adf018e53bb2af97c5441d0d64e8aeb8f453213a25d66a3f8f6e62f677e17faca929cd3b6abb7ea4975e21fcf0dbdbf0c9c769b5b242694fffe25401f3d122aae149b13fbb260dc55fae3429c6279b4494788c5cfef7887f0fe3122d24dc3bc9d9ad226d68da6263db7c297efc2fa9a87c0ba344aae573cdb34e76042254b7a6029433472320349611c6b61e29b2f7650f09be4b00f460c4f2a8c4e393806a46b2df8712c4ba252974c9a1c2172bbb9152eb8d802c3e8b46d7dd46251d8cf1428579d8f42c014f255a1dddbeed7d6a609f482bb102666024cb772f315349cac41feeaacd555d8983d1db8190430c73c0eacf54cced0f2a824665f112bb64bb4199504441612ab8141e26f1c59b6571fced0f2f41c33e48c27506c4c51fc87f76d08d235cbc5d98c2d4ad166451ae31cdb78b1cd3f56e0cc34fa1f3ccd9a0afc55e3bb5fe21a959a30b1fe16eff3b6058596a756b239d8a7d087c07daded3f275e398113cd8fc7eff1501fe1edd461ed1e68ade03c3829c5e524c21f725b0a08fd58a1cca327800dfefdb81464299f5ec29fdeb37d7bf62772c83405d2da364862535a88735929d5586b45aec8c83ef30ec6e080123bf3879fce2676f2339ae796b3938692c24e6d6e6283fcf7692f33b97af440e64e6db99d96ff1505b1a8349c3e3640d2bf8a9d54357922ecc6c5269b132f1e0ad2faa1dcf12b3f07cd5ecfad29a7ce33a5c73bf038406348dc7e97fc1d943d49a8eeba1f16e274a9fffe99eab11974647340f97877fcc0b329c77b3fd29cd7df557d57a19e2217507993bd2ce51c207add1044a72d90c1aaa2dff243337c409131d704197e8bd2e27561f026dfefd27ecfdd5daa75c907b7c7a50b65b0113a90189006db6d4110203e6169ccb7fac162d485e55aaf47f2b5542dcb8d8cb28a3159281fad4bb3568b4b79ebedcfd4ee932d1a24e2c58ea6ad9266b416053e737f750366c0d74199a9f80228d089c038beabfe138f090dea03c19669e4660345872b2ef7b98e80cc48d00d6a4fa6d5a5984e0842b2dd82e038d857e71ac88c0d7fbf29147d03d47bdab7ab991da75a0d66c0ecb3e72ad5a2518c6073657d846689c0a32d4b7ca00cb0bcd1ec70ff5510764adfd2877ae28b6bdc7ec95e4ffccbd85ea33bd5ab68b607e9b5c88d705a734a99e05bc2eba6dbbc2ea279794f30c18e6275a8551485d1eeeb8ccf6ae0c0badb368112a651fec7c046b9ba32e3aef56c3a013d9c2e070e24149935b586b8a66d56ea44ade641297bcd8dd042b348f0b435a6f67b5a81a821f6a9368df2ceb2def393a8012503cd0d9485b750113ad0a3717696a7aede034efdfe03aa28029395635506f62da36a88bc6a973e8eae1db3a4c02c07bb040ecbe0ed8d51c7ebf45229c1c70aa25528bbb4f5c4cea7a14c91d5e099a003aa262a9dc248af3ab42b4ec7f7569b49fb5976435be736c454d4c8d771daf4010cf77109103ff39816e5557d06f97f3f9b748978fccf8a8b2d7a9c84896bacf94161b595781c05f48cf0169540a605bd779088ac9cff70e0926174afcde0fa23e29ab1d2eb8edeebe8d488ced3e179f2f0ef9d45f1a8f565fd10b69c5ac8d141bb57142b1a6c4e5c803a5e72296c314d1446415e3eeadc80adefc53aa2a1f223fa8a9de9f8624c88c78b756360939998c93c1874e3a901080b5584625d1f42836913ae98592f0681995129b2169890ccf7af05e158a3473c0fa6724035f06c0caa378b2a1fe98fb38277b01fdbc5f5ff16652dfb4f9fade38ca3cbf47d1afe3610e024e25ff0c6fc2069b6ee6fc74d607ab35b53cf55b02453758c411418fa1152a88ac9abf048e57e0c18ad3b47746c7a19059a51e3aadabf748451592a6b585936ac3e54e2b60542ee4514f2b95cb20e1633a38653648a234c4bea04fd64c04dc600ed0762d45c7b22834a885f98041738f723b7916dd7453f0ace56ac7c0e4cc988502a4cfd3aa699778ac30dd874c28aca7d55891d52ebdcae64f038eb4c230f86b0cf50c372f77adf008ab55f5070c21aace8d994853591ee9ed2824b7d3998be6e41e2109530baf27868803b49c25dfaf27ad66e8f4df8e032e3c352134a6a7e90bc65a205b989cac285ee3c07816799507b6ff6979425f2951563d7ffabe3ce13789b202f0092f6af40fbe027162a47f9c0edf97f874e8fd3e8977887042a81b3a5e03c360c5c9d2f6730be73163dd3b8b605a425401c87ea7c95f570be4785fea91a499bef8a62e3215fccd9ac04c5b31de06f1744adb56f0dd483839f9e4a0086b21b6dbfae2a27845ab86d7bfbce0d9c945b51609943b89cc4419861f84b81e9f683ceb8a4fb03228c7c10cb1ce2878b339fd141af57207fcd5b6b95a420439871037d1b097844c406811676ff20fa2d642e69315959fc09000de4353c4fbac5f1ab1e25f56d24a21561acb60ac70aa803e19a8ac7aa1e70aaee58cb535d0cd0bf0c3d8626067613723a93826b6430bd9c750db890531f04fb9edd0659f49a6f11a3cc333a29b9c62350b5485a4c9d855bc180b819c1dad8a7209ecf8c0fdaf11ab5299451b3015a7d7db03d976445de391e1dac786484100e9f5dbebb1d91cc240271d9559a72a72736064886a4e09eb7f7d3330922f0f134b30546e2b9d4cc5763a15edb4f32640bd2636492bb8cfe5b710d017838f9a17a5eb03095872bf22dbc7d1bba7091a08f7ed63a88ac0b9686e7f2a4f92e9c89bfe00d6355480fdf0a6587b2d1b47e2157dc6c8363c3b3ca9708e9130b030610948480c1658b35d7b73ef073891e199d22eb7ba5b198d8e636c0705d378e3035cd086153b624b380868beaaf1962733c92294251ba8f1aac169999f654a0b64dd88f16148d5a254cb316cc6ce29e9e86ca62f71fdcb3d0c2e4a71b67d34f9e5c89dc1daba1a250155d7525c95e6d5f2cec6be6e3d26205088af9589ad1dc496c14ce87b9f7f6e116868d30a252511a807383d92b5486e13005d46dc6ebc9576a0547ad3d879c2ec76d8faf047f1b4d670da3d5ebd8c4b2f7a8339fab392879e3566d1670412e0f5cfad5922189af558f10d4356f7904298eaefdd27efae9d7eb862c09254c68224aa3d0ba0b478c7a5fd15803fba76b21de2a0e73514ed9483b0cd09072642a0421b502619f4ef4330dfcb2351ca413aa88b067556f7de7b8c97eb37fba2dfdb68e80b4fcedb50588ce2d62260ae7f45f3789f2b6eb7d5601321ca52e3f68ab1ff9245883e7f205e68d484b9ee9b3d7a648660225d88c38300663381a944fa8162d094991bd0a96218641a9bd45e7247207d7703b69c20749c4ec1c8d53608ae199a226aa11d15482e5982dda73ad6d7a4bbd01e7eb0e027512eb2ef3c65fa514774ceed86a0749d1208fe3c75fbf98c662bf08e6f07129cd579ebf91d5518c295af82320362e1fedbc547c060c4a132b819afadd095d9bb57e8005d313a0bc4014739b9285fa89eba3ebb81d06f7408566116da6ac30ea386efb1d2a3a867743b65bb34bae33406f15a20476c8b6a019b77f1b71d67e1801205be99a40d49254dd315a26e225ec5da036cb98093881cf11e0bdf96028d05ffa8fa9ccf687998689011ccfdd60d82b56507cf9a782f9ec5cdba2aeba40e65923cd07a91f3e00188c328dc68846dc519951d2cc69299c9aa90e08617fbc4073c872ff909dbaaf3bf44665978991dfe189d3bc18b03e0a78186f7f2fea1abe8142ad5c722cd3ff92851af5162895fa1418ff5c461c5408e1d188adbaf6212c5606d25cde82da3952af505220d896604149c6fe3023b3a82a072297470fb3bdd4a04030ebcaf6e475edc049a67dba3c9589782db289a23034fdad5fbac7457764de185409165a8ca7310d64e9dd5227900ed1d1efae40f70a41949acf5aa9de93883b94918cb01bbe5c4b1c9c5af2f1e4fc13078e180c1155bf9d1f790003784ac44d4b766d216da7e8cc61058dbb3d270b6bef8c9d9b497a8f1cc2e2d7625f5e2f9bf8b960de2e4546e3f081a2ffa1785e2528aeb592608a2b323644bd66f500300caefc935a517d61ff1e3e446a4854d64768fd0b0d7b0a3d5d6e2cb75aad7cbf7a4bfbee496b25ef5f659efc62ba0cea126cf091beeb204008bdd00a7779bbf6fb571d85a96aacc24722d12ef3929927cfa1d5a84dca57d840a6885b6b842b6678bfa8aba294812e6974baa5df586704b4976175a2084a09d06fdcc92d1944ee173f0d3060f7d7e6e50a6d6508e9fe43115b40cf476c7e41600d13753b0d047051c68c78e53e510a4cc229a967a20c860bd8bf92b6961b086035a2d2312d00737816be550ac4426cc4d67b966f01556a8526524720e6e5f672cb9bef83b2cb7c0626ce9e7ced5b9c19fd5be2f31be2fa05e0bf952e0104149585f3debd4f81cadd264aac78c356571715348f16a7cf6b46f9bd07379f7041e58176d1df77cc7b487eaa21275c440b2690961094def54df0bd78ac1875d57cd3f33a67b7f9bede2fac7f5229a62b9f3f34e7a7970af3e2ebfd142be9688d00fb376458ee55d7c74f675830d1a091cf75ef1a97d0b168697ae4c6b64f08d2e83b1de49b128712ee3dd22ba0f946515a2adc89b241ee7f33c5b9cb9e24c030ec851dfc2c9ea38f1dfa27e841708b5e0bea1cb991f3426d727721e22b6cde826f9c53980389151f37ed91f1cd2079e2f3b063f2f170c8fc2b8f91848ccfdc6faf955413b7f57163f9e9555cd3d88e40def7d383a16dcd7e9b9b8a0ac318602ef2aea6a2395f898a2acb60a2abfa38353c377cad0517ee309c0dc6484ad6101d084195ddd0b9077cbdf00346a7eb2fd6f55c9c5296c1c9ce0fc68e54e7c8d06fd415281c1abc2ddf8205db05874caabf022c129327e3efdc47d1c21a695c016793a66547a5b54f166df4c7fee81efddc97c9ed36963e5cd009c6ff34aa5f88376588d9f766de21b2b7fe2e060cfdc74ee7ec378d4227ce4c8b4b498d98ac9b9ba52794f5718a822fe4b23090efeb137ea579751575c599a5ed2c4e127d9c9dec15a1597e8c326fb6e3e758390df9ceeb1a121e9c2289bfca92d5983b748fff58382b56c1812000076867ec8ebbc1a28e44a346a6242ee054f984933dd93e14d4424d87774c6751c8ca783fbbfa0648467f100cfb8b2dc2481a88550f352116e08b361c5ff35d9a301502be08480b3342898d827bf77f65d43a67624ceee3215f74af9bfb2627af86b685c695b588a017b974c5b839c35e6f85144f8562b5a19baf83650e0ba8d199e13346fc790963aadf8c8f51bcbea54f7f5afbb81141d2a01b77c369ad5edf23e8147bcfdce2c88aae932d77bb02fe40d1c177b745d51358fe87679381e6ca5f295cf49b0947725d2c63352b1d44c8248ce959ff68aa15302028865bf6e090df70a08b3211e72acd37fd5a9d1e725867c99553c21ec81ae17f20c06876835b9c612aa271978f9eaa4677992f3bcb1dca4aae4dd8cd533a85a563dadfdc3d6dfffb8e1c680780b1c810bf000929fd3ef52f5e04afc7a95a51a488353506e5a27af6cad30c9225544d6a1a52d7a5abc9f659866b6bfc2453eb8b277099d3179d5dc7ad98ff9fefdc18407903f95bf5aa2412e26c5cd6b8988f3c45cca5b963653e7193b887dc8a9dff17fd9a12fcfcd19510b7a90080203a6852f8f32e32bff0233a83a4821a3c37933a6bd02205649edc5255c40de6363717231d0544bf0ec7ad246e84cbad482528e980ca076ebb254f3531c66ecebe94b0b1c1227d589f5680669a9289855734b0d1a6371ebc1356149c2476462e2bcab20ff6e6006a08bf359cc07975a13d1e72744aa849b12fc7752683e6f35c641b076fa04a31fcf6e8c2d664152537f10caeb0125dbdf7211a0f5c49148ae63c7d913ded76e985865842dbf75ed060539ca783a5a0ea3b3699739fa0e21a0723810044d6f08e975ae8dfe97fa3c1a7f695d8104450b9f00ac5928399bab8759d117f6bd04c8fffe5ba5455464be9bb3790ee1e82b4738c2d3cab3ea005c338689536f2f69af20bfceeadbbeb0371181f3d13f241454fd0015753532754b7f6b7c984cbb217efae22e4e68b8048c2e8d7035cc52cf4845b053e93d3bf3f15911acec949398aafe572bf6ff443bb3c92ee1376ec2dc7115d66999d1bd3c3fee347169f480b663538931c3ebbc3525b9c57f73c9d94973f7e18371420426d97b0ffa050fbc7cbbe7f7aeaeb1d2129d2104246b5a577901ed3e1905e2a4d9a2861063913bd5a41da58a72a1c1db90252d99190dab13cc2e7d29bacccb2042de5cec5fb04488cdcf4a3d21f22b82571737c43650d6522e209e7bc5124a09984722ce42fcac802bb4715d739e0a4be5d884c856b100da6fbe362073c727f4b0d43266c57175a97f37dbc9309b0f1037aef1eea265e79b6ae2c0e6ea12fd0114b2f7dfc7cbbac457f585d7d74b5e33da807d5b2c32db11fc3dcccb48751ca481eb9cc17c66012cb14710b65c6e5214db3e5c3611312742017b014a19f96cd586c2aa15223465377739056204acc0b34a6d7cbf2ada15d0b64c527f39b35c2e54b6ddcbb70eb4c8a02a77cb20142c21134c537ea0274e3d1350fcd5c185867e6e0ac12139a71132ccb055ef8ac459a2d195da1bef8b75812855de4c268fc27a85af48426209bddd96375ab53dcd12684ca97fcc9a832e7d7f2e14cd3f6075503a6f568377159cd5c86bc32214c8184085f701724173336c03022314bf4a36961a11d5cf7c0a55e9847cf24fddf5e589b165f9a62c6459c43b988da41bd0bf604ae98a6c1fd06093a83a57452acecdb45f38b52b25be438873d450e2e2af46275d3e9f5e13eecb4b31731d4e095ab0ede5538d68a693d0e2c9edff5cfc2d7db4cb9dbb08490f9aff0263ee4aab15a9b2859885f240b3ba8190f4ce63e9b2e656527bfeaca4567ad236a87a395f9d8e30da2ca1c5c8c82458e8580615c4099a679a086b11381056a2a92bcb4e9eacb49e584009f26a7986b5c361f76b43a348cdaa7ece14c198afd67b1c2a337977127f4c453fcaeba3ae530846b48f8bde8233671f2247befb80af325c4207a86aba48e5bba3b0f9f9dd814b8bba8e666941b875db34bf6925b5976b5bb19daef0f65e8474705f8936bf997c0e2711ce0dbd6c62d7a204bb190405e556a2e42e078171199a89699b1345d2ffe0ffb934a7ed0ed5c4d53b09072e91c1aaae1e1841cbdb528db2c407672d7ec19ab2adc39f8a09dfae9d7624a697cddd099f45ec91d18e02b1352a4e8a6ca78b5236e672b97f573fe679ea3cb83b89593df65fab1f785726da78dbc0d4dc7f1b5f04adb9a7be9ea92e7645614fd747fd10195f8372920ae1112bf256306e17bbc40cc2371fcdf8ad479268617c6f9e11413491755912798fd175b3d2d45e91086b2f8ebaffdf16efb24d30c5c981b5036def3a991dcc8bcb616cc67878497b0d0367f3212991d613b0130f11be2b3a0394126ae7049d1321f32b178af56713d369f150c780d1669e5e3a06779b126ea8a18e7f8043c7aa4fa91540595f98b0a2fa0d75670238c5db3778004cc3ba761a26d48f8150709c89161ad2a896dbf773519c566c5d5d346e5213b8c9413f723bbb111775246eaa1395144ae72bd598626f2048204dcb6afc914742996a0ba606c43a96c16d87f70daf3d85e4f1cbe7dac59d3efc762b641d8a026577b517696bf5f98a48f52833a48c0c5e945f5d2e45b269cad81fc294b094dae7e49c617ef7e6fe29d767d8408ca6dbe93bf8d5357927a6f241b003e0fc817b2f176b82d8f453073f6f49dda165f7dccdd030b8b07390885b7a59f0bf3b05cad731b2f6f50dc0a1a46ec65faa201da11b415072bb6ae5ed96af36a4e713d9191d423781b6c003c42494da29159614039dee329fae865446df2773472d242393be7b32766d79d38d389399b4d79273fb1defbffda3482843b9f222aaf63d9e31e1db0a831514b354f9504d7ce921b64d47ab3dd2b8c77fc96a5e7f3e8bdbdedc0b34265120bc01de8bb84f6f3ff94745e06bdb0574a3dcca25348b15cf7efe1c29d33dffcdca7b8f56400194f7170f350c8b03624bd747998fb28b6d8e494132b5b04481a49f6bc08871777917f571a11b35caa905ef9af479e9d431fda08566c5ea539e2b416064d7c5a3fda508cddc0aacc46e223c482b63b06221232af874c9556255dcf8753ef1a900b7cddaa43bccb79b2c1b1180ada0541ff2a01da0990d9c38296e1a7724925e47be6380202c115d72157672ad8283419e8d5dee0f2ddcdb3cdef03c273b8fd9d645414699c05b22625cdc30189a0511c4a640290e1fe756f9c1d16c21a44813a01562ddc93511c3094e2395cc5dd70afcc958e359bd1bc7e1b96175bc8c4cdc00ba4b07c1ca5692b6f366b92c1b161dee24755c4d05346cb9b3a18e1ef2ef60266ef953db8ea03e54254352cd9292baff3a8c0eeb2d5eef87a904ec5ebd2e703690cdd3f482769ff5aa73133197dc61690bfc029e13f3db574b8f3602c2ae8079a63e61f5c43b9d9e8bbc322e940d1f4d0298176189f7180fb3797e88fd3ae0d849070f88a7a682e5dab5a81936571816cd2027541793b47c99ef503cb03acdda6abb5e2cb1636f172766c2cfc4f6e37787220d70b4ec725db42176bc192c0dfdead77b6dde5254dd56890fe8dc8f6f5240cdd5cd077d761bc46ed70e7f76797adc3760cc62623cd5085848cb61abbc36533733769988d40392cc1a7bd913a47ab2d8d9ffbefe72843f07ac352c57fa40f4493dee7cb962ccad7d43d7574b77a06f1ebd65d237c4665f1eaf8f094c4ce2944b63d9196561ec502c0e1ece2bb72163f71f5b2ad8b36f19d0549208c8a9c55cc0b931945ebc3545b175a76c25c3c8a324e8fa08d04284a191b908c91e08067964201849a18541ed0f7a80240d61395c29e197b0bc8978fe88e5c222b4a48c2a96dcda8788c8c0594cc74579d1e19a1d14adcfb61b28b9c9edbba5493ba6bc458964fb644e9e46e270489ae2030c86b3d1a29e985b2cd5c861db3944336385c86d1a05fdf1aa91af172b3a29f6f4a1c6194529a7911ebabe6b1c45b9f22239fa67ad5e1ef03bec69c4d66f7e5a4704b3471d993ecc496a40c7819c9f6f6a2afda75ca45fe7063b79a1beda8b3c812aac4636e5769dd307de4c9b866b8520cab90b721335bb9c508c947b4cf69161425de83e8b3692ec28d1d27ab9a1d4b7071d2fe4b589ce8d7aff7828f26d91b2e2aa2aae26e87923bd607726f88bf2282e30eba7f989c0a6398401e73b068360ab058c07112326b8743663ac0bf8323528aaced171a4335a58119f7a52208c4bc5b253289611895b5d5f3ef5db917815b717d65ec7fb3ddb827087e1364d56d32c599f6f591bf966e1967b598c68267965e6cbab35e1b00a6da68ffe5ef8408cb408180d232ab3a147dfc3bae042c065e840b58be869274ab96c4702d67c2ee4774263a67db9faf97a38ba28f7ae9a31d7a428ecc970a577e49db828b26244eb091d696c15e106e5958b9b365ddcd377bd171d212418bddaceefea158a288e7ed379fc53cc5153d90274474c3a4a3deffbec6f3c6e613837b4bf1890d1280f3259bf02e25ecad2e9dd9933d3c476293c41643cac0f294dd5ef92e4fe7593ba0f4ec13cdc243f88312710ba3021133e8ba527f3deb56a3ea7e103789b407fb5e16f226d9d233e7e66550560db2a437dd683139765fe9d9c704616a9f3eb3a18a05cb07c5fbe23acb1a12352bbf31c8c0ea12095db757599b49266d3676cf03e4a794e005a1462446f29ce94d843df445e1f9425cd06b4ee62157817cd4c26d2bd380a8d4780484da033c11e5a9c79cf7e623b349bde882f0e4dc6777c9026c549c7b2c58e7dbffb7781f106f04e9527b92d6b9ff1e94a93f48cdaca0d52afe432fe59d7bdecf159460a2ac4b56536c3e61b3bd16ae7521a904784c36feef828f53d4375b814d55e663382ae6330450f3f079cb61984860df5dd962d898148207bf5a61e401259e7fa762077f2a6efa188b6a131c87ad826b4350fdae09118722d0768f850fdcb2c0ef6799320ec80667774f51ff69a3f8c4d66baa222ae3f27bb6c52b15954c982a6374116feff96a34adbb09dae749f124048ed48dc448a7f228c92eb8417e64cb38a1eb89e86f771828e41ae0b00be877fac21caea313ccc59045a29c4bba93a9a3f0f56f3924a81f691c1ae8c3b6e5bd6232c26701bc2fdd4dd465ab1184acf67de726d8f59424cf8470d0858ee37a1aad66b0316419a52b9309f5a7e9d07d2a51b58359c54a4c2a0dab41d101e84cd90633f3322be3535ad8667f6ba52ad0c152e556c23ed5079529570b5aa32c039f2c061390fdf285073d1c80c320fad24917619489f62e81211ce62f604d0d45cd9b50aa396b74d88bdc31f3370460a7de5f95b8a025ef29158938c4b7ba0b65496cf5138a713fb02199ff7f4276ed781df95f71d4ab909f85d4ae9c3bb63add986032a1fa5de6f8a494bcfb49d70311de5d83f74c4bc7341a98ccf0cd09814001e512f643997394b29b4cd70b8b07aa55e450956d53fb48b33472761661f30ee562ce5bf59d9f599714e29345e6bc670894cf5a8811077c7f17fd1eaea92fb538590aabd91f56529482f10e44d178806900b795c810e5e450b44de35f85322ae583fe93f3f7a2cc8413784d0976074df7f6bfa64c019cd2197a3ad825093591a000cce400ea66ca8d4997c09f91a703b2af48ebb8f9ac111adfe56ab406769dab5516d6f32694c3e2ba109eb05bbeef05e7f841ddfd82cab6fda84b50081ab919ff0e795dda34756a1c1bfa8df08ed8a149d419a3ddaa47d3fe2ccfaa1fe3c9ce9972c660af0009bd41e50e6bec1ae4d8010d3d7cbc3e91d4c7a3614808ddf8ce1dfcb4ebc2313e3b331782ff6552e797ec3c7d7c9dbee4e404c491f35f851453b77a09c2cd8f7d484c0c18cdfc7f727556a0aca7b45692aa127934f64fdbf4576bb4d64b94ebf1a11e8e568288ad0add2689f39e57e47940a382827108f58637a21f58678b7b1b840e0fd4532460bb4c6edfad6e667a80a5ea95fa86e2c82207367e8404b85ab56fbe09e0c00ea14a0f044f81125247320a888bb1f65a847c24086df9191928eb8ffe472e60e3bd7e606748bd7bb3af733c7018dbba902691c33a464cd2754204f0d5d0852c86c70ef4c7452e115573a40520ed226311a1a1eaf335d13b9534d7bb6a56d06d5fb84fbbb93dca944ea152c194fe420c9836bf7140b696de29735e0b181ad7726f9e3160db9cd65037c5b847eac724b261ac53be4e6d6dabd36f23b87e88620894722d0bc126b537412a65e44ad4fba128ba2a4c4879d63b7a995730645796d74a253dfe18ff7fd95de1788e097dd05eb8ffceae81ee62a852424ae927f6ae8a588536561bdd9cc6b2257e082a456ab372ba62f8689b232191612f5eb3926fdf486d3f799802bfda37d4ddaaa5bcc271a4e2163c8f0df20d0c5c4472ee3d705174ab2f213912cac02f818d5ccadecb3f21db82ea81de2c85e786de48ec2b88e66f7166a566e4c5f629b5d5ec98553ff5b43fd29aeed04f44f33dcb78a254ecebc969ca565e2b947c0a2e51bea9af3f5d9b6a675e01439e15b1c6b52bce3acabf80de8675e4a1167bffacacd36bb14e6a1331496ccacb9a45b12a0f0163e5764be360d0415dc6580d4c4495ba94bf9ce8e6d17dfe8e7d5c9be68d4aad4f9e6e4bab9a0020b9a7f991d329cb3b6c816b9967c00dd4237d266088b9871a3e9a59e84a87b31a1d8ff6e6df902eb10fc6f4831745fa978f15926fa80cd353199b5edd21edc4d6ec2aa745cb1e9b4699513f2205a3543093abb36ae5fd1cb8bec0c100a5dc20e9d004e2a396b27f77e2dfdddfa767ea6fc91e0cc1b659a55478169efc990a9879b1b9d35a406f6a8a0f0cd6a84bca60c70f2a34b20410f370426745b8f3aa9bb49dea508ddbed586546f37fc2e37ac988eef0c733324620d97f8e79bb40ac5650d10818e3405849fa8ae21322e70d1e43e35e64635598288cd19ba472aa6c4a05136b6439a425bbaa6d778d44fde074ae08d74a32cc177340a4a6faeed97c0d60b64f43f7371b61364d1b7656aa37dbd27f291c192e307a62dbaa3bab20104edf5fa5d0ace6e11b195070d2051521232341c813792dffebc3941d497c4d6e0413161aee6410d15f702142d2917a1fdf23aea8fdf0ec96ef0d50203c2192a712679ffa01156a9b068879279bec5e8040ba99d9f5d80c2464d7ed2029f15b90ab581bf1113dc396c85efc71153a6a8a822825df7bcd94339bb93a99fd9b931e9acc9fafca09a95e55a9f5f64dbb918f826aa3af8873a011a23a2b965d454dfde232720363731122de25f3162ec0a6a1fa91ff450b01837b749ec14780258b5a568934f7da17553141a5b5461a862b42cd5819d92aa5842a374ae352026c7c53cd018c460089e1ebcf3b8db840b32b30e4cbf8c2a1c438a4977e3a928f46a4e09e9546b60b9337d38bb0cc67cfd113ff697ad6e0ddce20234d94f110faa57371b816be3eb56e18fcdde20ad1c9a83fab494a418811821dd4fd0821bc2a27cd4f6135fe7fb0d6a63b70b007a6eaf185c5daac5aaaa024195535d56962e172915ef5da2c2dd80ba8553073fa773cff22338fb3c3c0321338bc96752f25a8a887b4fa3747d590e086390e49187a85034dcaa71a40389fc0925f09b74338ce72a967ad3299de3d5e5cd06c490819f3104594396145f86f8212958ab6e7e120d2a2f4ef4b6848d60259828b25d482d3a0bd221ac3a00a5afbe3598b6f744672d9d85902cb8d7ee7dc16a88e16fa380bd3c376734b63d5786d02754561ff57b9623bec50ff6b54d0236cef016521054f6e45d1171c5eee25bb1d28895fcebb1085d88f80c29b3d1f801bcc03f19225d789e6c2b1420446f9e1b28c1d673dcf9371ba9722896296cc544bd2e21eaa987f42509d3a973ead325f28c063a47c60dc3f7e3255ddfd38761fd46deec69bc6a0d95e5379bffe2a4079c370f0e4f3d83b77dbc6927fe192058747c70c69ce322366ccbc4550aa4643475aa3ce8ca5c34783997321e8cfa405742d1bfb3170d11a0da04f69c3da78f2674f3c51c5c76bc32518a36bc279f2c4b6557ca4128ad6d34a71cf59406613dc0d72079678108998fde75d030e343ad2774a4bbfa1e58e1c91f5d0b84385691b9c720435eac12bf3cd9af0efa5f78db781186f6d1aad2400b8f5c41d085ee8a9d3d9a31736ef5f16b5bbf352f9c6b0076de95fd421f82a871091d6051943ef2c79628868fca84e26c637beb8e00526a30640536de2851d825b6d5508c73922e282f4e04174d30ea46ba2dce8052a49d845670afcc78ec06b68716485a64d4f9c4c04e18dedcd344dad851a83a2379db6d7d3bd0a8c615da4c8bd41bee4aaa3a6bd3a8ba22e473798b6b3d7955574310a5316b3ff743d4a0a5893de021907162b60af03b952f3ac6625547dc3ec37fc91d3d129a792e823d1a6cbec0861e72a60d6d93b87ca9ab735b04d90986b79a76b7741265dd84e321a53137536a58810fa083c75881a066fcc9a8bc59af85d41161ee6e548bf8f49bee9c2357768ca2bbbe91376a2dc7209b457cc39b562635f0b1c40d1cffd65fc677614e6b6dd7a0d8205679fc4eead3ff232d816c899ca3f90f9d87ec03abc6549710ad59afdcf34d01db3effd5d89ebf80d1b4994a221ff6988462fc58b59a06731d60ffe5db86b7fe5ad33ed85d6624ee929d9304c941b0c1af9d38e581306f2c596dd2658878c5e7c31650b6b0374058bb05fea08a982e01bcdf0faf954ec3dfab310de18d772beed693bc25357068ba953582a9caaf64f7fe91c9c9249c82317770f94e68c98a6acca5b4f310da2531fd7d55360a3a077794fa9bb26fb73690e302be18dc92bf720fc0d285a57905fe8674486b2ad90bd93aa6114314e5491a7b1118cd035d22ed6b03f0d6f79c09883f5b590d5013d37336efe5ef773c286fb99f7474e15d9c76f8128e5b9f5d1d1f2ea14ce137fe103916e1c803f8bafa4f0322ca509795cb646e37aa4ed88617cc0302db246d5c44eac6825f71e85560cd882bd7f2f7c5180e58c0bbbd4c20cd0d7224e60a28866fb662f04a5eac90a834f3ed21a45871d86ab317618b99e70adda863f4461c9d27254067a630c3e3cba4a0b6ea9405019e65f15a8603acd43c52b6b35905d3cd3b43ac11c0790260002d6317e8e2e45341aa4a157c03bbc6228a6c04c86b6f79620e847371483169ab7ac995d4f8506d180fa1bc390f5afb96b4b8ddf1192a93ec9aa06e4bfd40c5e2b77840105ce4bdf210bb2f5abef095d4fd158fd346f413100c3ecf9cb045a1b5a650d6732ac4f65b881e7916936b6446603fa7a36c09090349a3951ed8440b1646fd799c4a8baca96a1c4e5aa0e81b27da746c9187fab2c5b3ee417049a3dd358058e33edf897ec3a8aca615b8d055831ad987ee4f2a29ae711bf630ca15e54d092bf3a449d98285640ec0ad678d49579b5948e096bb2d29a769e4c1d205aef0036fb684883658d4b78832c9b0de614e6d4089ab23c194559af277de30caa5c1b448b1d51af9079993be46e6f0baa706aaeb83abacb8c4e86d07e308fd5404617e64a4a6be634c26897961a16771daf97cf96ce5816047d899ad685fccfe37a2aa5cb4115aa899e1d4a149c94d1042c2d2ef3f828fe78ce9214d99bf359b4cd2437da7911dbb6a4580f986bb989e9dd7a36f1157e866810337364babad24ca2af67e9125bab5fa4f655db7e2a3ddf2439ab2efb6be981582624e3ffe241908c9292d964eb0468b6f31e46a1358ac47499759e41f6ecb7bb79e56fafd9f82a1f6e2c618b33288115adfe19183511b9deded8e32e4517449b47f66a7f7a8bcf6caf7bb16e48fd06546eb127bc6ade50fac2417e1cde22d40b8872e157b75659a514513ede1929c1a9cc1da870e0c0468913aad52a158adadb8f49adabed185d181fd483b0462a62ed17096044b146c3ca29b67cfa28a4c78f305ce0225b918cbd8781cae5e310035e5b7a6114e6b049639eadbd2370054b402904d850f117199846534b0d8c02b07e4047a5284a4507644a3164245bb93aa8bb09fc70bc6cbc2d33d563e487d3f7c47dc99d92f8876ded0354ed1dfb7748130f07a0e8c05f0e9833a84898214b45bcb173cb1cadd9284bece5b8a65249e811b07fe33a58644e5d5139c086e5ca84d4f3ec2ed4775271071c46da25abed0cddbc6bc4e2552eafc2e1b67faab14bb8f24246fcf3806cfec6704097eb614ecf466ff8db6253bb748f7aa20af7a365fdd5ea9da1f1ddd60a01415838e44753e1d0e9d97c4ae66dd7923e0b0b76cc73fa32f098356ad46fb48e772bb4238b65a26de6107391c4a64957e535cfce6206afadc2846d4881f97c85a904f6541ccd84e67cb2ea5ebdd7dcf67f82eb93570794da9ee48ef8a4899dbe657e029bee3897d798e2e81a40c06af9ef4484f41ac45888abf7d0c6cf0e6060d3954312f16936ad261a3ec95ca8b63068c1a4b84e5070dd1ef4837c7c4f30db34d4176b9e54fc18abe4deb1248487e6cb58a1539f7b634d19894f34da8f5917a440a933b573cd4dd922963be6483636d4da60305265f338d36e675b4a1977acf345ecce71826d7f5b34fbc798d06d5107d2ee226a319470356a6f8feaac871afa86086aadc7fc7b93de99d3599f4a2232eeffff81564203f97ee00ac01e0e8ad5ebe50dbb849527e6e02c24af17babb4eaf9d592a65db1fdfececdaf609b8146fd9cc24ad9494b230cbe389bad2eb8af7ec884f9ee14d77bb09b70def82424d3c78b0aaa1dc7fd28d7461385a6dae478ad5a65569f9ee4107ac6880eefb4adfd9b1ece34c4dd8d360c720485bc9f52163707faaea00191c6ac5bf17e9ad22a7995bbe95a9c6f4bdeabc821b9c2c7f83223140b8727e841b4560abf12e2e8d561c0df1a2334f4b7fcdd2b12b061f320efe8a962724888e954dd5d6b16e0d7b0331366056979d32bfe5b7a56dd9a940bd8b34e129c231727d01e9d27f275861de518486e41976a222ea5b4a1f0f8d0c9b29b72745813f062537111286a65fe06b60ad744139699f0754d20a5028190509c73abcef2e29f09e5a4752c2df85a8fa40b05fc71f346582bee5b743a9a1ddadd457f05b2982899ffe2f9c138f48b702ac18d2cd74ed5a4c39b1ecff9e9b76be18e046a25a4c4b69cc0aad37fde67ed20be57036463d519b79cca89ba46753e2d65131443b2f096f4b44310f6de066d6b19c81ed799f3b6f2f95f3d9bf88f9fdb608f26de8cd9dd3262bcc96a87736051e60d4356c3162733bd01af6ea9be02bb39e5606576cb695aaa38dc19d6da88176b619c41377fd6d370858fa6c0c9632d7ca297dd5cb3ba4d6703cb161e97ab8db69b1486636e4af6d272f880a42953063cbef30efd4de2d6d579c96af42c08e353875c32c935d9538c2369673d9a62e1fc0edadc00adc9bf0064e77a97cb07db138565a4bd771301eabafda6a7082b10ce5ef039094842405433a0cafb981295d5ba34414bc8f0190b5d1838a0377ec0353e5e14b1d47a1067c8ca8721d0957afee26fbc590cd2dedf5622f840ce0f3cab8bc16eb4b50694633fab6ed9e4b0f750bdf0bded2356ac2aa48e8d814017b475c6be5b7af004bab9e3a591e41603d03a24a2e0bfd11009c4f8fc3cd80e55401594c171352f7444200885eccd07d1d6c9d392752b61af1d9b254da3d421fa81946d39d90e438410080be9c75596e9727516e13a971c295d004421fd0d007c916c9491918aa25066b82cf7aa586d8010d9508ab1f8a0527f6b7ace11455ef8e7b0692150fd1e13042c21732854728b69fa3e0cce4f8c21995bdb9ccb9418ffd40877202e4fd8038118f931b40fef32eee9036c61a02439edbf644c84a2c4fa0ff54433d83132bc711062080572b01df4bccbd6c5b2a0e8de992a81ab4573e8f55bae6f1b5132eb249e9c4014a6d072bf6f53cce165ab1f1de52768fae7fb81c9b848e4356ac46aa4c9bac3624db333afa1fc9cccf79e1ad867c024dc24e2f6fe6a0786817440d9627b762ca38133bfd180498162991716162c60d7e2736101be6b44bc17a4357010267665d0e5036888828751ffb5e87eb756b107aa18237eeebe50d6e36ef5b45d667136cc948ce7afce7c48e709953b31fc42bbdcc516ea5747520627a520e98022250a80be22799ee5466606c8cf74f61e906c28b21eb1f1e31b75fc9be0e137518e1e0e865e3475edebbca8c70b9ae4d29db5e2fe9bb65533e2618a17f8fb639224588255ef4bea2209b3f5d29cfef16047f27576484392ac8350d46862339407daed93b91c28bde40b6c6f66491b11f923f06fc9d29a381843cce801dcdc6c102501f0762eaa1822d1c27d1378a6e589d6cc4ddc2e51e5a08f200de61ab127759b3ce2a5b7934b918b1535e480305aa64f39a5d9fe75c0d31075dfed38d85c8d5d0c04a25a7ae4647322882c0765be1dc889fa2effc44bd2984f3a50ecf3d081dba328f3f8b3929d582a1d63280e3c03b2973327009b0f3b63d3a964adf01b7616c46ee69284a11a74b4fd42eab89fe42578622ba99057e5d2e6c8b9c0f6d7766c67d4cc6e4be17fbe17babbe220d45e17f5c7ba94f5810b50bc7f4c68e6f789cc62a73eae0a030c295ccdbd65c4d766a07911778a45472965fcf11788e36411e97bccb1590cec427ee8c9cf75be9f36daded750a18ba254ebda18c13aca504ab0564bdb791e8289e311215d48e640fa3cd907321e0da8553562eff00606f0411f0733a0802dc1d6c09541745be9a30d9c001a1fb9d63f7956b77241e9d60ef2d96711091ed9a4850bbb17dd94e3ca9d03b55624503307e8eaf5fb1e61ca47f1659cf2f2226ca38f9f427dd34ee4a7a92d4461a7f1c8b843d78b6d83d8e98fbe0e8c73fed3afc0183e34b9e544198c840cadc32498b4956a79a5ed3572d52894bae57dcd6ee9a58ea6a6909d3a3f4850090eafd09fa94fd8063fe2592f39ae9238cf02dcb70ea78447f665381ca17a9de9b5476081740735593c47fe57dc2b61b4ef3fe8d3c980a706e795325bfc24d64f588ecbc683f940b01045c8a8386aadf7f5d3916719afa26c3eed0d73e39d2ac7f8a36468adad84864a76a680f25c8e49799fa0e69bda25999beb2d99c496e2b68a380f332400520594a6adf59bc81c28711a62b09d1bbd8c7e2f556038afee20e3be98d2d6cd9a167c69342b992deb0173b28f2076af27234c7a4a63e7438cc0dca8fa2fec0d5ab57bf3c76df96c68762d2e116ff376fd87e9f8ffabdfc3bdd383a30ca76b4fd8a1336f491b7641522a89811592e9906f4afd63a1ee6ff244b40b6821dd48483c22a28a60a4ee6e8134b1f7a80b584d53fbbd065685618c4051332e761c33df98fc1d3f7c93cf79e028e79e4ae72f19d58e18074b5afe8a28e6b705f9d80afe886d75a54ffafd6685d538c2309df5b649df48b5bf192b8eefc2e5f26872691e4b6959b0e29d2ea697cba8ddc2792e14e239c084901d48421222fecf632cb5ae1074581374c4acd9aae790f0cd2d4e59a1227572850ff66c65872cdad7da450d8c4dc5b4b40e6953fe2cbc71241dd0c61f4faf4e7b59b9027d3f1f2533402e3db8f190938aff893a46519b8f3815a7d44286f4470b8eebf63fdaaa4b2a8ce50c55fa14d8878f568f4e075709196e951b57c9e3dd14deeb1698cde1e13cbc9a922f0c1942b238398b290fbd5550ccc014d0835766a77d219445ed25f5e35706e6e2d6e2762b29e2b199abea27dcf63fe3402c760f9415c5126fd6efc164b199855910b8ff9a30c3044c6ebe069015526c93aeab1af3b1ab220fc409115bd28ce0d4f6ced2b1e6f858de28ab34f8e029b9a0c4c5244a080777c593745f0296b5919449e59153bad0fbab179d5334dcfd742177cba2d589bdf29330ac23f74fbd03b45acd1ee5b115f05cb0a5748dd5e854cbe701bdcda67c24eacea96464e4eecf248491e48579e0fe7b236b7ab3b52094772574fef72c51887bfa3144728c7818f59f66e434071e526cde0381c47592798ecf7248ce03d477a57f56837d94e36227a1613c388aed39012d175e71b45464f414220211d780e39800e6ab0f0c5a187dce65d2a46cd206f4fc1201ef1e267426c0ff92c04ac7dcf321df22ade4f4822d2be45956c08ceef52567bbd9b6a5933b8a34e2fb43c221de6ee95c2bcb7d058c2a7882a41e99b66cbf251d75166f7e429f960ceb8f6e07e445986080f4908ca94e466536692f7a179509dcd286856151944574255810c2fdb6c3d7607e208278dcaf49594d1345c0b5297170dd61e5c3e8cb92b296ef6459977917fc313215dd13481262976321f2712eacbe9dbf3ff95ce1a49c10592dfc8c9dbaaf350f0a8e8b8cb3c265ed9fe9a9af6a1e08205bfb64505964936d75b2ff63a8f39a4848843dbf265f83fb69750a927e5cfd03fd19668aef67df7a23019b3b44305026ffe6c66d3baa0c6ff697144c55d7ff9b5797ad4db89d371efccb9c9f6995be36cf03596e617f953c5dcb70cda8f20f09364b85d82c9c4852282fd957ddaab3f37665194c735afc3ff64afa955b04211a91834ad54e038743f0b487608d66236e5b7d2e5b63c8bd8fc2a2e9721c9ff5a389fa610ff109a249691b309f60d77e2df57609d3f29fcab8f840520b85f59ac721dbbcb48aa1a084d45c661010fdc05dbc0d0c8bb9a3d559b8bcc03e8ee98384acca6e1a9922ab5bfea9bf0e8ffb909e74b28d0550d5cb86d71cfeeb2251902f583e2a06e63068784f6b7ff657897e1515946b816128e26f4434ab28ceb2818c47af0f6835070d442b024f0bf1eef759acec41ecbce0d9ed56d624abb3a298f7e82e4c0fce7b6eb18db694c4ba2d1395e9f35b48e03181d31e2e1669871638969ade3c297071d545c79bfab554be915fab41f3822fb4edfdf48a570c6d113f9f9b5589ee5e8a37a53d1c75b3901e358c83f50da8312d9d02a5397730a6f8b140ef000127059982a1fd4c41422f2a1dc51f3de520372d28f44e4f8075e742d84faba86c100bf59a9d567b8d337123209780a1fdd87e82688bc596313bb3c3d73a4eb424d548cc6727a786c09809a67b882a2ebb167d94229170140ae37c0121cb6f40d21be8c2fe997c1a5d7fc173b267030cede0fff66b8e9ed1061505794aa71a5dc1e725e40993f4639025c527cd4e39a4aec60ac251928002d59adb6c23d4f78491fa8c897cd292c5c5daa649f59e9083a6020005b2eff47d6becab854db8707ad3fb6f7b9ea252ef0004b2cc6e0eb5c006d24288e8b7ea7f92b8cdde296c1c553f489d4b63845b5481a5db8c600a5392e91a4e70c849d2e63fc7d58ef7a6f076476dc542ef16fddb886753fddaff9867d3e1c3f3034112cb1c68913c9db1cc590cd31f5e8f0999f84453d86d025e24fe15521b5610e26b7d3ed8fccc111455ccc7c6d834b5a844bfbc8b0eadd1955f42ff03448dec45350844746f2df9f6a8575799090e6219ed41edc33cd6e79699a9480a64d71c719d646258e9a8e1f9ffe818cda384752f3cbe17b6f238f3e4102969baf7feb1cefa32724947efabb998abab3a86b0e1ff24ae75769b22e94afeb73072d3c5e6f7069dfc6dac229c69c2ce434473ac845bcf1204c01d3fe807dfeea285e3512d51dfd73dfffe13939b3e4593385238b921a27e37f730dec26055f2bd00dd3ef33cd74ba966eb2b4ab732b26211284745b48ae4e954d91618f662795854bf0539b43e689cf08904ad6badf74366c6bc5b3a46bab115a0f692b5c7ed544d75408a269042968b825a39a7f6a4d3855bb28a6895e90e03bdee4e919e5e2f72f81d1b45d26b0c79c311387739e7d73f1dcb186c19db3ebb53623ee0044a1a4eb47ce98b010c0b7950caedbafd073a5dd8b6396376a5a8a817d4966ea6e4a7888bc295b633daf251090d4b528ac32ff02c249d8e1e10320f40a48311cd9c83a449d892f1bdcc5d87bba7328ad9b5a8dbd1aa0c08399129cee67c065218d21964271aa4f41713c293c5b01b9a0328e6c6989ec4dd27f383a78e972f5f887ab486c6ade5adf68656bb9a26e8dc996a25aea8b8533d1a038f7104b8a5d668a0534ff6b8c41631c24ae65464482e6f2e59ba5a2e1b067e678c21e3608c26c5500ad1135bcd06dd332b35fdefb00e0465d2164c08bfa1f5df712f42e2db587fe4925b436be6b595eaea86bfb987db66248555cfa93b3337252851ef318866c9df8a676271a89496e47ceabc2a09dad82539d7aa5757d0b668efc09c72e0177d950ad36850d99424a7814b434cad012073a4e4fc44e24beda47fe54308298736d32793c6afbd2918a867085a8445484c4594db80aa62c32ba71aeb1911cee32493bcbacd13364b39ffd9a78261b7061baa132358b932729c071d71794d2c84f984df94b1539e53e01feaf3f73e2703f2c140162971d42d5711ab48b361442fb5a9d18a07eff295b852027376e3ecd4c009dc65c5a58ed76fa89ca70f171878920ba26df98743364d11670371b5054d8ae111faf5b477080f93107a1a4f6ad068f283b3e1c82c5154aab6422fd455bfe2b45ca8f444a068af4c25c9f9f286dccc0ec95847723a2b998fd6f6f8beaf6be0e6cb3d6b7bfad4cb64341e6a434e5951bb5f004f9986e7156222411148167612b853a73577260850c085682c9a2a685ac5c587a45ead01431a6fb66c1dbf2f93f1a7468e4903009210877131852d34ae5f4330ad644a795759f93c6f11fd3fb5dd8c1c4614983fe94af2662dc6de6d2cdd377720e3742fd2506293e1fef8f4883a530fcb3d767e76e4b25d42483501cd2cd493a9f9877512e7366b575dd0faf42961b0fe05d93f6f7cbf01ec89337a85f8c796d914bd43c5d3db92699e4e74227df659693bcbe2febd6910535aeeb548e26128821f0346d4a40db2b8f0ad1d5a684c3ce9a57dd1b73b0f7de5952d805eab6a4fb1fc4104ba6318e0ffa0a1c6c17f8d137097aaad2b33343b5f61ca2fddeb6da1b951fa5a695495497a75b7b1e079d3cddc3f6a789ce3d59d6b682ba1671af08e1a282532930cd35cf040a640f234b52c18b67fd6d161db2aa234fa15ae665739ecd8625328ecad0116bdb4dfbc0e56b44d8520124c0ccdec2faf7beb543d853ebfc38e18b12607c11eac8252c33ee85f884f8c251dad9f93aa16dc1f79030a1c237f94a93bdb5f805f06789c3b1d1b11796546ff82f117a398a8f12b24a95fbea3b3c11366f317c9b5dde976437c3806123c6d290d8702113bbd795a323eb0c03231fdeed9828d60877ea11eece55f33fabc97946facca52f312e233fb85df91923efc4a47af60746704efbdbfcc506efe47053c9b8a130b155021e0c24e41aead9cc327a51e3fa29f9485ba97bd3b08ba3464fac19defba66768a0b6d2b07a1bb977ec8fcdf4c21481421988811cb501c2aa02833b155630aade4620dcb99ec93378c28f195fe5720e5e49843d6305198dad1644f3362688e9b81027da7393a3b87480b6495b37771295b4db61a123fb7992b8cc9c499533752f3384b4c93faf2fa45a56ab313861e5bdd2088695d9e47f646d8be871efed7fcefb19e28f6e45a15f45b3faa49139fad2b7db1807f9f8adc9268368b05a2d7f21ddd47a28257db6b84da52866cd04bbe951b7593afcd57c58ac5bf391839cf09c60af354e5be44839bb13cd15460ad0d966f202f01abfafce0dac55a8578ca64f8f16c138f9d94881e0ac856880976ee4da82442e282a7cab471eebf6fc2f2e9ce522f6c16d62798aa57c5e5de659901d16b8e97271b26f19cdde64420c8c85c82e1c81f46f99fdb51395ed850b7e97132b65c5645fc4c8cb2df2b1e164c1a6eac2c3419c191d85fe1fd677df597a7dd84df726a8e345d1b56969896fe8280ad9d090f25e09361f239bacbafe15e30a9e7b8b38b65768f53b9183f18b95dd212a4b2d2e3506109054839e43e4c10aac6cd91bd0877af7e4299f526b7554572c6d09e456e1d08eda6fef4c1185a3856df78abe4591e943356c695346acd9becd2e11fc709a74f558a86bc8ee10934ff9ee07b5504549c983678e9b4e532c6f78984b50725ae72f479e0ab2e8e9339a2e29a973a6e648c772af2426873dfee60f0c3d2150073017efb6c18545c2640ac34eaa0c19c07aa08d146018770b80f87da8463857dcc8138586c936d760c376ce1c2049ade4aa98989d000bf05e4d4c2dda7ff14d4b3142ff455da9cd31b4db8f9df7e0712b3b5157cc06cc145dbe73b5b756f63525e60a462aa4b48abf1b9564db197c97c072f314ad8b6ae16db7719efa645792487df691067062242a172e8f021b59014092f5ae747784b70aba7ad1802803a829ab560aede9bf9484d1310c12a1557a330ba1e5dbe28a86d3e20dcb554501f7e3da5326a951e17eeb68f5b445aba6a438ba5385e37acac26b083567e9c46b702d542a7e9cfb9a3fe96ebcc5b7bc083355e81452b9c756a6cae9a149ded955bc85883e8581c42c3476a5ae390e09051d9a6111cd0a4b51a2e571905cbba0014e3cffbef18800bbccfaa790591ae49774b83e18219a45be905912606a3443a991c3e0b2ba8ca6f29ecfc946dbe5870bacb3d895de81f81ecac08a6ac1ef43ffc6a0052a46ab8b3589a7f3bf00981209d896320bd5e14ffaade72664d896f5c39eb343348d0d4a0a810ce42b40a10a2e6a5deff179ce211fab03745fb94b61515190f9729e7bdc646193a67d1c649b2d28722d952032a40d340be9e8decdbcac694719468fa5d271c279138f51f32f5a9d25eabe2456826b698edc6f8240735fc9c831b6ac7f43779c0dc8794eab781f5017fe4ddad475f6c8993703649e285da6027d1183e517e5afd0535819e5feeb4ef51de0f9d80f994fe5678c9fbcb75d3b874919bcd9b70ec257c42321184841869deda677db7103e9634e398a5c64b36c6769824337ccd559d74e8963a08c5ae736f3e31f37c2e0de9d52c1eb1297c2cb2c0fb0bd823d64bea891d6cdd0324144483669aea6c68f59efef216d7c1542123bf930416249b8c7773670fa1a98c99e76a20c602b8433636254257fe2076c76cfd2ae1ea8657297fa666edcf2eafcb2250a6819453cc7902cac8b014e36aa4381e852b0066742a7d98aab71962998d5f58e68636691e2292a82b7cc88a962165de591267bba84a12b3f7ad7f97ba702ae8aa9c768512a1fd3d6dc502d9dae5796ee78f404d5cf638e62f07d69db2874577e470010aacc7e37cfd93560e334a0e2c624ceef967cc40b39c74074475231a1ec133852c0e8fa22b77cfb003982f1c87e6da3617027e79b6572813a6290f98de2ae2cfe8fa409a0766f6abfefe5a0970835931fe3932ea50d4bf6ef9dff98c8d9d67ff0987aa8b121196a9fe7b88ddf28421dfbb49fec3725b133a838ba1da6172bf8a305e38ec9eee46769d24b3832602cbfa020c21682b779a92c71cfb2eb392d59926ff2c35473dfe456f95069d6fb123d1a1b317a58cd1cac92fa1f8ff7032f1c4ee0354e2b7b09f3dc387634a84e8ee0627037ee9a9cd6fa1ccab47a1d997026dced3ae8d36675dbdb4885b348889238beb34b7c59fc6135925f92b3bb631f82e0dae1393de9b457584b32fe1a8ca753d0e59c7ea330cf63f3d6a0d05a584e27c483a17a9eaaeca38d28d6961cc0b9e228318bcc62ede1e3e8961448ce3bba4807e878a1ee147cda6cd4eb4d0ded8cd8346e22a673ac5fb4126c789d01b504e9679aaadff541f85d64eb2d862c269239d89f3adf1596dd56071010cda7cfe7fa3b75ab478d149eecbfcae71bacf1aa97818cd3546906f089fe01937af2e6be168c0620a58b14409923dd0214ff633d67791e5b0361f1fc1bb66954cb4f16cc29258e2f3b760bbc3248f2710d1560567db04d2efb3048baf34492b609d72d3d254d4d6e97cc3da73c79f4a856b55f7e46ae1c3ea444f4c9d584adebd890575e026d7d00dbc8a391c94229fe8fa8de31480759134e63fd42fd84036258c99717d7748ed5cd0f30536e67894ebb145b24846dfcaad56fdd5d390333c91a5ab3b7edc6514c694bc60a9f67ab429dbd66cdf22db2798a8c7c84a776709822225d87b1d1be6ba9702f8c838ee9bf6749982f8954fa490703a164a292c3da4e60d53630958c2c1d6d2e7dcf7629119087b45298f1412a2e1ee0e2bd17aabac85cc3b6a2fdef294db8a61d4b0e18413d2f76ace36167117ef1d897827a705f528f3f2d380b186ab6dc4a099767acdb8c9f9d9d4e98ddea87a7ee03a9afe9b62f991fe38dbfd781d1e5047c0b72965ce406cdc1649caebceb5526b7ee733884b5c320e91d8d22fac25e7f032c755ac5e5d6e79083ea9c406866a333ea0f3072e0c0c75d90ecfed6d3bff67ee7b92382f0f1ed26db53df3542f0baa1bf1c16f4be5277e093b2aac7815cd628198e1c9140c49a106e7f77a9eb35bbaa2e9024de0692dbe41dcd46bd50bc44cbb1c743a1329facece4f70b55fc0500abe2cb1830a61fd3f59027bfba7fc3a72c2f8b7b890e9ad94dd899485f9645908ab361dccbf38cab3a71429a1147c6e63c07667748348fd1d96c3b2aa5485a1652547bf92949bc0850fdf6ea39e276cdd01081d6655e73712c09800c206e51e38620d225826bbe9ef135dfdd88f70802dd2483834f1b73cc278d69cdcaa5270d116c2d99dc3df3738b24de9539ca6e5c3257763206f47a4fb14baf933db84b4b6a787f29723b97864508642ee4a46eda829a2217397ad9ce218c25755d2f68c58ebb240d2580d888616082eb643e033a854417b7327ad514a0a2daf81d6ad807c681a74fc818ccd428de7cea4af2cafe6861cda78358cc68425536599af2c76c02fb48dbc7f1d731034a16ce56ec81eb682c08aa05bc2467b89768777fbc2e1765e7236a124fb5f43226607588692659728c7c8825af20fa5cf0e0b3806995ad620bc3023f6b0fbb0004698809a3a5f66e0bea1eb19d44bf2de5ae92268b3a0fe419b0782a5c1b49ee6b60f186c297155df00ef23d114abe81c460dc7b82363743b33b36511589ca5152ca958448683648099c93c0cb88130b3b98a7f07864d8fdda7707db51d6d82de5842d5532d89a64487532b1e3e0a177100784babdba9fca4060c77443dd5ecaafa86c6f61b4cce777ffe08f07b82f198e27a80250dc354b60847a08e264ff1e71c6d5f3b470e3ae54ce323306e9706880b8e645eb9e89ad70a5a9c1ee1839712c1f799f830f3921030af3c26e249507348b034281d7bca403e72698c0508b40a2be3c65cbe1d2d6bbc30a6634616a240123497d3ae203ef6a2d525cc20ef92106f0d76625f3adc0447ad5775422dbf7961b69a4449c2577312319a27e22e6667a8f458ae93fc77a8dd2d2566263de404942d05cb82c90c9bebd7d638a983b0442aaa3cb9b1ef0a9887f73faf1e0aa4f29378337a8711bb2a785b31dc0370916a0ec7e6d3e736545829dfd91f7a5b3d29dd6bde7d2c1a20852346a549c7d5e879a50d2f31085a4876ebc7e0fd83516c51c2a14a642363c84ba691d21611cabdd33662443a945ed78b5981f60bf71425037307eaa68ecd596ed52f1cc7e1bf086e7229308104945318b3ddfebfc701413ed28a109ccc4e2e3e863f469c517dee9cc6a34b9cba687330c2c70d43155e011dc7a49ac6590f2a7ae1325fb9ead9e03c097ddd24f803d1645669507069717e1678f0a39c815872680d5c295d7607ef638b6390a5f6fe5aee2628436f20ea73081843e4c5b62f3aa91293c029ce909b73b3ab67060fc3416c442ce5a98cdc43fd6832d495f50c3668402fee90d696c3ac8185fc1fa40100aeda7f965a2d2b060a59d694ac26e0f7af2fdb6cf721aaf37d84e4b76a6db5444998b0bb012e217db4833edd60e189d535706fe8c6f4a19e937bb2a3caa6229ede28ec7d56b7e599207f17e5db43ccf39704f090105d50d4d1d48eef14287efe7228d0dd37d9f47828aa699d8552a824ce2f16657b4ea2d02f8b0897d9da6b2826bd1cb4e7d9c8c467fa2afcea54a3e79f5cbcff36369ea9f568109a30212901759eeec221c69e124c8d929a3dba56e11c530b7b0baca4983d3d0ed61a72d2a6e80e685ec49c6f4314497e85fd380a51cb145ed7fe9e57bb2a62ecf55fb8c62b6c4a38921e1ff0b3da322056c3b836372a3bbcae4a084dab96ad4b5875fbb14f093aa26d7c7444f41edd8cb37000d2b31b568d0a6b06d4a30a0601b2a936a8aca6fe317f0745717f32fa49649b60f7db770cac67618bbb1bff3ba1580ee5e504287c71eb79f8cd92473e4159de2cd7d1b4616260840ef2e78595e8db6bf85f165d5b84f75065728c947f4603a8b975aeaef07c0599d9e1dd8c7d89c6c4b1bd25764036aaa6fc1ef376d28adfec78d891902d4bd4b90d25fb95359340d06e9cd1cca4d983aa920048035808bc5142e59ba1a5ace67f96dc242c4d79310a62dfd7d6ac6fea977a34074c2144123673d958779f8a8091b7c054e736991ba3a48cf2fecb563730aba6450f1850686289a0203a5c419829b3d381021f6de7808a9c6f7e27828635c2be0514814c3260ea63896398e2800a9e758e2e8046cd70cb8fe76387b87356f0d69e64105e8072c2808f77623e806a65f7a7cbc5a5eebb58064daf232b382b9719961e8e6261e933ce2d9a1c77afda01dd577a3896ad185d8b605cbc8a9498edc169f18addfc4eaf29467c890cf2ef48acc5743550221ba3d7af90b6389b6d824aa21ac4084d1297016d049318a5af93d99ebec5d60977461447a269aa0f7f8ba6a2d7d734ef927ebcdc31a91ce80f10cb3a11b10e40015c9c2edf71bbd5947244aadf9e4bd6315a7b670095fd688d54bd3ba9e88eecd469538235e7517e48307b5a891b535511a409257c18f1be59bb0a87d4aaf9b127d920277f69b227e36f0efda9dc1e59c1d8c589eb1663d42728da5ce18a88aa1576dbd806bcf66d0dec46bceba2b1432d35dc30d2626261cd6b0d50a50fd213f26becccec25070781dc19ccf8d61e223d5933f3c6746511fead9c17aa2fda619ae9bf9a25b605afd0c11f6400f8890a6d2b8984bf058871701064eafe35078634f20feadb31ebc82af27ee8622d84ca863b4eccf7c0fe7a2501ac589d6fd45924164f54ee33c60486eee126eb6ed4dc3f6944ddd68c427094807655cba2894262da1459761866fff936e9756b32a7cbe12f309d1298ad447cfa015988fa5fbd3e202a46dae9a4bc16d10c553995452f76c2d9b87c026a5ad006775a7d3b49e560a1917e998dbc05c56e2d547a09a5a3d982bdc9cb84f0995d745529f4e838fb4dfc162617da42be219c3e11f6dda673972e907249d022ebe521a12caa08709fa15b800cb308de5f442924e02dcb0cef01ef3e1dc44d8900cd965fef7d775c92a2af9daa6f5706079efd35e6f4f7c6fd09e578f7e19cf1864614d5fa3efa7f042c755cda59df2fd2e8b3cfe21d0fea2c7b80b86425c7d98f871a03cf8365db981698de43bdc5247d5f663152376a048b2afae2da3a2385c98b7d08a831638fa3e2bca219b4b8d30f213c233dda6d43c228cb1612a21b367e0603fcece156b04aa91d27ab4824214aeae2a65ec8e155183a1d556c594414df33b1db0e89320d63c9b2f5aeebd1abcfc65216e5bf207ea6d5e7a23395d50bfde8f9925ccaa2ead8e73c4c23a17253b2337e6acfd7651371f04249173cade4ae6cf50977e82784cf29c5a27da65cb358386fb5567e22ccfc14b762cc40f70538d0f6973512185b7707874f23cb8fbc3492ba6f90ea8b57f458f66ab3247b40351371a8d213476648f73901d69562d9b45847ade5bb3f09bd6c2acd576f9868bc1b1f2b5e88b05f535403422e8e23105ba6addbcafe920714f385f9127bb095564cdea67253b11873953566a090fbeac98247197b2c90260cc08abd2508934f078e7d02eabb064454363d0ebabae0b30b1ec572d01a455078077699c2b80b539aa5d466d7130d2a5967a54efecc92b36e8045f7b9923645f2c8fb958e5840068387d6e353f151682ad69710980e7f23e2f87abc477e708ef99bedcd667dc2966632da882170cda5b84a27914cf731bcf332a715894fcd4794fcd84ce2fb0d9555dd139af8bbb3741b2707e205ecd42356f11788491cd6e90f27b90f614528b857cca8339361ab0b7de81c266da51fa7c77d75f5685c2b6562e29e30539051b097764e4bf56d4000ee6502da8f3d193359054b80bf477942cd7026d7a6d3c32afd05de07f8ad36957d944f9a171a976cfb88606ff5e4fe4309e95a73ebb82fea84bf577b187043a550edea65cb9888e07c749bca4a437b1a2b79f6fbb2d789f3b171a7d8aed104e4de5077719f0269ffe0154905eb0faec642e4c98f5c9b99ae974b1f48df733230ba2bf8cfa44430f749a95f46b87535d7e8a48e9571d3f5809e25680e857a7a3c60b9237b7a446e568ef0abd19f395344370242393388f6ea9db8b68a62f0349de01398cf29f5512bc5c5ba234fa42bfcbff31b184eb83ae2537fdca9475988ab8af8570e207402127fc31add3320493caf7593e34cfc752f6db431a4ff81c3260e62f79850093ef35800bd138656e08abdd5313247e41265e2a2d1480372a2a172fdb8dce1cd72d907ca12a90f38ff57879f452ffc309ec44cafa9aae173206ec70d636d9c08d900c724570f21780a35029379dd476b3376880b348391888a83fe1630919062f46ba25c760ee9117d28fb80d5dcbea37e085f8b4519d8d7fbb630948937d347f10206eacc84175e55846a5b87fd950aac2c633a1856c901547f3d6de888a92ef36001f2b8d4061457db8acdb5f1302224d146ee7466ca4d5224cf0cde35339fc294176c744db090c713be0ef0cab0560567e1921331433eab11e65c83a274d7f43afb7b1da5a610604f89d07b00d2e99ed070b7f84280801013e958963c522127cb14ad291b0825cd22a8b9c2b3a72e8c442a8046c9dbe1a35f5f350b21350f5a83505b095db4e78010ad80dba6eb1a7a1da6d4fea0b2e18f1e620b0da80c266af87c546d3aa1e8b2d91fbce8954225929a2d1a1c493b22c5dc76eecbc046484ea4f0173ff17ac98266bcc1ddbf5c1961ce0602860f244ae2e53899fd966cf791dd38d0e70f34c436064f7ceab6b573a86da668fc4c0a32c2fec3ce80d3b218c37d0a85267f2d61350ce0d07cbedc2d74c37b4a92c64d943cf0f833375e7ea4e7807641540bcc611f9c533fcc417e765c60028976121196df60c17f9292c57c5d3d109a0d38440eadf53bf1824c1f51caee4012ccdd918f5a1d97fe5286a52c68ff9a9320237354e930963e70e83bb15edbad115d6d682c317760717091744af5c0089b78a881b93321966773027b8349bd7ebbc539ce7aab8430274a8c00c60af126d63fc1498ad8bbf52c523212a51adac11e994c3008f4b759b0b78f4f72d3ec24eefa4e576760ed6451cb04e0703fc98f48883be00ff7831968223f43a1a1c63b49993886cf81131524dceff472028e55df955e6c02afdfced897bd265e3d8f43e6a3214afde717620984ce024070d6bf27f42094114607cff48928464148037b9afdba499384309db07e71acc59ddfe0e62c2a510b142b72eada78b55019ed18497a295217c8483a7c24ce8e82cb8cbe278ee158c458e6b434bcf8cbbd9643d04c19f47e5f0e9d587512ecb007124df4f9d3e286cd22f1b89f0590ede65b0f9cbfa68f03d62363c68b869d51d4397703d60670d9f66a0ac904fd96c5a79cd4b356d7522db5f7a8555d934880df04a623e452adf0e4776ae130e682522076b3fb950a8fbbcb3e3b39d8133b8d429ff3227c971db318a69ddb573d8c850d850c289b23e2833aa1b78d5d1c824b7937a5bab6eae14554d331eac7dd21b2b549639f890f9a17d8fde5f6da4dfcc666845b8aa7b56acb39896552cf4066aa6754302bd03ea1de45f8b89ff8023824fdc43f4306524a74fba8e59618612a8a804b96107f87e29116967b2db1dee56366de80f9a7ad530b5c09a65ede5ff928e788c4f57768bb26769f850160dec1d8904f189c9f6099f80b62c58ada39bb65f9c94db03bd16cbfb36869b20b95e2a7d5e28e6ebd500a1d23ea3b7644df5ebcd666047487c65a61f2bc8928da7c539c8b19a9101f3263bc56dd17f5a93e852c3e1bd05e66ab9248fe220778cdede68b0cb4ec34b469eaf5118b9740d058257698c9fd39805de70419b414d5cd29798fd49da5b981315ccd9c80bc8cd8798825fc530da8d41616c0483fe9d6f4bf9ad91b9470eb2ebc4c93be5c05d62fb3a3b777b275c97e85d5610a941a9774f6f98789ad3c85fdbc324c2ccc5899bf12834525ceea962138ae28a7c1679d9478988b3a3a24d2215bb70453ec8e2ff541e3262260c15fd4afb73de4afd3baea848718824552224c419f776c22ca4c530c1a4fafdf7821163204de147a03f69f7204577489155f477dd9bb6a941bdc43f5101753a7f630f39c49cf62d71d07a15cc55f7d649940fd1b6d34fa1cf3c20434d28022282b30e2c53c764013cf4374f31e17d70a87bb4b926572ae7e81d4d71bcae9cf6b858db8069223a78e963d5c4da0d51fa978df263865d6c27d9b73b4bd06626ebe3e0d53bc6615e417399dfabff4d33051fb5f91fee0a715fd1274296b01bdf0cc7d3557eb8413f5782d123dd9140097808992acfb70ba255161614d82bf9e88fe962676d43e6ef66231cffbabf0746a1fb3b85dd296c65ec0b5265aff03a060e311e15d4313996b4396e757971f54527153cdf3b293cceecfd910553f4eed869ed793b2bc7495240ea9149124d70209558e0a84cdc9ce988e58d249ed32e87e7d169b6b47575d50daa837e49ac086f1efb4a659d10f878e0def441db113c6f3df5bafd12bdf13b124510d360bd55c29dd0989eb246cef069d4c195caa45209e7c5eef6000406a7823769fb0275d36754a15b31097ac4fa1336bc62d4febe345ca29072e85b948d47c76836db63bd962b1be8e39cd08b8cf1f539d61e3e44792c8ca74d5eaebbf0cddab509bd8440cb74d07062ee58bbf460fcd41b0b443b8349fb22ec6ccc521d3aea1b6def576f91d4a77a9f411c14987f2ae0e9e4f3415d3db765d89f2fd2f1225781a03edcb9ffe47d33eebe88d23967dc0ceabf259821e7aaef530b89677390f9b8b7d0c3ca059777f32ed11d78a86cbcf50d45028d9772ad8f92d403621f0edc78503089e82f0d49e4b7797f384260dcf15671aface8ec9ecd8d02515dedc21b4ec7c169dd2fdc46787a65c1898bb01474211affdeb40307c4ea83485aa2e7916ab3524453a4f19bb2ddc942e4f58f59a6085b3aeb08e7c1cf5e720caf29bda55b4c1bcee1f778aae4b44f8c6f443c584e7d36fe4bd9ba1842ab3274d1bc24f347dac29927df1b7c375de48a4750ef9dc88fcd4ab0875f8bdb22a7d517e360f9e44906d3057e101948a6d7807dcf4af8c295348ee690730f38ad7422be338805d0368d5a301e9f64c346cb39bd86d2a8d61f2e6684fc991a6c8960d2206449eed3f80d64d6f346be998ab55bff2c29e06495a2bd16d232360befcbedb22c6bd9ef11066cb88dec03c56e6ee7e710ab1967b8e373859b7f946ca18640e5f9876aa43d1ba22a8a60decce8ade26aac56fc9db7d779400c9a9e009c99f21894aae594a75ecf03ead0fdb39b42e5b5ac56d8cb9a029bd5122d694766804d170acceaab2f52f7fdcea2cac526ca90d50f67fe04d12e8852b14d637faeb294deae28cfd834077a2346f79e1e2d27dcb1acaf65fb24fb6267338844819a4978d49e4ed5bfa702d8e905b3bec87e1f671aab316e89f8c47ca67a7cf6324154f808b744b12c2a2c5287be132cc43ed0f1084cbb6851e25df75094fbcceda609212cbd8adf3925fc517f6eeca112c316b58f1c6cf8b6bdabe2a718d92fb95b16b3783caa4fdd64c530c623510ff3d4f69139f0f189ecdc9699bf50a6cb490b3558107785976de100cf2ced51d56ba43ce59eb17bb53cc8a62432f362f2187129198b17a6c7f38b33bb8e67e5d36043aa735499bb063e2e0a7f6cb397212ca64957c85da2fe96fa3fdf874743c8258a717825917f49dc4502f8b64ea871c2020e8b7520aa58154b2393653771195b5ce6b9380911931ec04dfc74e62434f23fa78232af54794dd4b587f1429ea330bb94bf133f9487f72ae83344f4c50c88b352664f8f82d062e43a94de15311ca5451e1d6a7927454badcd5b1cf9aed16be16cebff314c9ce1023bd7d92860e98eebb5b571f10386e3285ce690701e1639f8ff9e22ada446765f017247edf3081fad7da8169b0b42a5c668614ffcfc76737e3a06200838bb0169b99e99abcdb48e28a7a5c882c8aecc728fad1ba9ac9788df3f7e6b43b5bf0df9a5edc38ee02d303be016166ca6ab27aee15df735a878089af062082a9f88340b89a529cdfa0f44364fe8cf0f5b521bc609dba7422552f9943ed5c631f729061684cfe1eac53249285f87716f5ace19046e6c21abd2431cc3b9379280b8dca57a5bb8b263526e4d078582d9130f348bd7c643c8cac32e356879400a0c9fb651bfb7da90406e86546e5f26484a96aefc07a81028ade4a63ffe86138e810da26ef5a17dba90c7306437426e58cb73e7fefef6c221e04f61d07163e1af81bfd20b156197ecc848f586ab23f88b98151896c0bb403f781013cf687b676c4a336784323e1e2c337e82d6cddc5b94abb0576ccf8345ccc2f46fefb78c19beabfdeddd7ba37ab6b847250dc027c1b3580f0271175607a0ce46f176a5eee744b03d9f29db3cb244c28ffe2fb3daa4f555911baa0bbf81602f882def8943baeeae4ffd4fb9ac0b87c24653c47d3e8af6b5211401e3bc9a9cbe46da7e26191856a8a6394a0b8501dd29ab3a3bf5d86fb89c622924d8cdb3a00c2b08a9f8f89d1723c671f2e5f3e7e7308da1512a7e2f243556bf561aa90d12e78e66b29548a973c883b29a4597bed73940937f76734183514d2bf8d5adf0efe379269e3505b76ca502b2f4847fe09a768e6572f05afa890bd13b1e64a6a38268d90f8623dd41a6ad3a8b9ec7e427aac714bc2a7ffd04c5c249049504015353c95797e0453e0f9022591c88f5be218fed60eae501303f41ff3c9d030b43c4d6dab4bb0ae59265bed500ebc5d7cf183f9d5d215848358fc55e3914cf91eeefdb3ef9df6c17ffe2066b644808beacc9a3fb6b2376ed70a8f06022f5c7641edef85f02ccc148eb08d64ae812f605347022c02bcc68d937a8de1e9ff4dfd2f8763ebe833a2e74a74b71bae335c37151dc276971a6352f3429902d15704ec402fe9283894733969e64ac476b03422cbd94bfb2c30a2a5821b4e3fbf50b5af22e7ed5688bae697ec6b33984a540e32f33171fb20ee7acb090cd139767b3031bd3ec76069d565da9209b7c3f310c63658c2521320886eedfae58963eb1e33978500c1239130231e2e92f19d4c66e22e681a4190c4117f09b66cdb18b511d4019be9b051d965908cbbfd509c6b8b02bb82a21301a965e39073ad691b2cc6c5c95eb04912d8482238f6bc9342fa0874de0352fc839cec4d195f4b9283ee1de253f5ab174767093da911911ea57d9e9cae09ebf0b5627934184fe0ee9d08e600dd72effe70c8e3f5840b875eebf4357fcb06d015d89f33542ce1a3dbd901fd536e2622a304217da6cb97ff48ff5bb9cbf3d1ce6f1273009df8a988cdabe5df8c98cc204a27d2ec7e187ef01b01a25f9c931f69361f2862add66c6186595b094b43f5420ff1c904dd7de0b41dcf9513fb8c4fb3401a6c46381b4e8460885056622567fd5245c14bbcd64a58a4899892489754885b1fcdf35df4fd160fe121541c11e3410e336138e9981b519f3894d06369eb5e7897424db16f743db85707cec28be314fe16a01c9290439ffc8e8849cc3de78d2b1c14bea44e4e752c2334e1554c9f3fe09a0984894e5d73fbccdefb736ec9cbe6eaf6c984959b9f8f7e9dc059fc43f90f11089c4402b4b49aab4c70e8a9e3c9bc0c5b918c0fca7de4f99ebf19a5fbee96dc63460db576d830036afc27dd18195e4aae701516b4d3638368c5619bf3d1446470c15ad1c509d64cc588b1c2ca4d868d3ce0f5c8cd6e3e2a2caac22b6c279e3f32d06ec6dea6034064a002322f822b6b01442a468df1de046f519a1dba87dd6e98e58dae152c1939e5efa8f8fe03d7676684a9248042cfaac171354a15bdb0518575732d5a0f3ef7020615b93448ed0e4ad0083c504efe083bf4c84dccb1da998dc7b221a47d2187c8e332d70568c73d2db76c45556a9a6f1de6d363ef1f30ac11c60447c93fddb5ffbaa5205b67a3be7eff299024ce0e5aaa9bdff832b3d8303c2e8963bb31a43966ce3556c9d26072475498d9df4682fc4993142a7f40239400345b17678c151b541fbfd298fea4b24eb5d709d4381d889625c8cc43af6bfba3c4cad3c4538c5fdf6d8ada692cae92bcfb3609abe02934a245c353ec2689e8059f9641ce8eb4b73b11cb4817f48e97a523f61e6dd6df0a0613d5107a9462d924751563d325f39af6937d824e37c8f29c1be04ae3d419ce2a18d7ec72bda122a2aa4d5a5d4e6e0b586576fd553b2377b7e23c8e615ca521ac290cd16a0fb6f8fc12d89bea5a23684eda280594310381b1af8b78050b3c338a18d3cb8d52c74fca23bd100776737c759f199683473bdc04a872f58582d6b0bf1bb8dc497d86a1bf78941977567a594519a92a30c6edd59cb873c9af85454346eceb42e2799aed51bf632e3c5e858aa70041f25355b4f96dfe9c526d13ba65abf5c7288c5e59dfe3cff3c5b71da88704e08a8a9439e433f0f5263781ca01098667fcdbd139f50d3aa24a30be383767ee39a2ca2875148243bff6d2dd32508b5310c36052fc1fa8e67d26000bcf22e60219ff910bf9f639fa4cd054fdfa17df6bacb2f4766babab29b4499c4e961bfd0a0dd2d22b925d3dae55c6b8cf7af1725b854e55a5ba120cfcf2b4244cec396f810ab096d761c9cd22e1ea29636a325919bc5a428f04df51be3260d6e49ae6de5521fef8a7a79cc127e3cafb475605cf6052d5067e94e2d932efd8360094c54f26f32af42949aae5c9e68f8db661ea9db4ac0d0292141651642bddf9c4a283d3c126c405ff29fddc924752fe295c14b3daea2b435a8b9a8ef2ebbc80f2e64e781c14ae75babafb71d3ec56bb95d77ccb791d3eff802cfb800d3978667b511032e58db787a31af201eb7f7365d4845b23513e10001c4cc98a908ade0679c51c8269dae4890106ae4e096f6b6d8eaf20f71ecb7bc0ab3a40d09024dec6ba53295fd9eb205e539f1f18bad6872845da16e966d72a9d94802a59507fb7713777b55b70969913b45286d809ba268ef5a20f6161179a476c624c783f4209c4c44e0d00ebdb7ea21685a3bf445f01b96f1052c66c1861c180e30730686135bf897265ecd1d4edd22e908b21ebf4aae24daba4e9884826451cc9ce867f23af56a15783ea615860b1fe82d4e909f19e0a52818caf03e709179cd2397418520a0b3da895c8470f9ddf5bca315d3bd7569319b978bf2100e642e82e36026186842c53bb6b5e7a8ac1a99e957b94bb357837f26da9a74cf3ec2bd4b2e3432414c658d232fd45d5420850de92646fd0b3c923abda27737a87a5d413213be56e546d841be953261fed047c3e073bc9176c6b9d457f9275ae3a62cb001273b44b5965d8a65c1b01f92f3cd0eea5a1d400009f51f5be8a942a8e385286c8e2aeecd39541fc38c608556cd4c22360808b610050e80b2dabd40427ab1387f40a5865649b10095e0672ff2441e191fda87a0d9914e9f6702c361370e7eaf8fda83c9ebc40bdc35d3c71f2ad582467dba3d527a638b428453cda42d843dc3ca6429f4f85a467c7b816db2394d67bee0b85b48fb99b8b6d4a5f3ffa9f58432a29b6c62e45080d9f894f7b5f6ea9de81030d4e2fbfacfd3051542c0a160a7bb2b1162caa7618ab324a0d38b47d684f2a0e2f1fd4eb15b5d3d3215e7ea4626784ac06d5e1a50f04f306b6b41c0ed4fb7b51c8790d5d4edfacee2dc6c50ee1ac8dafdbfab9b03592dd5ba03c8a2820bae300c025d483a651777d4a461478c4f6e16b3345f40ef39f8b96e5ccf910d07645ac50630e0444d5540ebc715fb5f82d20134078a2ad0ccfa80b7e6593a93e5ae4f836b0f9fed6c645cede332c1735a88fb9a9dd2c1e7be1ce619b242d1cd3bb62fca32fef22f24ef876af9cd4776ac2dd15dd72887db425cc46be1fc1c5870626610969db0fd47c8ce9f03527342d1afaab2c321b241529ff54407771881fca7ddd6ee7bee71800cfcb495ee851b764b422af7ac47e30578efe0ffd114c5f75f868d475629277f0462da13ab0de544586ae2dd6e04d94bfb89ca632c5cb1b522d05fe2d1924f5cf04647de0ce72605c56fbb1faf5f096d86f21046c77cafba7f8115c126fb21ed3194ca7c545427cf7f4e13438a5ed179b9a22d68dcf0aa430c8e905d01e6d0d9e6f9187c5922d2a95c1281356fb56c0c9cb4caa7fafc3338f88e4d8bfbf364cf3fbe0f546d1651227a7c97ff77104bde1a58e00f506056f18b4d6c55b807f9d96669c1c999f444114b00e1cabcd9538a8234aa55258c30adcc9788d18ccba96ecab85abdc250445e5ec00fef5cb26beff1eb49a783eb0854cf03516670441229aac863c8267899e06cd86ffa4b0ba158dd6bb0e758de956641e3341f0b02385c068f44254ac5fa066f912cca308a262d9f5d2e44c0974b72a9124342fe48e914b419d1c2c8a63565f3f4cdd785ea004f7d84c65d42b866d8aa6d10bfbf2832ac4c23280d07cffd18f7d23026f8a007771316400985fbff9cf161341b4b9210abfdbc2d7aef1ed239e3626bce89842dbc724dd55bd17edcc06d310433bb837509fccdf86482be3134babd6244f236b83ef84a9875c1f8d0fed10b8107bfd3831a5ef7d53b38716ce747134e9038507ba41da84897b7846e0f86a9365ce937e8824e18da4c3ba723d4929c252c3d88aa02811df296d5a381aa30477bba2bd2b27e6bcee58aef310ee115214058d0c496f767a4c62daee89b63ed1d4e9df100d344d276f0d8c1a204aa4998bb24746fd4cc543436638a28b071deca4d9aae1baff7905815cceaa303173607f0ffa0ed1b0293dfd0e491faa8bb491d188d4b1736d19d5c6bb39452702b021386db7636a565a7f63cfc4fbfa69dec5cf5a0c6777f05288081ec316d1c3e84137aa52c8114c300987422b5943e804e6118f5f962511636bb2b8630a1e941f4d8e9b51b62e8c94647e46c6fc1b6ba5777f4d9949ff9d127db533a3770f82e2c75c50f800d8c3e918c23432b1fbb22b0793acfeff036e97f51089bff77a470fd13e864f4dd990fa493e758e8cc65577f9b5d874478f70ff5c189308d91fdf8e66db15f265380606a5b2c2bbc20c037c34a40dcb30406d9478971d03f16f6aa1ce6b884ec685932cca1b29ccc30c6227e60553961304b0a2f3c60db339a2557a36cfcaa646ccb4fc50af07d0523aefb8b0a61bb040b3b7fe45c1734331c698ac7d5126463d79cf45a2ced4dd582f45a33e3344e9686ff047c5d9c8240f0dbc47c3a886306e8a5652a18055e33da7d62f079a3ea8c2f615aa2d055fb38ce62dc9ef1e4d29ddccab8319725e67624c11d504347852c256c4a7d9b48e229b9d1a3418df18c74d3812ff919e227418cd6f1386cb8aa797a937b1c5f1bcefa20d75439bdb68d049850eb4f371e362f5ec301ca6318de434f98f9d52cd48b336e769c8219555ad4b09929075e3a50d970ecb74c19b485d16f886986c456f8d7b1276f365aa773dab99086cdd950b76663f4b8f1cfaabae0af76ae62e3ec5417867b947df1311edd1944e0c6397d27d8c3d4d1de5aa1282a8d92cd54fe5201e64b700dc0cd897c1025c09792e02fee54b49dca83af767244ba4878fb0a219fbcaef25ac8e4d27d414c8d4b2057c30dfa9fae5db7b3eb5ad46e361ed957836fcaa1d18082435a51f28f34dc293c1ffd4e1cbc4ce2fc55674e850f81c6907f81db8abfb915dd178a716b9e5979ac7c037cd57bc249da3798ea5b32539387e261305bea17d8a9a35b281a88983c2065e06376bb7703b230ab533574f5f23d4254938b4afd3ebb4e70c961d6f1ef03f11b4fa014399c426ac2e20e834cb88c3b5289c4f2e652069c33f77f8006f0e145b6bf5bcb194ed8af3770e402c06f534ac45d09a614e38500609037ff5aaa889a76110c6c2e1ad3dd827e713e7c335b18fe8c4744a77b0c4f88611ad74485c7660d7bac2664c82f02643e913ef15cfefa19ea53e31998b8889cb9a64964df267b7fa46d74c0a61130472bf402fa519ce9dee103ef1ad1e1192e1128d7e0eb819de323287ce970afd118494893ff0dc91883d4267913830169a86af5cab5b81b2c250ccfb056a22bd5041b39ed3d54bd0aa9760769934a000ab97a7dde143c76d45feea3ac674aa0c0a6fd94f910ede636a1d2919060abf0f240244082093738551a6e324aee1a07148bc0d9da5d6cb5bbf9346ce3b460c4a3c2fe50d2d504eaf71cc09839f2f5bf629113f84fbec08524f0a01ce2749305fd9d6b90149d46d9c86b482d06e473234126b9cfa21061ad2749ee082ef18f67b293d73a5c262e1c85329e73e2acd7712bfbbe9208206aafdd019b7bd827aa6433d1e694cef08ac89e70586208a3ca029d0b845977a6a22ce86038006b0a4280824661fd562397fa9565721201d2804f97247dd379ee487d4e5e08eb40fcd22ab9e91088f4b671e22fe7b5df63faf5feb8a538186fd194a98e3da2f2c4fdeb892e4bae90de594d7b10498c84aaf7c2b262211418212bc4aabd204ef77fdf8ecf99006728d201c99a1e59f37a24551c581fa538c8a80691e9d084f4b0dc31dc89abf8745e2376883fbac2e4d2d26cd30c1dfbd41bc1ffe4119282c143527477b0f6d6eec5db944adb2c37ad594b5d260ef95c155d0b6365d65759a371291a6a78f4c55eb3b3179678cd5e22b70efe13c495d4b28e37eaa18c950b5f5f71f9848c7933391763a340ec0af586863032894f2ee7a352170d0b86c742262eebff6efe9af773c11b042987f08e55555362eb234b2d131777d3ba8dfa89c71f00a87c62349060805c497bb2cabf329657201e4c9ee1a07ef4e05b01230abdb9187aecde5971a0182ba1ced2171ab2194783e51d03d855ac7eef9136b9ca5653df92baf2eacaa6ae4b52fe04c9e1bf37c9bf9e8d2c33ac18e99631abf11b864a9042092ea07709de1ce07d51634a1a70f71759c4e70120978c3e6c73c6d93089d06de187d4936a3e9a7c06fe2fca3b0db669f7f073af86c026dce408c3364a10b65fca4bc0032649418c3574262384ab94094a15596b31f9eaa905a8341c7b1108e804143820579514b4b9a17d148419d1da7cc047f12c65a08dceada2c05ce91bf24231f735da2dcf9e641adda2e4ee6cf1ba5f00bbf17da2d8f832748e5255dfeba8e1985fbad14d8f1d11ae24457b73a574cdfe31401c0b451eb4d87d5fc3166e6bc06dacb8692da23bd49ab1d5528e140124c5bb41a43142b9b49f66fb3539ae34368a5b63e6870aa0fdd321ad5814fcfc8b753453bca4a042565cbc5419762c4db3a1e387a2527c6ad9eca9c9812e814a4ae14d0b429fe1bf8f4f6ff51f3d4a1b69f6727de8f3f54d4cb7ce3537c776854fd0d6104611e47660467f7b5d5636ad1097f2890d3fca1b0b7018bb45ce8ac3e390d5dbd2365c5ec37c2e55024e6d37636693acc17febcdfdd55ecf1fa342e13082e787ae7dfd6881b53442491a6aa8d869db6367c94c09b9acd07e8a9f008f9e9d09fd0bebf88557ad98c891f6195dd4565a66ce7615b19464536762325323d9a5014d18e5b17b3bca07e5c4f8c3739c5adf04686ffcebc4522154087371861fb3fd88df9ba673d541ce24cc185d95cc63e713986da95c57e56f8a770a7f140b4cee3db05db07439d648b4e75b4cb3577a16d5aeb29ef6708bcd13fe014aa7c4eb1d9ee7aa890b19ea26954820eccf06a9a3363c600d32c85e1f738b398bef4a6825e0809cd84a889298409085bdbb8f36ac8903053fc3a3381866984bddb54d7caaf30dad6341ede1d6391e50ece7580ceb816344cff6f6383732be4be7cf3fc7587a0187537d13457375744bc91478a62c5ce2a6059109a681c9df32f9e77abd0c8d7c197b6ef44140f3c70899a9d7f82df2f79a1bb62f733122d441c5ebd773c2fef2cf7e5cf2969c22437e3e53398b8b320b711d7e6e2b9fbf7ebaa27719e5a5cf6fc3f4ee9f50d403b6a821bcc270b27d16481648d0af4bcd8d6a1996aea9110d4a358e3b8dd47b96e58feb54da4103e8b492831d0fde2d64f42cf5925aaaaf6a6ad10a8f32d47007d369bfe3db40dc6307239d4a39916834f564a7e08d02054f5cc89ad971a2c8cc24f16deff19d148a804756e50234b2c665a507eafb76414b357a4e6453dab324501e2383801716442dd47d0f9bf8b25229d66240a7d2b68ceab429737479f79de0dfc298f87feae2e84800b0f256ace6c0ad18331984ae6e059fe84425be860296e9ed61828811e21ad15323fea900b0a566fdc9621491c3cd44e2ea96fb9a7fc2ba507ade91a0cea648be7155efc639acc15f78c305287c3a11cec4bd5ba474372f901f99fee95409ee3b83c68d0e84aa066f3dbd4afd0f6f4cecbed7c5dbad7a7c9e347d77288af5c90a717005ccec5e246d4e5fe8e4c6f25124acfda06371da82b6675dbae006bdfaa8bb23ad27d72924cb733c009770fcf3827d2d0e4280b022e8d4e2e8a108bf10abcf3816a88164315c8e7e09d629a76b77c619b260b2947125641e93b06b03f484d0495ffdec2ab33405dc434c10c1c5ee82ce3057efa99e37567136838dd3480d691de6e893c270337677c823fbcb0cb50cecdcde5a75806e56b6d1462ce950ec8f253be6e238fb5436345a7682099aa2ab9af294614fb66dfaa3b8b5d7deb761336a01d8db438672495c8ed36dba14f9e8ac3a3cbd47f4f286bfc4563545f8cee867b8be8ada0ba66ec84d1deae591cf082d35915a4fbdb7fc2dc63bd55a4e5cc7414124882b881aae537529d42311c828a2717ca9fcb9d2fb788c6da09306c0eab64105f4867a8f4f8d66b3ed6909e441e0b953dec876b064770f55fe5affbb82ebbfce04cdcdb6780f15f1fe126021cec551790798c6f794041a6d8b9d4c6ef0533d78abee2b2a4e1a18b64e97d87ca0d149a27e05e5f948faa17242682e8d1b6ac8d534e07214894e000f1a8d4e46549143c7a3fc184bf8b03ba532a0339cafb64f4764983524970bb6beac97b30a10d1703f208a05f960d6689ec36941458ec5b559d1aa57d98dcfbb87176ad823e3c725ffdb310309aeea5fab929d4a16bf8a24d5e15fd332635f660ec103519550133b7478a23c870a618cf6327cbc06a4d84d47050aaf297a9896a2482aa254fee06db69acd8fbeef73999ada2f5f2a8495cafb84b2838893060bf525745eabdadcc14bfa08c57417c471cf423e10be00486ce77ad01a7302abfd5a8a9563be46e5fda49db8f21aaaceadeed98eafc8aa96045c2eca7146aa6218a509e4ce5c81c678dd2eba25450d130b7a4d17fe5f92736bb233046be8aa659e7c80f8c9194f36b6ee26f0672d25c123ecab387841a9211daf71a25aa108d258862efcc2ea11045c66bdc02f43a2e5a2649a28c88c26f5a3b9a378f2a012c656f53a602c02514431babdc252da71a4a57a2bd92647a9407a86c5c12f3c5969bc47f41a3a6e10b6e39b872617cc83176dc2d23d99d0bbe71b4cff3452bf3afb3ede7bf977f948da9a2061b259eda943f57090240b6729d7cb0f9dc42408e472e6970ada9b7d5b9fbfd702f4bb9e2d638f5a2299ae77fd2d15d28a3c9144c2f0dc08ad8740fb0f24aab5fa3250c89244aed3c949eafee45008e4482825dbe1a037c81c339049fcb76d84b08a95754a4967f1194804ab4c47366f50e315fa77e1c573fab3c1f1a426c937ab6231e2feee8736ba3946f8d42cf452313546b76ce6f03fe9da72af52eb88de847ce5b85f5d078a94278031f972069cd0af5c95847face19454181ea59806ddc63ddd142d3fc887442447bc4764f0b2dd584ffecc9acde6ac28855047e325d0d5afbb460ac5965dda998ca93de2217400869be99d3d0f04dad121b92c534408750dc04f12ad43dea0a34a029afa97c1a0e0093e47ebe8d14487d3dc6faa94752ccc658b35bcfa9b1e4ea7c68f1dbcfa2660a8c71c8867f1a7d2ffdabf85cbeef20b7f5e1880f9c5eee222252f01fbde74eb65aebb530d2d5f7661503fa5b799aabe10bcaab97e1c23a85203fe774d4b4bbe159a3ba545813d4d970bc3f9edc1eef314f5f82a9e3df67c52aeff678fd3238c760cc0a5703b54759043496a8393f9066c8bcf2a40f6993ba9ec6ff23717ae4f324631e7c1ccc8ab97a37d6b50a8fa9c37d6335b642c9af16542d097c8a9ca608aaf4740e0fbf214e8a658f1632e71f8c1dc7cef6517a6b1854613e4f12b88021e4fa918c1e3ab31334ee9277c0181c7b29ff003f211b23fd36e61a36b63d3cc3a274a830e143ca0d19adc1560a6b740a08e6d02c95d726406eba4f2306e3f3cad13381c82362aa04101a454d723e94aee2753d6f39ad34324a7fce3281ad62d17c3fd972d6c08e703494261c2987cd38906ac03f56381bf25f4dce1b0e98627c38c797e6cf5a1036b93babbff7e8f42b2188d3f31a52ec969cabddcf8fd6c871f4098776f4dd9e55ae56d6572813a183bb3671cdc08591ccc653359455cf083f3a0326ed2b7b6a2887335a3bef373999ffe27e8d47e6b65158139db28c8c388626291b68898e7d044e835398771c2681da01b5342f19071803418c1f50f09f8986addd3527d771103e86042f0d648f5b92eafd51b4334f93a5e71746c33fc5c2a7ac4d470ba317a11fa4978718a979eaa1aca6dabaa4d2c6f635e63a6c1878b5287e36df895ffb025ea51b01833558501173ce4c3b6e404d457110964bedab2dc7a6092b7989487fd0ef207508db2f86ae4c48c34b432a210eada7dc64befce3c63fcd0dbd8130f7e30b48c37a3f3551d2131baf24c74b2b0aba0c5d3d8939f8f7d41a0a146b422aa796c9b2dbab163ac26718de840a55dacece794528794b00f2a2e343cc13180a2430a47ad134af69e78eb99bd81f2cfd2b6960388b4874beaf23206cae19d28d71e587f18cae49c8d821fff29e6f4e5958913a540c14a865faa7e0df5c978b1ec19423e231b68751890f6c361e0b96964af9be52c67e3b451e3bbfc9cc5d993616010cea55f915151434579613f40bc12f6f4781db31d17efaac688420ed191acf9838e3ab0d9ff411c7a0384aba9c090fddd54fa5ff96ca49ba8995bf985f0d97e9a7c4e1686192687d520baf6be164d640ce457b66d56255c171e890d7a4951785aa56e18d83d7a63af1808f5e242f16da7cdb5e5c726059c7e6c95f25bd713e2e415c907e77d6013fbf77a87e3be7ff7c735cd77b337dc3a55e272f5be3aa4da81e960c7518b30e7dd961b1577fd4112702e77390b2cd06d298eb26e3c5d48e153c1b573a1ae226b666d887871cbdf54395a6f4bff7e428817f3b0a77ff81501823eb08ef282739d111c28cca66bff327fbd413bce533b1f9b9842fe42138653167e0a2005c557a965a389aba53172bb29e4cee5587a4ced96098a346ee28a43d8174f1d5272a486f64081c4918af7a36f242fd1a68df7ee3dd413b58b64d24e969fa6107e737e1803d72485610de557084b583edf035ea0a804a92e94b1deb8bab868e95d197a605d9ec5e6f4c40f0a2228789d89d8159b29c3436cdae43547e9da050ec655556881c25a9389650cfb1efd32aea04790aa027f5db387e6fa28b5eea507bf1f1c78084c2fe9f9ca04abfc8986c5bf6e631720fc8100e91e24ad085165855cb2d26c66b1b1056c34cee544b21ab65981c92dba514b4cf54c393e1a1b291a3ec9c912bc82fd95eaf160f71cb2de406787818ee7c8c811d2196b9d376d81d19327c5582f8297a67d88306f0fade754267542c98cb12092cfb724b2577ae65795ea3f4eb7284bc1fffd91731bf62003e4b3f066f5c1488b22a01ae8e5e7751c53242fddad808fdabcfc2ec1d4319837dfd73143a2ccf45c8e3705565d6c9e42b6000adcfa49651f23b685dac9a71e99e6819d8bdac2c8ccd440239e24ede3c0e3d8e11e1a19b1710d983dc2d2fa1de36ae122a1982df796dfe94bcf88e3f5b3a8759b6bd44943116a3156f2813f704aa00ed3700e34aa6f1dec3794aaf131f2a2a4b4fa82af0ae5feae107b6d7dd02254d6c75d97db15d934186e6d72ad59f878fc8a52e0b3bb8390b7f3b51997e2d95509280f015eedfd6e86c40fbc843eeb30a6ab38360e6a077e612319e2eb27cd3567e32d87ff88c5f4c1ec40434b2781cdfbd47418e043baa6e3fbefa700ef354a0f32c49624075ce1a5f0e31eb6160351095bea37de3915252c7bfb1d124229ec369a95a6ed3352600d2a835b12a456fb4934cb9ce7fb7bf327ca12524baa412a21b67c045bb34228e627266d87dff9571e68b6b4bbacea27ffdf281c31b73b5560d473f6f1392f91750c941fd054cda5035990b47ee8fe489f70d21085e3b9fdb989a2b972d96210c472a161cc2f9f3f70fb7fc05d53ad38cc44602876bc97b2858bf77323544aec5928630829bb8d04675678f9622bd4e61fd46982cef0d49960773d734eec24833d94e917dac4b9e4963ceec0c705d7e80cc4a2c20991b95cd7f3ee98f22b6feac2c61906ebd110f28a3d8b8e0f50c2266a01df34885d2c950f30dec47b37d18a8d2d299db3c71399ef80765b124f3860d6ac361ce68adfde0992ec4f16c0fc9e31c5082bbe53980bf549ca52e3eab70eb9b66e7bdc4dca21f2d989be4b4ed7067aca12f8bacef3b6b533bfcb9cd4682da3875871b46dfee94b82ab0f4c41fc7926ba3e5c6362398e2b5d2caa5e5e7e276e4bd3f45ae7dde064697b0ec2a2655aa1cc42464c67d5dbe27b913b0e0d51a9d3cd7533858a835570866dd0b86fbb51cf4ebc7deab894bf3f14dc4ead14f8fdb25f2c1d438d90a86b8afe7585f593154c13ad1a9c833712026e991d1e2a437d53029123c63f9a7104fd6191220b20369aba2553e0086f399633a25de80c0dfe5bd52ce7441dc10b1178e6e1f3a214f3f68a8124a4127819ab4279fe99023230ef26ac49ac196f7e868f75e05867846cb4cb8077f4518b390a531565be0317971505c42caddb17a2f47d882d107866d203b5f4354b8a76178628a922cf372fd879cbeaa5cf6ccca0272edf2f9d2a62a8fddaa53e9742ed1bcf7c5039e62b0b9f4e54e4258e9e2f04933b894281f702e69b088711aeba75aaae3887af6419be7947aec27351a5d831f51ba284f0053623c17b8b720cbeb0cd7a0b7888d28865b07a9cb2ae983a103bf4076fa9a960c14c05a85186c21d8ed596f1955989d9c6eea6927ff75acdca231767a91b5115ccc4587ae5b478ae6de24a897fb0b92a237d0199348667bcbcbf3f4fc990e5a2551a46db2592215f7a8a1f1c44aa9b38f39bdbbb787c15c6aebe2101f1371727943034e22b4587e08a32a52d38c67952e763dcaa37666b40e6de2ac4240925a29112e530d5c3701d7c6fecf744c576aa660e717521248c5fdca099c1a027465b681c8ca361125bae2ffde764b2aa705627228624c5132f2b1dbc5605b6df0d73a802ae87a4b38b433879a1a65ba9717864d27ba1b29f9a987fd8f5484e03efbeea6c90619b8d6f14bc985b263d723f01876b1c38e9c3ae2c9eab41c0fed549f64c6bfe5ddd34de3c8705e77d4ba2a8acd5a02970105f9ca0d0a0c4f5faf5f41253280a9e63550444358983593a7dc2690238cbd63b3f8b3f28ea5d86b3f3d8a9520520621c4269a426120efc9278041a73f8c7c160d09889e2ee5c068598e49a27ae353661de72efc755f55848b36853dbfddab05d65312854ac4a7288053245f931d4e525ca4ad0fd2001301b470553976a2aed33702d31e180ed176879b8cf0a4f8e8a67f5ef52f89fb92d0a74216e67f65d2043977a9b30bfe5036ded039e898b95ca3ff391ad5ce10f0da3af2e0e1af076f14d9fdaa489ef2eba2f5ae1c449b6af0542c9e28fef8026c60a9eb6e8ea2ab688b2f175c00b185a006cb7a1046890054d20af4d6603f13b2ba4cf2ba6f3aad806e8f23dc62cf6bb3bc47d36a899162e6baa5176eff2c75c7f44a8f5030d66fb0218301ec2970027e8fc74b8facb00a591443073d6fa229fdb4733a21771deae9a0c1e0b609e1d682a2e33c4c62e1f739794513d3a0fcf43c6f036cdbff59db4b9f6f7b470bbcdc869fa453182a23caab0c24783af43463af7b9ac77e79b9efd817b1c10e4e7baa84f21830e657782358a13827cb6b2cc0581d5a1759968a42855895e2f331426c0664c9c0c01587af172ff10696a30f14883bc305f302be62e65e9cfd2f6d65d8635800dc02fbbfe5322b74de86b868c20b2b0be5463c582cdc51cc655abd357430ff4bd0ea5e7b87c767d2dc7e69dea8fe911de14e12843086a3a3b01d313c71f9c6a6556ec07413f798d0194acd34671c90d2c161b9123ff33fed7afb48b5b8b680e4a2b393b7bfd4d3d73cfc21992025aa81b55ca071c6cf4682b771b5c085661caf2192eb2b2f4a108b9175ddd7124daacef62621243fbdde3d7e0b95f59f1a9815f38af9dcdd00817d4fd631a6e3f7d3e0aeae7a6e6bb460c1cdb051622806363d595badb208ee3abf58201c2f7b299eb399dc9481294a0dd56f835588b9fd85cd7e2e20538370a3b4dd6e3b5fddb9debe4ab4e2f6ccd5e02e717c74660b201f1076da46e6feaad6c77843329370f8bb2691b0b66c209aa86ff7a800d461d3435ed87863cdb15ca639bd102e7d6f3f320bcd6af1a3e5cb4f0c6e60f495cbeeb0d23968a956751bbd770e710c516ec80c040dcbcc25f54ba96814dab3eacd4b535f64d7175517b9a5865dd2941c08617671aff0672224cc04cf83c0f246e514d136fcee4b615c696975057c6eccc52491383316886909b5b711187e454126bbf2c49c47013b2094d58cfb988185025a059e6806fc3f7660b9c0341308b6843e6215b4b43c6f55a9256ad17bae50e3850e030b8d9c47bf4fc37b9ff2376d59c77f4dbb0a4ad69dfa1764aed9716f7139ef6a4f024610059d5193682d72ed723296640f8f5b59921b7bdfa86f7c78ac9b8a24cadabec092557d2a1efd9d2faa67edb92d5fead2d493378b38d77eea67f342b5162c44517035f02ed88059868fc4de9633f972c7aa7585dc82b18b55679cd4bc7c70b0d0bf11f1b1b954561b27a26256b0bc4825ff4b1c620c4a71407309cc99e785d92f02b9174291adf2447b12f2962672621999e34947692f578acdc0797b335a475b1fb87d1807bbe91b1972c3d97882e8ae3e0c048e5d32f36d88fc8638909c03d7cc1d15de549e54c1fe528474fa4b3da2d00e8db961ed41d05729e9e73846578d4468cdada8f07e052360e7677e5c5496437c179a3ae4081fe1f8f2d31de60667e24858bcc57d80eecd05404f07b4e05053b6d36cb6894f613f4df0c8c2d46781735e3592524570e0ecd7e491c6fe8819e4f1f3b2e4e894b5cb64fffcdd7761d8570accc51d76004a5acebdf258494a04a28bc34d9e89019d9eafe26ca2b577f1a520c0a72d9e5f00150fd934cb9ff2ddf68311dbbeab6565bc41c2dfa3a905cf19c745228b823cb8a8452a7200bfe3bae8f93844387db752bad80dc66f11aad12553626c874c213089ab1ce47636798c416e8d57d80e151b1c4603f30f867d5aa8bc4111926a55a65f357903990753b35cb507bafb2aa630da29e25e70819371bd26c010961877e467465c576f910d932b67c66ab0219af53dd27f29f5cb688a3c47a6361cd0b1bda8bc16e76cbaab4bc3a0f68aebdeeb7af1f1489e7b57e98e0f71e704362399a138da3dffeee33473be3bcab08a5e7d75a16a204edb74b318313798e88f141eb0d77e42eb659edf3a4b8c592440a14dc0b18e7b184ac21e9de61d822162b7b8dfb872ae09a4743e3d7344bf0f10f9dae20cdf82104faed2cb9e7d280b515701304f1b1041e591e5815164ae715ee87c68b65e4c2f0de9acacd9a578c1cea041a51a4100bd512ffeb3c63d18e6210f5ea1313e6168efd1820c9791741de27180245ae9700e8be314938fb821708033e42f365b1fff4a72c553e59c455d4d4fc50445f2f7b64505f014c121e31c4ea307090b967cd1d1db031087a6d38a3dd9f80eed74765c9b87a47f16ccbed698268d207ec9c7ea645a877ee1997b977042d62ff8c3282abcba84a9681923dedbaacda5b859feb63985dbb782eb11b0db4b991a1385e35144c5e66a2af60d38ae3f656ccc994c5440dd6d0f0243ad9ac76cd69bbc42a0385d566791879ea28cd098c8f57c6677e2d95b7c28eb81aa9125ec0da71cd61234c1045dec484bee6e8e3c996b36e6de3833948b92740ef8b9d80ada2dcb5f7de2eba53c6dc0984187a39745ac577f3c5ff0c52b17d297e30df3c84515cda8fc1f2f05bb7abad118c90b59ecf7a4e1ed2c38603e0e246b82c5e8fd43652931dec6cea70197983bed61b4e34ad3bd56ffe7453beda0f3fde3b30e5c583405e993488f2cbf888f43b1dd64e699bbf6613ff4367c62be01b34350f92c24af26464cca0f3b1822290cdde805cd6bbbdcb4c93a3905f28915c98bdfe9a0740e4be8cfebb7e690e33cca380ebc8a6b855c7275dd8e44686b6f0240b6bcdbbf6e6f5b4af4b78a1a085e82a98472422457e35454b1f0a0ec89db0c5db5f03f9a02f1ef49ac071147cf0f5a07b81f474689598bb71e4991f857638351d8f3e18dd04a19934444df27c62ea637f8d8ae65f0b5eee1621a7229febafcb54bd300c92bfff303440c3bc00169e4d3ba60516fa116e53b1e0569d52af052a2b4e2cff23b65979af15ab640c7cd6b40870265ddcc0ccf8adbdf087e8ba44697fd3ef8ed051835d582d395c210b918bf13a4ee3058325fc213433601c26d43b18bfc193a442ec825ccb2a0c5d81634d0625776f959c9e6921d7ba89978f54cb82ac11c334ee7419c5eb080eb8c6f8880e83eb8e4dbc70f214a3b25ddd4dbdd4c6fcf0dec37d959454cf52ed51d47b731a0bae34bc6dc6f11bfbb009a3300836a55667a8b5fa1cce6e42f6170cfe8a0520180a276f7b7a312de3a0995e12cee67c7f55c498d8c4db2a92a69e8318bf287eb94448e76214740cf7e412caec2b2232ddceaf1689c98de6c2945e6decc507dd629820b021fea54865576c60adee52c8db7379c246d5fd880d04e96da41bc4ef8522a47d38154f8a2ab260158c6b7bbca41a2ff22438caae411ecd0cbf19cadceded081bc2eb870086792895697675d816e8b1c336ff3af71ed86a68780bfd3f77770b920aaadae42cafeef5a59a93f01a3773cfdbe8715e0ffece79097b09ced97b918312c7264a8b7ec6b9d549b0a2f1cb31255dd4119a880c032304ac4fbebe720669c767fc81d1e60a0d3b185e8968c2ce67a45548115c12967e7c82b6addc7b71ef82582c2bfec3b0ea59bfd7ecc03300aad8a82c3124b7c5f249e598ed8906d3d330f38ba661e810de81040bd96080821b9723fda9f59b84c8f6ad3354d5dd3ddacc8ed11a78b010b403b1c2c4b48875a6e8cf8b0a7ac85ee24118540388aab64a49f4e28208a8705c441707bcc1fc94a5f723e82b008e5bd7934e8223214ccde7d3a5a7b90332c67ebb738cff40c26e823af8a6ac9f6b854d0a86309a26e22751d375743e2b337636fb2ef2fcaf6ef916eccdb29de43e125cbbc81203eed9f3f08ba67a95f5ab55282715541b87ff3a61da3fc3bed0f68bbeab19526d4e7806251de51fff458dfa96c4814d23b020d5b35a85a48cc6645659235cb2cd169246780ab568c4d09f5d348e6efa35eb5c8ea570c245e43030b1528926f8e88898dac2847399cb1240aae9718f78ec370f3229d2cf19fb7378fbccf6d9c3c0cd1f59c672dfdeb5b9b58986bee6f130d655af84321f0d577e1e33a53378af29d2a7ed23e44742c02893e737a26b620be7db5368a719ce3e3791d9aaee8e85ff05d348a0899e8c64ef2220879373f65ac4494b561917861d51571bae48db828627497e02a6cb800a811ab4ee45a0b328387918dcd7fd1e3464ae13f33d2694677cb963204bf55d15072414fd4934eecc9403acce56b889988bb6e662acdd892f465b0c2edd9fe3615c5f35239b5f9b0857c93ce56bc3f0ce2fd4316b53019ee9009954228d0cb9bb3b5e5f34dc7c82fa3f4112267e1a8637be34f9bc749b3aa61dd855b11b1a41d67248e6db2ade495e78a03ad56158eb2f944ac33f0f79ac86bdd5fc144eb77fba9a3415529b638653a906643f018cc51c02aed0dc01ef09d34c5e7b85548ee1caad9eaae50c18b951a944c634bfa4306f369baa56c22c8c729ca4bfd4e9f17d641a3602f92200e410b9310c1c59fe64adcf9330bb455be63179e3389be2eacf405e900a9f0e16ea5ac70cdad7f690818a740beb242660651d0e1862ddf0a541aaae7336a3ea4136f45278f0563059418022447df843190ebeb63e67f384815ae8afbd59886b18414697b7c64917a8a6187fd9fd39c815b56e34bf40858eee77cc134312c4d73c7e9dc52b75c4381dc21233227b449fa5f448000c94202d06f8ed55cc6fb25a5dca860be210aae15bd1e95e1312b45ad4d29b271b8e7fa68799aa3a4237eeded6155dec04398d85681c4aafc4d1b045be0c19201f3d0a1f065d2872fcaf87136d87f8603aa1ef2db97252a2d174cf91322e989f2e18043297a9184b83ecc7146b0b2a183c6eb05ed29f2b4790b7b7911c81371c11bab38d064ca7ffb6d0c53f149670e8043a6397c3b6d9ee7e8d4622295e31b42d328cc2d9ea059fec728fe6bd6ed219544e6bb478d27acad51e9ca847d624082aaa12f9808bd4eb6ee005551751e363f604f9f03ba479a136ed172b3ec96afe210c54b0d9601d99fd722ca054fd7f798fda0b24d8fbd323d695583759e37f8e907f61912c130cad12aea8e9a3eeee132d82bdf529b980c75b52c78145545ad9b9947d76acf33aeedd4cc5fe3b4738c2012e1396391268d74438778c38cf61b3529ead303ffcc9898f771fbf5e6572db8803defd30db25c23dbac6a4926f5678028bcab3e9d10bb7ec3e86e1f72c5757895539f5d2a9151c66e3cf4192b0f9a3ff82264d1a9f1d949f99ddd76a3f703dbe78611e5af62bdcbceb1cc3fee6b7dc48e5024ce4095f191a67a8d8649386ec2afa81804708c951413d66e4f70844c5235abb24fd2b0ec2d79beea5d411238e205003292a410fcbdf1df2409e96e20347a994dd3f0c40475209ecfab6aeefc93c41bdb8b1a7ffb48b27ebd258b75963e3733343ae7faf15dc895f88dbd1d15e508152bea17072e0b5a8345d9e1d4ba01de7bda15b3af39a29b459f66e18472d68d30a2db0e7cac1e73918abd2f5f0b1df2d97ad1f67b1d9f67345574164009b53554512cbacd4d58dfdaa18dab5d17d8d6b7932ed6ae3a5fc0e60e30d8e784623159ac94860f0def7db39d337e8f9e93323a76761e47910f4a42f4437b5927c99a125af798b05190305a1a1a6ba1439d79165e545157ddd0bfd744ae18b5979eee10da1f6de22eb2cc18787ed9a2e19574f37a02dbad609ff14ede6dd39b725b4c980b413310028211475c681ca8817a0aec2d8516bc0a0d1ec604624f6159fe343c7892cac9a1d87358ee4396c2699a0c2de840421a0f7e75f308f6a7fccc94d6b229309731da807ac9494641bff46bb228a3626f599a5a39af1b254f95ff62d959d348377dc178ca9bc0996b8effbc5ae275b6d1a45755ed3deae87558cce2b8a040b6ac8e3271dce3c3308fe40a354f21c86beb262b5b6795ecfa5e3a01b72d5f26a69837312f536ecde41b4736a79fdc9d5e60abe92c31803e0e9c41ec21c866628f794f6eadaa515ca7b23e25b7cc6692cd537aa7f6a5d1457ef5bf4cae45332468e2de0af8a361111fcaa98824dc6d2f92ef710421dd7b46bfef3d920ef20c98637d8b41478d4d8cb313a01a9fe0c4d89659c00a7a0baec55a999b68598c45561737d4a033101c8068f5837104b5d643f5566bcc6fd6f4b4623f429b0eaebc3268fac70d0e85b7d30f8c52b0763b9119890fd71a57c0cacb28c44962ce118152fa056e830c7948c4954bc75fc88a5875da0175695b35a167dd53508b294a64a809e408eb85495e303dfe6731d1f56a5c242e6da02fd47716052ce4ff080e1eef56977874c16a6c8470238690c3d63fff87436d605c20c723e921e392e503d4509b12482c860fa55687923f725f4c64e27489db8d92e56bb16bbc7b8b272973e902d71886ff1ba936285f242e79d4a1712238aa9bdbcaa558c403473d4d78800dd65a83ff78d6ae8eafcae85665fae7342731b026abe1e6f942cde2926f0b5263496be331763f2d22c89956173b1bcd57399c9508f8a4bf375c58af82c79c4e68e731a108165ede22d1f8b1cd9ccb054e76d890cd828baa298f9a24e84127f750b54d8e8d896d4ec7d76e0fbf5ab266543b7c025b75d0deb85f3e5a3bcd1514cbc57151f97d841318310af26989ae0e29595e20d40e736fac02997728525faab417ad71fb2c8730ca9f0bca6499d35e244a23d27f04b8f6624f9a4fa59942df1d982a8ff5b5da8d9e849f9e99fe8deea995208489a7c2612c1497c8191f69ed0fde8462e7e0b46cf4eaf3c5dd4d1f863a4a91a65a9b3437c9cd18e6e634f09f2cd9dc2c3963cc40338acf5e669dc1d4bb6a26c6bb617a9edca04102d368f652cfdd06c6cb515963c8950db79bec70beec45ef32b60096911186f9236195a0b939ebf160f4545330ae921440a882802568ed03ad8fcaccbeaa3d34f328a667418bae19b4fde56f0cad03cbe11902938363fa3c500cef48c2f227ad68bfa8298c01f99b8977f9d127d50a36149345605a7855cb47d3420915578c4d2e57061e40c930c44d792abae5c3547677c3c3a64978a2dd23d0b0a643a4c61e29b875a281c15ec127ed29a21f6320ba855ef603fbaa9a6094778ec407bb5cc650a3d5be377b8b4fe07ee399e5712e24165fc986ad2fa392ff579c1d1ebf162c2c41d3d7fa4033af6bcde549438dbd9e7ab38bfc13e21d94ffcbf6833c4fb9854d0d82a0d2091f3b7bdb9ff96d5e002e238335a6ae06d358017d2548f9933c6fe778ecacb326d175fc17c85b8bb61bca7842f4820eb7a453a57a65dcf1eb4e19f8ae2e49e1a55432a6ef7f9c9e0f88f41dab82036c11081af8405a51e25789bf7bde695b665748d3db6c17cf72e2af44e63c4cbffdac848a71ccf904ada4dddb1b6f08d714654ee4281e7705b701f472db24a659be1929455431a9c2a37728a381ffbe57f909d0702319e5fb6b61f893479376f00ad15541ece78215a6d2875b2da4f4b652736477c8aec833eba06a44ae796c9fef55415a58d65dffed5db427e7c169c018a790b426dd05204d46f453f396133be315da37258cbd0dff49caf0baa084dcb11e519d9fc21d6a3da8d806f380bd5f888ac0bfcafa1f9cf303b7c28136d9beedf8e096ee6ce2a25b722863870ba08edf89c13c77273a66d04d9c454e24899677ccc6a7592e1d46cb39f0c4889c60119c94c3fc86f4f542b674c3fc611d76e97bc0efe1acad7e3466f09d88280adf04e87c1b2f40ed0391dd6a0caf3085114f86a8fa433e61299f2e77330cb4bffaba78b8508bd0d0a765ce2d8bdedc2bcaebf3614892471d9c6b6b47949c35d4c05b0ff7a5372dd19f8489097fb6a27b1c2c44dfdbec645f8bb4eb4ab6dc0d9d66201a667e71053f7d9572e163c992004fd6ad78c1b140ec1a579b881992fdece03aa2d4bae8eeeb945099882858004d613886203afbe2baec7374c7e771dc11204e8d1fe57c948845750d436319c286325a677ef7b4134e98e7d0cf488774868ee4ceb9dce99a5851e8d9d8b95bd32583e65564a8b671a76daa9a1b610c86313902a25613cc07a88d51d34503802ad588d7ae56ed5dc938e9a70ff9d865d79c5fe43153c0e735f715bc26c3e127c790629058410b35a5da3150620368a08bb2503688ab31e2fe173f1628b8a9a5889c2db5cd05129b6753c0292c38d0a61dba0993d5fde0aceaf0843105c3b60772a31cab97e0f9e28f09d76045f6f94c0e414b96c2d70c9f1f2cd83c940a5e8a4eb54f2465d40051df4be6f9ffe093dfb2774b191975d2eb798a1d1bf8f2bbed43fc38b3a1d43ba50879ce49042f88fa32072ec9196484c767acc80fb4de9b71eb10f3a88d755d5a4b0abc9b6df07fef9dfbda4d0ba765b5fc6c30bc8dd65054d784c44f6fabd4cabea78c7404ee2c8c00175277d4b9c54bb4222497e7267fa166a58afbcc4a0026c3c4957532b33ec39abfe881c7fa28f102653a8f7e9de1a0b4a49bc49a3bf08d59a8452881e52493a0ea3767aa5d705706d00599da8a683ea796633edca80b32cbf8c9355881e043992eb0dff1c77d9724aabd19094d2ab8438d88378589d304ca3b6c26f6fb53c6c6e257fca3b347ac857008e1c4da96efb14da73aeb9ff57ab2ae3cd9b91eb527012f44cdaa2b5cd7af3b39df4d0e7c9ae29671916a55bec890e83a0de58ddabb8ca65facf7d1de76ae263822508790bfe8eded4c2c6e9d82fd20f97dedf36d994f453f444ea52c9ec893713b8e4d161ef8cb276db6f35532bec38a2b833076b8bc10b20cf69dc9f5b219b821f4edc85160875c2062fd723ba2f1fe4fccc3528d4cd3777c654c17054492cd508eaf5056438c13946152e3f68cddda595c677b442c0ae4402485f68ab5df923047336777e8a78fa3eb53fc060a6d2f8c94e44379885be9a1c990740350c4fedc4eca0066b1bd79781a5644cbdec3ddd74bc9afdaa6a8b33b0944992e70a8bc3bc75d20040d39603f3fe378dd2b1fd4344db3982d5e0f1832d498f1e39b285fbc7aea4007221730d075968f9e9e80a3201241acda538ca0b91fbfa49a09771d3e1075f6f61d74323a5773bc45b21f6e364c8e3b54479144f604a5f2f1921e34f87427a49ee36fa3148c4829049b2ec95c5b7001c3f637e9e4f820d3f4808b08d640acfad5247e0ed2662f8e4809c41b70da650c467387c5a16052dd9a9dce671cd14b8dedc862c51522c88ff0ef3b3556103721e39115a6ae185a5ebaaf885b0dc31fe46597bed429eea02eae1a95da4041b264e7568c5e27382cc3f39eac7019235ce78b2fab0faeb8ea92634296ecbc923b2b420254a53755b13e6a9815860a911c1e5d6b91cfa9fa256edaeafad7dd0214c6e29c808634c4ad445b9709e71f49571347ab6c8940515faf138dfefbdea648947bd8480027d01ddd7e751d04cf7795b9083afeda7972e486ed54754207955b977bf56337fa040ad23cae3ab1fcc1ed3d7045bfe832270967b84e720975e4c69b3c94a0d2524af8a6e11573ae8c2a42e969fe8525228c101781a317ea7a58ca4d549dda03c3c2bbbf9a67f0b48b4bed7c12c6197f6b2c8d008dcb034e2772bba5d7a788ecfefba350f032c5c15abac884a7f1bed458eb56f570213a114bc6667b21234466cc7ca72e6476d7b516d15c11e9ee5f79031ab941b95df839f734c0db79f17985cd91c3c2e3be8d8b34c24a9d37cf841c1eb4afecc39b501f55e1fe095a87f94b255fe5c87bc8573134e6196b48061c1e6c343ab132fcdf89128b8b19d899647d629556d0fad4db86f5abea4f8dd78893015a38d96034610fc7e1c313d7bd19f7218371920f99206681a815a63ddbc514096b53456aa618ea475ff75912f3e873c0e6edd0235567afa0c82c7f74a3ea6b10793f80697ebfdba6bda7f66037f0b98e3974398d8f24c6ee25b0d7e6c15c95296f096d8e8793005636da6d0752b9ef9bc546df2e2709735c8a435cd80887a8179509821c152838adc1718cc3b3668d23e7f249f00064981d48ccf8d2e39d1ca97b75fb7899b5f4c12dfb795af7d227bd9b475c9e9bc70835b22324e7057858a7567e335304bfb41327261c54892bfee45581976cee8c804d62ddccdbe1945925d15803af487e4d79bcf99239b2e1e18b9ce9f1d640edd2eacbd80c6c8ef1814719ef7c09e1c95c061339553d4c8a5e4748164a19edf8fba973cb57ee9a74620a0883c8f3eebcdcc2b6322871e572295c4e778d033425aeb9c81ddf57bab7ecd319991a25549dd03e483f8eaf6fee118a021d80c44430ac1336860109e87b6237b7a3c9c7706762aec3552178c156cd5714922d341d2e1b0ed07b11e8e6c72f24be85b9dd4cc487542f5dce9de76ded6c285715b0223370ae2ff729860e850160ce492a9b9efba96971cbd6b968c755c0de176fad820f1d9d240a25b17264b9e7baaaa56fec174f21fcfb3276e020cc8d620350b7bcb3184a7f88a774aa3184a0142662685623a362ab83db2b89bbf3ff5c1d89e99f71e98027bc02c374a759f95e864822a05d42952539a6cafaa09d5a9ef03b3548e6d277e3f665c9383442c69bcedbc3c6702a42c3d82484e251b4a6d1a7ef6897779de29983f97a6778ea7c818df22603f0920f8101b7507811895bdd19889a420819b573c7bca582758d91e9f43fa0bab528a6458dcb31c95a84bd28c50e53f39d6529f4d8567a731081d54c721d508c69e44cc533cb1170343715f2f3a8eed48adec21d0951858665ed66e34a4db36cb48a88612844d38230767f44347a5b5503180da76aabd14d4c8cfeedb3dc29209ed5565f34b06eddf1e8e7411f92c5459b3e93e4fe6d3c7774740d70c7279feceacfac12c913edf483d0b12a7982d2cf8e5acd389a8ea3c7cf562cad7bacfc192662f139ea0a971f75b16e5bbacf64e0386e76400cc55871f8879592a75a5ab0e11695b23b8dc21ee791d85f95e2f58d32e69ef819693516de318fe1d13fa375df0fc49448d35cf5e7ccbaf895998f4c049cb5ac3dffcecafa9eb3197554208bf91d1f92e5c98e522a45c486fa0aff9afe8a224c161c8117ae190db32b27b1319496ccce914dc19009a14aa2f44c452e4cbd2b5b5176b4c7e4e26ba039f5a2c8264d917458a9f1060295c5e2157bd63be60527f0cfd31d660e4385cba5fb202bba2170dd62845ea715f11dd7ed6034dc7ee50bfd8e53777aca77101f8012bc332a399fbe82bfc53383a61af8f08bb9f33ae4e737084a311e07d011f58384a7aba84e4b9766fb7026e9325ecee944f35cbad49c48878f118dc7e3d3a2142981aea6156224f4b0962928be495da3ae573308a22bc4be72294791df17ebd6bce1316a36ea1a31075701cf59a006761f5c65e6887f50fdc21b3b479bd0d5c3bbbf7ff23901b715221d20600a6700da501dbaaaf570424bc2b703a2926583c41603378019fda63d0ad3b1207902ac9a1d2beafb2228ffd53966d7548e6cb83568cbb5ff06103681f32bfa43b0ae3dd610c9249feec37b1f28436298b43a00d4ef16f40b5cef7465c4acbc806bd85228a51a1c9414a554ea8cc489bed1f12afc330e977af63a8e71c4f11f1921e8677d86346965ce243094ab3001cd315346e9ce896979ddd50e8b9c5dbbf0ca2ec3d80958a4b64c540c32893e701fb689d9929d0516856599d2d14190eccf236998bab728cec6d44c1d78ad38ab493deab60a91198d5444728992870833855f94c5cb2244213ce149b446937eba00ae4936ecd73d57cbbeebf8ed58199760717c91aabe4f85025a738313a02f14baec3b1c5a2f49e351d8eafe3d215412f278e0c1f87c069a31497429303001d554896c288ac2dd508743af79580fe58fea57d349e5b3a130715ef1fdffad221c83ee61a8678837e450675cbc98ba35623a1106b6b9eddd26fe39074a005a62e5e53dca9375aac595686e9baece916cf0523c7b6a4701a001dba9ceeb2013da2c42d3b786ed8488fc0eb905cdd70c579701fd670e1ffa24ac51c2bb3195a634b7f560d3370db4c9667f7a815b0fcc9d3650969b1c247b13287503d8bcd328c88490aff2d7019791c7545cc6978b6310720541642cfa5e1ab536c27ffbc3b656acf8f269dfc0c034fe66b9e1d794dde7e0818749db1e97f6d2651052fb3be4a761ec36125ecbf80ff02df0e8dea47e861aba3f8dd7998d95df226d7d4f91b778c70da713d5b127a2f3f46159e10a8c9dcd29ab6b61a7ad228f4b6e5f8ae3da346a588ef61a7a5054a9626e3414268e1b2d50b43b69be0f8c30901e0f8375439c8d33aa823b7ab706e8256cc3551a9c65bb9339bc59a5d9b9b1afd04cebea3244886afa869430b259ebbec90dbeb39eb4cc2207fdf274315201c3c25c5d3ba27133628f93aa35addfbb76f7450f95b6cade22bd5f10a3b24d38789167f425fda9d53a8c9a8292a9ee99a0248cf5ed8368fde604ba0b126ebc6997c2a010b3c0a95fd8396a8fa9af15fe4a9f37619242a5b2aa3dcd313bf04f54617c20585ef336882a6356fc6492b2edeef90732fc619f4f63e0a075d4da89fcddffebc1520b413ce41d90fa1e6a9c671de3b7296ff0170dbb77b5d63a813d548d8c83c94a7ba423c240fd56a484787a7c141cd505ea07aa16259bb25a868bd920158068a24c20d7d9a04067784d312b8cb8cae5b9134ee0cef6618215bb0479168876290a7a6cd88bd05c4487e756259d16857a63ff9f5f27d4a54f72214c00f83d82a17ce9f1f8c769a9883c67746ba88010fbc22e907255ef6bf06b74f2c0fdec95c9b1c9106735089106f8c7a0a95a9ad7f714afd5bb07e900d71c501b359e324728fefc07047cad6b383345ee0880e04a89be11bd4b07615a45fcecae38d8744ddbe9fa67edb2fba02b76eb03a493c7ecb3d9a53c8270251bd88f9dc6d4b3fde8d974997f819ebfcb7098b001c4f6a7ad8db552efea45810527bc6b9c55e6685f17b934e1238c58e365a39f96dd7814081b6d3437455dc1cc13c2592845aeb116e1caa964cfeb9aacb06ac788833d5f047e3ce6dd5794bfd61d69a3717ad7ac03daa615c43180124629292e21f842cd08c1b379644f65dbf098686e2f527fe6265d319d4ba1306ff8453f3559bd0f061c1ac094503ebfed113b342ad00b35675b44389dafa8b93a415d063d449abd689b227cfb65517b9768ebb043a11583bbd81c55a15024d92b9fc3f500eb38ae136097989014dc0b1cdd71d87ab7ca45c5b271918b3b3e1513ffb0464f2d6afad17967cdbd7d44084242a81643d28a996811d56ec495c527a8f5a60b368a3bbc118298fad5db844a322cf0130825f1ac842d552d7fe4f7a237dcc4df50e5eabddf75d6d250b991469fe0a966639e0219d3c5de7eb5789f5f24f75a08afcced700d8995be75582ed5dda8433b60e9a48669b40b75370071e4a5fdb44f979c37b5515742348411f040e3a13211b717ad02d57a27ae4b2c8b4944be94d7098df35ba068b68f2c05eb79fc32031f3603596629291aeaee557d8593352efa7f7a3d95ce82f4e75ffa6ce797c0900e9a3b08b6cd82daec3e45468f18714b77c709d515c5bb1fd7b8f978f49ba89e1ffbe9b5cf01ce9c8ff496ef6b04bdff50c733fe35c38f7ac2d92467bac0727b315f6d929eda785fbc183e98cfa0bbab4ca6e9c4b55e97b2858bea54493a6d2d6cbedb709a6c6e8e94503a59a1f3f9bb148a92c967f5dd445fcb954556642fc9d6f994432a11f8ad556c2d12e85d1fbf053c8ac1b7bd2f163d039867d3a43920d34b4b77b758bd811d0dc4a3024f652af0ccb3dbe722bb2c81f03f6d553c136276d3f89108050cf92fa97908075df2005714f3124aea9ee2ab5bf0d0da9beb7c106540d075efbd36fce365b93dcacfb9aba6632989c9351517138a69a63b05e552526b1eb592a6025b006281a686ed4978e2306ec93986c8beb5b2361e76cf435cbd75ee6f1211f5684c1eaa08a18c465f553253a54ec201d630d7032e60360e33680776f64cd53aeed15f27764c4bde70bed5df331cab3d388c5b61b8457bf71596640e1444cb7d00b599987936453d7dd3d8920b32d5857f30701c467c6a6252742aa2c79f5b14b429c87161e04d041208df8d2abb4f38682cec2cbe91c047af61fa769333ecd500918ea1c5407fff2a128dc2d3f1be548d643de86b506659592924506ee56dd17b4309cb9844533a54ecf24b551d116ff706a2b7a2ac1f2782680605552825cb77ecdac22cf03f407b7b754c268712c24effcee30ec78f739e9f6f9cd0776cd0247457b05a4d2dad74be9973036447a1f8916648915f66c06f424ba96814075d04c7128acf677af1bd779989ec3d6283ebbcb92ab286db8820c14ac37da2bc10c5faf12a06f27ee158ed66cc86cf8587b546b4e1f7e40eef68d0d8745758c22fb2c307902dbbc5a6444a9614455dfb210f95b7ad2e8c6779651cd83cc479e3fbf5a7a86d820f361c54096979a1d1a96ee8d156da4a3445a79de02d8933d74de1e99a818e6c84400d98a70534f65bcd2624f5289ca307e3b5311766d68aaf858f53ab459fc7f82b48cb2241518d76b9e1b3b27fa36e19163beffd5c01bd04c66d3c4febb924eefb0fbf41ac2c3ce417bd08bb960108bb47fe2d9e65add619a5b47efc0690bb13ae302e361ef92a83e3534253d2cd350e5a1c12280a9de552001b074b9b2d27ecc709441e3122f911fadffcef50a3131fb6e397c13aed8048ed2dc484f659fcf8de2e4e524f8495c20d7a9721083aafcc7f2b185078511ab1747220df9315b54d35f9d9b75e42ec12f39cc725ae5839d8c6016e5ab3d072b749a6c2d8b86bfefb1c41c1e46636fc1ec8fbc477b84ee9dc63c3e730b8d92da1a3b52f2d034ad149d668d3a53c39ad2b0f5759ec54723dc8dc42dd98adf3e511bc3464f0fda5d2aacf757ef32c966d79452162a6d93407cb1deefd9621d8d5d397981baf87d2680f082c77e7f95937b53c8b47b3a6bff0af7bfb6639c6b1b7d059b154130f489a2c3462f53d670fb4d772381f5512358d96d0aa0ca6c9a81b2d8aa34b0698a10f9c00775cdf04550e97f3a077ada6e226b03047045dfffa362697dfe48064105321dd121ec61902dd293125e0d38658f95e676bda01439f7b0e74216af916b79fededf6f8cc8018e2e1ca0fb4dd79a3261a293327b19996bebd1bd41cc053034bf6301107915a712e7ffb6046fabc5d307fabcc348d939fe5535ac24ba8612eca084e8f456c6a629dee90d55d4c12b1f39196fbc5d7685b6428acc6ad1b75be239cb5cac7dddecae37dfd80f9d11b3d7b5c623459b0cc11930e0a3421f8d76cfa9e7d443e84c0cdb6308a069bd303e8436e28a2f19f0bed8b6faf5ccd8171f96e1991a7cd9992fce3a0b03102b4122c848d75d3e492d3f5e7b980238935fc155134f84b14627c9ee8941071f998d1abf17cc3dfa57fd0133b7200f9469d511a7b417e459c0f32388b16dc67cf28012e9c8d9d0de59e732e30a3a0e680922a58f227eb390cb5853166fd4ac22db2f9aba83bc07e867ccfc28be45573ab0502a3ea5ebbf1e03efb99e4c600ef4263f9d108efdf4877bbcf94106cf0bb79fb09b9b64df81b59149e018eb9f4c34c9022adc8f6077129fc1ea6044fba129ec700c3c6668a68c89a18531bcd8367ca5c8404901a2d0c900f250f25275d4c4bfbbba04e8c2b79755727a3012d7bfa280a154fb5f2370e928229b79bb2e0cc072f7cfb6ee9a246a7b261c01df5a505335b8f37ef7cb9447285d4b2236fc6f28350fa4a61d6a0a2214d44ac25a6ed53626ee5d22f850f3a38ede7f08fb954a425e1888ab48d108fb27a879a86dc9ce7671a6943e312e69297bef497db232f058d5fc60d9c89c699fa2fffeb4dc9af300c7bd50af4b0a3a3b2eca624e559f7ef199fff9c9b135801b82ef011fe29f403f603c104a39165c7437e538211dd105c1387de4853d8faa894ad59f6c9c18d23abc367adfe98c09567df7fc39589c4ddb85d51cad8267f5b1010a6a9bd4807aedca45e74d58790eb71694a563a2a2ac08e10bc60b58cf09e170f9bef872ef8a92431cd5ab3b567996031383e6631398ce239e9c12e6683b3d865dd38f6de8bfa8dedfe8d51808bf36e053c2b0e1b8452d11f45d052a11c69f2da78977c4c4f4d6b75fd5ff3b66dd0c57737f5c8511aa4f9937ca135cbb382ae14c6267361632d518180eae87cb06f9d706db7ef0f41a00855d487bea6df918a09ccb771c2fc7c2e094742ab2b0d48cdb364ae58998bd5b5799fb7d203ed3a162a0b2702bc5e2f8b30caf6985aed9ea33a5699997b4292a08cc06b8bb3f57f390dcb9e2cb95cba79ed37595be67ca8da9aa3e038f034d4a1127ef136702ef69839280cdfaeade95c0b1ce9c8ee61eb4634c2c8e2c7fad41c523cd10a16a8dc874e0d3d0074d3d23dee7b81f2861b47fc083708f2c47ea8658707eb2dd3f381ae51d6c98d546f610cef6e7b05a6b0b6ea4f5278debc6475aa9a36850a6c4ee32d9ad736656fe7f8c0ec4db9f7e6564b6eaf32b75168103cf610d3498c7f88354eeac9e57c86986866792163208ee53cef4724a179a7766e2099927aead3d6ca07fd5d7d5607e846f4228746ee0a41e720906a62ff4d48413fe31ffef341f7d21fa41f3f0fc6834f88a13eac080d34210961ccfeb9790a6d3376e7a7da75c943f609e682c30746d33c1b3d2ff675aebc9eed6e49790123157217dbd2101117d87637501d43567d26169147644a2f3bc9fa586aba08641a23aca8719c37a5b08530ef397572baff5a3bef8756ae4a0b36dbc8d39353b2c7ccab352c2f177eff8834341961af6a37c486aeadbce1d190a430b683de6bf7a11c283699368ca4556b2e9835f94d5f0e5c75e7fcd692a17322422e21683986d0aea4a06d749f365a89ad4744d0c5b6ff752f2a271863b563a870a39c468e3d6ddc7dbae5424f0dfb0ec1fda5f7bead71aaa0be29e87d16216413d5b27a9964bf4dd0d22d85928fa757a23bd60a434d66ffe47d3c60c8630215ef1d1589b092c869f152ddaf638f39ae2613742ea0b857ff0710f09598e512d64106d31e02ef7e819ef1f4f1ac4338a20f45becb55867d99091d9cda266ad3d96ba49ad0a7ec54973a787075aab958d04ee83603710f0b847ea001c789d46e945792ba23b143e12fece36eb58d9c63fdfc6e7d227adf8ebfcfee084728bf37279d1eed75e2930ca7d9af5512d91ac8801b8b465807525be5439e35a942f005f339b348d7c9dce6253aef747d665bf8018aac571e3ba72d60bc2671475d3f2584b8f32d22b11a64f7e42b1ab076a206e6bf28dd5a8ef9a2842aca0c840203df2a6af98f203ec88f9a110009828bd0842e529a4e75b9093bc5e5eb75f31e99e27638c427926fba7a17fb7d53dd32c78a3182ec0ed551ba8b2a786ed7a568eaa3a465e6a2000c92ee3857796312ac213515ee8dcc6301e3714d118c31fc95eab9ab776043944e74235b6d16df7ba230317d375317b2fd58faf01846c933df2d9baf41d52a4c10478de06aab43d1f59a4139e62153902500b58aa57d2fddb0b0f9d7eacff9d036913cd19192d3b75ab3215b6475fd9672e3d14cc2b390b260f15d6c9ad22231f926cca27054e3ccbff567be38ed989ee535f1b81f51b6dd270562dada8035e2f6b873c30421020d8118d992fe0ee68d08512bd6283a424d05deca875122010b711dec15dcf2691430471890c8578ea19c1c6c4c338a9f818bb020772f4595397a6197bf83475e9b3246380c21f3207c3a69be8f9379ee807c64201b219d66ac720451672ebbd75fce2c4b98c3f754397122452c206a13d215c3dddf4b1d4f569ad535413a0db1a5f784bd3b0ea443b8747e1263418ec2862fc1f1030198abd5741c4e68ebb68406d6c55838589c4f532fd396fe48b6536ec23f99b0ddda774de408eaa0ad535d47d8ca4c3ce11529cf178a341faee4370c79009288d59bef37c38ec093566b58477dac22cb1783bcbeb481bbf10a3753169f7452fecba43530edad20f4a5cf944791b8fd7d251dc9f672d5d98ff6a6fab530ce5d2114ffd5991e5adb455b5566c71a09293c9daa154b49d154998151bd59ee08d9329189a1766035d2270fe6b59c09ed004a1a058f355bf01fd570e2e5267695be405de3ca343820588afb8d24f617ad9e250a233637e93562790148bab41afd75e8ff0386cfdfc042f6fdd755c831959bc699312087770593c77e90b8b7c140a683b5c9502af2cd23bce8fa33909aa42189166e3165bbc984d91737698bac622cfb7919fe1ec36b53da00198068c3958ed4816ac1c055534944e479798fb22184e56cd4f2303d70fd0a26c95b2062f7656cd29b7a31743726a2fcf83a319d02c28122803888122e95e833c9b534aaab65e11d84431e45a6273440dfeae15ffbc3ed39bc4bd6ff99c9899fba471bf3406f0122406141f0ac12ee07c89ab0f6c768445de5f2ff33fb88e9dbe77d2e42a4baeefaa424ddfaf9dbcdedea1cc5a11cd42fc06e31aa27f6dbf1c5f877b9ace8cf2165c6d0c1b73f1fd8d00828ed758c1fe608114db2537950ab60cd868675a1bbf92ff02987b752092c8917be300d954f692350e32a0a462b3c5d0c9b19c7d3820f4ea5a56c7aee5282697ab5605980e87313592ef0fc8f88019f551c4208c410ea1ebb1d16a6d4478203126f6deee4f365b4f41cb010bfbbed8556f7823caef38a1c522573f7137372fa6379b0bd77bd98f12260a2eb595533df06b1f16ba0f8426abbd6b79bc59e73d32d166799eb387e1d0a9c7d4fd295d876cf5190651802885a3b1bb29e411aec4729454fe75ffb5ee17062b7cb7ecca0e1453f7dfc2e6313c966ea9b79716b3a938f212f743cff39b522e06c1e839464b7a2bf7e1ead606460fd7486fbf2b25e3551ee8496f1ac4cdd54c75cab2682cbacb7b789b35e0b86779ff14d75f868e258098b8f6f2a73bb1eefdaaff9f0393a8b69de4af44b2d5cb77dae6ab28d1835a927cee747334a3ce5e1ed9837ae8d6538739424b1615cc8b9707d3049b968c5300d95adb803dc7dae65c5d7484882001205b33e85bb86c48a83e7f010b3610da89f2ca0acf03ccb41e52ccd045d5df43c22b4856bf32919a68225cf6e8fd110327354c225cb0085fb119b18a06063aa2af8d463c2800f9ac418c88e8423d4f11da094511401200182432d30daa35b3d6e5d3ee531798e4a12296e001191b830e1249915a412a35d4b61fa7893c34055e70db423991426a7fd9272d4838e22358468950af5b5f4e0abb58f8d2c60aca327a1eae7ba2abd5e5b8b2c67febe81b9ea230cb71db56bf0bae5d5f5cc9f098373a7fa04a309272431b8d490ac66594847a270c39aa2f3eac8ae064a2fcaffc63c56de2a6f1e86dc67d386722a74c1d9e4278f8462aa193f4a73c88debedf8ae2c083d2278f7358ec200402179701c26c11b73e73d568d7b0917d90bfeb50a344dc32c2d5c64e31becd516153d798c4e22abedadc990f5b9401daf43519eeee06b82af386119b8314bb4661f9414018857af2777af4a603b4e0a8c336aef9740fff77461bca7d534cc8550d1c882cdfee861d80758eacfe8354d1ee572e7cc2379c579fb829a1176e55b3e1abbbd9ca2b50b33f2dfcb2e81c68de92ac12fe93bfe9d4036b48d9297cf2de2da9217314c2380fbf71661ada33314431d98c0b4e7b22218b9ef57fce94baa7f30a794449458b774660336d01e249f9915962003a3b6505f7a7afbdb6acdbf31fd46e6b45a92fc478ae1787b8527964b6e7b09189834fadeae068aba318bf2e8a6f4519da6f9963985328c1db1c1aba2ac862b11d732b580912c820434fd55ecbe34a6dc952bce51ec766b86fda64c889f85ebde46f47583ca3a4106bbe3ea5b4734d61b94aefe67dea38124176ec1f04b859dc368e813e1eaf93f18173c61f2dd82e06b0793c61f758de1a7a8ae75654cf80f5cab8a888192b38b23266b26a66e98e8d11a40bf3dbf9cf4b268a984ee914431b8c36c5c4e65e4e9045d94cdf889ab40b8985d51d4c1e4458c16be86528569fd3a71f37b454b24815980f2cfbe69c405a900e6fbef01c1c95626cfaffef399452f7ea3f7dc46b85f75214642daba26c8962da725ce536a702476d8eecab54ff9d764539880bc7a34513edf69e80b9232ffdc7f517b6f09824516da9d4626d3f40255ef9ad333f31a69bc2c2a9544b998969bae260cb95b6a7b95070298a542c08fae39569c80001513efeb8322822402e4b5c1b19fd27904a3a6e4efa6705e534374094cd2d03ec560097ad88137bee34e3807bf9d64c32ce0c3e9673f3c8ec18114d3e370e1c49c426245a2399692937550c4baf565058c056a8d55c6c3d883aed0912ce748a48f56b32b07f49d364bcdd3d5d0f1f535af8d3f7a46a030697ce27017d08bd38fe77c9567052aa92400c8099186a9079d55a9a5c8eb3d7ff00666cd4f6bc932042feb5c80b7d750f88d63fd77d3d026d1ba413ef0be116ee7b4fc85e5ccf39f8fb6185c5470b4a9c6ca04d86d9bf543bd8b86ca25c5ca2653ee7e9112f1feebc2172fd3ce9cbf49522275ba5275717fcc036673aceab61c645f5c0fb9085fd35563b64c4139590ea3b53c8fb653f45389f94be2aa9a5492d50c0eac475f455a232e87308af6da0727fb37f4312d01676e65cba2160027917baa916ff3075fcec8148af75173ddc2d450bc2485308f3b45ab57bf6893b7020fc5647b60178e8d97dff73c7ca0047e701c64a1c305e8f023825a34d8f00316331cecbc606d023a7fc33d09d57ab7e6c262bca00f5ebb7d0deea71a58c794cf98c9a895ad6f33e3d3d07b664b726589ab849034d71a01d2728f35e01dbf4277d2723ba5767b5eae5741841b06c58925858f44d5b6f948c590b54f772df1f8966766c485dcc7760f15045c684edb40d8343f0677b2d7bce59db8acddb1880aad08fbd2759ff7fc55d17ac28137801c163197da1349f1330e076fdda70a59cede68102185f666afa78fd9dc79e440a60e7f560ff9284b759274a85d76cd5aee6a68b2a0bcc01c44258c37a88f1a039ebcedd386b329186d9be4d9cd6dfc54c1c6bd47b3db20d7460a9f356eb79038b6f0c985e9582a660137ffb7a5a9a97cf3f70f4eba534fa096d2cacb679cca73dc3aee1a30af5caf7f3456fb09645422e72d17fe786eb33050ca60b65afaa410f9f71bd3527d18a782efa65083567b0bf185720a206e1bc6151c3218b78b2d9e940eb2e1830c76f8542786e67a8890ad12ccd42db34946ef536e6cdb85f408fdabd3b38f373ecd92b125d866226ff6bf7c6f137e69a1c7d754c7c693cd7fabadc0a9b097d67cca8d4f43a938040c72ee6a69335f71f4a5f852cf22e384b0879765db22c17f7892646a725531197a5ce3b5116cbfea87768b5ce1129705123f3efee53856233f961038cb650366324439845b28e6202b0c065ae3d400bdf300c96fa7ed7a61af6524d718493bad22fd75b54a5b3ee5e9c3a0e0ca916c9ec4138057a1abef8534594cbf0277a9d3314e2a340758b85290bc12224ab7dfebc17279dcdd4cb51d4af3650871c62d1f2808f781b3cb8891817cfc2ed1a8eeee12769bd1b5631a501ffba7dea5733ef5b76458bca2a577c838383b2c2b4e4c477e701be5e3e4e9c2299d34267492f61aaa0909811a3889b180ecaab78968a6cbdb34caa55c0109fc0188e71a6884aab4b52a17469d066d2211cc10beade6daf06bda0a3010f6b5b5fc0c991ad96782acf8a8a3d7ec99072b2fd2e7e3b6489ab2173dc8fa6857669de5f89632399e7cf38e0bee590f099d55ecd9f2a9a2547e011420099b6aa658c798f7c42f99078ac1371986b294e310344ddd3ee656a4e85d8f424d5753e8e75bac169643290ed5364816e6f881ee7de80318f7576c26d40e6cdf1612fdba500be24298631d1ec674f950f7491240bc02a18a3c0924ec283c3006fa5fe3baa6076b61941e28bd26077579f8a2404ca2fc38401cc89ef11f3109a7e3d4e5225df7b20b7dcef86b4b7b793bc4a2b534fb3f1f02ce200c64187cf9ea339d6daf2230adc5da1227fe7f11880465b2f8bb5b63b0946c85b6051840be4113f798dc5f6f89d6b80b0e2b33b5dde1900cbadc51f43b21bbaa2df5c3052fc62dcd78a351c6d1d7120a9a0a675fd7188449b0a2edb7e72a76d89e6aa6ad76a325737aefa75af63ac6b0ad2e1fceb0cb223916f1d35d7f444825ef17298dff4c8a9e4090fb307b4b429518014283a2a37121e8b243c26a11a8de39e33863dfcaf6b9c29afb447b8025b789cfbd8fb21bcd7a27bc24a3a5f2c71b28e01f4130fb9287d87409c6b7f7e97360440014db5057a167b9df98cdde358837b71164b546f2304e55499bb2bce3031b95eb16e36c28e3421f0e042603828ca5ba730c6a2c9649160f8bc79c54299867e09c9a6b6189d9d3af5d3d82b544f927c5ec551582e507e6759b7fc9a0b4d8184d05f45db9ff72b1f499b7b15fe8989b03f476ac21b79de4be7c77c674f02f5a5fdb1c6d12f0d7b87b15127614a3134c8e799f741246e17aded680bed095581ac377c58a4ac8c87f115ac0a0d5abbbb48170fb40541f1413c512fa3d25638245bd8ecba6d7dc0d993d155b0935772faaabc8897a69a2f47b8153ef1787eadcb9507bdfa264cc779d073a1bbf7444f7a406dd5fd30a7fc52bcab165bee71570596a948e1bf0acf8065e906521d41d38c68ce0de1acc7acfdee77e348e8a57bef837aec84ee4c5da995a5f1b2bba67c7fda06adc935ccf40759d4b9c2f51ca9c1f681cb04f8c6a76a9d52923c9022bdf439ade6aff7cd19d8e3f55fc8e634df3cbf44a94aafb56a146411b186d6fab05fb1b6564cad5133e2ae42e861197efb2972216c0525b89dfd26cb0329ec71391282ab51029146fb8f7305f2265d2e50b8378e64a43ec294d9c8c63ed176b3141215cb66e2265f541d8fe6778fbfe21ce707a00afaa03c7e58d261ecd8046ad34f3602ce0b781b273dd1fb4a5bdcd580c0decc16309c71c05c96e66d16f366a39469dadf726ecf779c274f338b4640389126eab519ee9f2724ca897a2963b39c009b646429838c5c2e0f2b71a171fa008259d43548fedc92672ea23dc265fa317eca398225093f6994623dd5490c52aa4b6f5537be34d2563914495bc4f5a5a8eabde40c47af2c7f0bfa56b43a6563b7d21b81b26153e7e272ff25f185cca3c93794f2a41bd51a483f9ad7223569ab143b1a240ed708ebe04ea3f0d1639f586723f897e49d0be1fa3304733936c5a9440b55be1cd1af990c2b42265b555161c0e45a8926d139a899552a850771f8b4f3ddeb3f130e3f97c46799baaacfc7625c679e7a4ad23c29c7c95a4b45c26b6192de6717e5df21b4248ba6d90e10919ecc21a7325b822df62fe485164fc3cbfaa9a35b681360669b3c815e934db47b1505bb840976902a3fb8a6319cf66b129172cc581849f9fb381963ba232832d2c6b8cbec4d2b0a4032ac5fce7e1bc6426ffe60034e188fbb8442137a8cf346b515c4ca53c7fddf750ea992f623d51d2d253012b48ca99c7df15175e922fc84a0c7089222efcd08a9e7e46ce72886e760ef578311de87a500e27c522cb62d1c974201f0b6317900f7fc0d980126ae0cc3061790089a03518ffe428c7d5ae50a7a7195553aa0fd065784445b4d9d3e2fd3b217e7e1ff0e0b790c38fa40c3008dadcf51dca342c57c816ce0b8f6a9457eaf558186d4f8385fe0aa69c24ca954e2a92ed43b31a4408a8953346d0ee6887208334aac16c6041d666095c4d3105117d1ab6d32dacdb06427b12fec28e083a2934a16721ecfaf0887998bff3ae05388245c4fb0eb2915a60ce394a7f50ab1af3f52e4061a5bf65fe1f8f74fd9092215d7d8be7961eaf7db82706c4576472aba9d48552d7688e41997207b51128aac34e1ae6689e96725ef94d92abd762b7f9ec39056aded13ae85a7df9fed64b6e5cf16d12527b8fcb7e9946e6e6ef511fea2f8d82f226c4767fbae6e503847c7676f59774a507336b432280f20d5441502e5e74ad314c37b30be630c34eaab9345baf73e3bbea2ea80c8949f8ec9f2c57584b8d2ba4783d80ecbdd00f6c3eb13dae951d8aec0c0cd37d63b75c2e977a5c89a0a35f9d1f56cc92e1eaa268e088de2b645b98d19b3d9f32234db55d0a78a1ed1eb5788fe03462a632f5f01f48a5d8db468ff5cf5785ea744feaf4a30e7430aa32fcc2c9b6064f1550f2eadb99c2ff8296660d4656db9bd164ea8e413b54e9267440169d6e93488b60235d3cdbc444354833c5ba079d9a39103de6483dabbf0f26307c4e42351cbd8de3849bae7f05b43b3fc29a64202b0272298c7a57a2ac058b3129b3d761c8926e303d3a040a65f26470efa7c785b543c0a8c83619ecb58c657a29ffb26efe10df9cba6b879a76017bd0e8292440efb91e8f868f15e6d2cea3bbdbbacfc3a45d527f44d7257ce0d438c8bd9f6fabbbc800d78677c8acdadf03984c47d1b0dfb2d3bca8e72b763818300cc60a2e428f7b15f411c6f88859a2e52e26cfa9450e43db54df9c9d108c7e5cf34ea2aeb747b41a45cb68f78dfd252c569efe4590bddd1fceaad8c6095ef5e6d55b9d0f862e8385dc75eb5f206dd61839762b0c7b6ddf963d02d4a6cc574a5a95a0160ed128a38df32f0eda5d74e8956cb839eb177ad6a64042e0dbd8fac074985cd5f630af82009323480807a76328e0d1f05d7d4e9b3241b0bd01ca8e6878b3cffa58841c909c40fd84166c7c98d969e1206823ff17aade0ec19849252e8380d1cc385669ce1b3f4a9bcc16d3be62d0fe3c8efaed25cfd9f9573a3bfcf562b25952d4fb30d4302f5542aa216d8896736bad43b6023d04f22ce9585e9caf549380af08ae98e07880ee1f23ab786b6a536cd859f7ee5626ca78c9d8e8afb2bfb1bc796edb71716211d8b9c1ea691041338037533d681da89c4edf5bedaf2105719d2f7f1fc0991dd6214b845238b9cf1829f36a9cdcc97f658bc7aec64bc47729f1238248888f1e20f6a93c876f578715bb115808b35e51126f0ac32f40646d757b82ee832aea04e2681eb07d95b09170df7feed621eeed44e0b380324cb96b8d9f4b579a31992be0918b88b8f28331350ccdc7bf522e2a3c9e1d741e2e2f89f72a25ab947265dba5f285abf5af09d42a23d2871b62afc4960baf777d92d10f80dff7b54b096e633ea1a1d3ec13ff4ee803b457122e4a4a8385d841338034d47b7f4f32e324b78b04834ad3f2808274ae551d1c304c3ab4a65ed290f5277f10db2c5dd99b3b7f5e97a6fa0402855e09c6916051d155ff6de52dcd8c458242cd59bcba7f3bdd1910747d3844cfb33a330a31c11b9581c78fadd2bbe6c461fb9a376866b1426a7be7e7df2d0be4425835cc234a6adcd1a7517645f7b38772ed627b983969e12a09116e6c480fe838bf0791e8c060331ff9058ab995b50319c84f3e95c7f3cd45ed4f624931dcfc0ab6fe05e23f80f7c301aebd83a62efc4640a3780def2ca7231a5af26f0798f8f47d3cc1e3100267042d15d2dfd87a71fd7e84f90716d0ef597689376db53395afa66aaf03d38d9d7d9c7fbfaeeeb8485c5917e23b3dfc29fb9638853ec09a32ce3627d1fce7364c2e2e474561a8f4d83a2981b21753b0b9491696ea01f0c6489b3a1bba8b7f434ed811ed37e877e9bd2c98188eae30db19ee653e9bc324e2c7cfae4bf606ad5c883b6be210c5281605a3e66b3663d42bf90507bdfe8a9fa4bcdac975f98b11cb0e2c31125696492e1838d7c23f7c617ffbf164453de2cc44c4396c5183cb606af662d3abd6da3d2f0029b887e07bc644f4521a049abd498578324fe8fdf85b499d71430e279dff305765eaec855bcfc7220a778906c81477b660345fff10b30e37fd0de01c0223687b91300749d61bf0abd3acc4771c265bc467ed89730f0ca6e9b821d6c4396de65f63df6ec56b66bb1736b2f89cf9452c099e6fe71f4b36100e9f306229c232e1ec398a6a9c6ab4479c963c08a455fd70a4e55c73b93b0036f59197b7500ad0c8475d49c3420dd0e7a5c17c75fefac557d4e2faddcbe766d4c1b120f12672159d9e3c92f32f581abf1b5efd007047eeac202f112d66a83efd6b6b8c2fd8b6621c0dc467bd61c8000f25c8612829ff607e1b517818198ea20e1ac85907cd6f9a1c8e6b68ee38fd466408b766d9579b1bac90755c29497a708a4c7aad1a33e95692a94b0bf791318e6c7dbabb5af98bb0c9657a01d38c6f17d3d52a247f74742e23742f1f0a51d570c9f667e1d9a11aec1ab9d1ad35e14eda8149a7d95708a1a80024d2a62895225c42799accbfa2f742b6bc5c64d14c164a391cde545e01ed5dc37963e172524092ba616e15d759949b51cd75203c510d6d0bac6cf18db8060f1170e5f6e3c791edcb459606a0143134dab50a2a423c1ea71c3604e573c9ac2651ff404e9aac1b1fa1c3569f3674bf5a033674abce44f998a2452368c74c3e2209729e1dd777c8d63ba59b139956215c388be218fe2dec163a4a5b5cbcc7fbcbbf16842e9930741a14f35f624d6ff84ee3f74139ea1a2aac302f210c16a76bb7561949a9b651b107166e9bb4b12eb8b880a97e25cee09667ca4a23410962862c98156ea5c014e54982107fb83ab0dae18e2576c23c15b0faacde392fa793363ab42917c30fc6203117daeaaf9dc9163a56b4db9c5232e06cfcddc70899848bc54f4db9d0b36f07b4e9ea2442b648a81a51b4d938cdef12b8a8a2e680feb24ebd62520bb8bfdbf3f5c1e6402acb7b1efe137ce2e986a89e96242ad0125f7e517ab215075fd3a9540e85724451dbceaa84e5b6efd8ce5bd5747da1ebd6db939c4876d53ab761bacc858e94cdc0eb8e3dc8ab5d1df1ec5ce950b74f5880463aed7d54662085139f03c5eaf29216fa519494a464761f045a88fab2e8822be8baaa4634e3ad9d1bce1640bcda05580a18930d32a99f2e4952ef00d3dc4e0a481d9b7060b128715f7e14ec0ae0bb5f4b75cdf11ba3f1e665afc16273b1832c574cc95b355093f334b162fae9dd80487124d66b030175ea342dbe865c38a80d3070af0abda078421e3f4e3c2f170df486b39e39b3444b4240250ad0dda12e3458b6ee370c095d961716bdc9fea5ba0d53117818310e3132c255342702e6bee2df0eae453d6f9355c62b83a1f73042b425aae3ed5036f23686ef4c922bd67f627855f7046be458fb6115ac38c27c38d4565b9d9ca166831ad7f2963377ca52448add9923411739abefe2cdc299f7a68cf0746ba6b8bdfb205c9359b8b35e6e32ec76c5b9f93a546e2f2d83173963a3d8e13790f3bc4010d1304d9be8160688b8ec3988f65818581f72e7377fce546bd81e6b20468436699df263d2cacc75a81e198e2a65c6418201293ba3e52591d0476340b0aa41cb2cd0ea27a39b7a5a274cab8fd84b1ef17aae85dd9cac4747258dbcdfbb0cd0405cec97542d9b23ac8feac817d04db127b564e110abfb73a3835b8d254fa026a7e499bd17cc6c2a6827fe3c9677f6b7088a210f5a6e5a44d9910e65040679f6da22ed2c8419efe6944402b585c3ee62a4e2eebf5a0885f21384ba58b6f937164c15c5ca4935f2030af03cd6c23fe181c4f17908ac955647a7b6c1afec63affa7215bc880a1297a3f12a0e269b02008f31f43711c91a1e5a516bca75715b9e777b322e337fb8e4c25c900d51918661d16994f7af4c439d738e37a7de15ddbfb3ea6135307eacf522a43b12354205f2aba61da9a1f2242eabe35d776269cdca9b3a0f0e0b953684caa30004eaa63932349bef241b63e724d2224ca1d3fdcd580e6532c49f2cdff49f95060d6f19a6bfd31bc3dd01cc8d5df3caf65fc57ff7c43f6f8ea1f5185a74a7333daf550c0b6f81989125a79ef7969b34229a1f2ee8a2a9b18de52bbac4b3c05b074e321b768f5a6ec46cb481aa94c9cdb68816ceeb8338ae723eb3b84d119d2530e4573dc0efbcb3edd9991317ecbfe01efad89e19eeb44c853b491e5d6e5d348e33e830836043bde3aea8e74faeb787f580e4835b13ef3a13730efe43d998ca193fe5e2357ebc6aab266036f93a937d5434b636f0ddb25d68d869ea5df45619c106856725f30a420f01ab8fb4e3e496b320891ee6af8954f0e3b47bde65174ec5fccab8544d9849fef0e92070b684ef9b30726ce29bf4858bb234705ccd24e8dec95b902e988e573718df82bdb4e612f1ec59a93df1368c7662456feef5f74cf06258ec19e87717079efe1a6f012d6b6f79d67e2671a77e81a85ffed8a277e3069a442d296dab16313c802c2c06bcaaced68e02e912777f5b8e488273e687ed073d6210e313a7eca4beb31f4e4560e6e2bc1e6181e5c9604cd7bd7b3c77cae2bf0937bc2a3e68ac65e9c6979f57184398766cdce084a68dc943cf262a77014f0747df09560f5a7dca1b8146d6125a0851b00e60f81a4fba518e263cca55ecca3238a14e098db4e68d0c1bc06761bb1f85df3c80c7c6fe26b32f2bbf7c8266f6a649f17568605c92fbe33eab159aea1c1e55154886c649cd08863080bc1d410b6107f1145cb8d59a8f87b18b12cc438d286fbd7e23fd61d40a858cc01e13cbe1f62d7dbc7409d12113ae04c1b570e8ff188dd5f10f7066935331a8d47423689a1facad4246c76ff5c75b3561d68e7e9c265f9e4fa167ae2052f218a455ded72c0d9acc44ae03afde103d0076f4f7f5d0f00c1ec22176e3a4143d2b3d8455a3e4ab2b74a29b1cece0fb92065371997699fd3f693b413b1f472a4b0ae4f678e48eadf27f63ecb365b516437fd046a76bc576f1bdf7a31138f0725652b1b679503b05c53883a0811804ef5041ab5008f1548d68b5d2b33444675b7aaa3bf7f280cd138dee412895124742cb725a10d6df8c0dd01cbd760e19a930ab98baebf8c3c028c6fccc6ecdf520352df362a848710cfcc32d090e847fd4207f6f89f85b6b215567a94a01496b49a062f848ede25da020155352f1f3c843ae11ace6b6632989304a3eb191d9ffda34deb94362284732984c41923711143d153e4178e60d7440ae75d40137a6dbf1f4e378af8f16b49a59f346a9854b0d6eabc4d99aba09c025f27e7caa4ad5d5a6d6253460e5a63880195369133eeaf2efde092ee2cacf087a0ae64dcdb09952f05bf0a05c8b9cafb1e8b60d9c8778ab0c951feb8740fc63858b5c4d6d27e774bd9183bcf9ab8938d57b5b21d0981de024f38289435147ceb1628321023cb73015f5573f7a713ca02e08ad881c1ea1ac259ffa6bd7ebdcbddf15a1704195f6f81873a2d0d27f7b349d249419b2186ac8972d8dd3a2fde41da0a9201722c47a06ed558cd8ffd22a0b4d921102d0ba54b45d24ed256bf902689f5cbd2da1e35f63fab0869e07c7f6eeeeb525d8b441cb36cde253f03ad25098c049a272adf0981ec67c7bbc6764d1406717c922c6c9756a3aeb66dcc9dbad3f0a8422c3a14cdf0eaa16d7dc3a6afd7ff763f34f53b8c2f819f154e0c8cc53b7ecd4eb58fe37faeb6a52d1dabbc60ff61c783a9df4b2b6583d18c7342eb8467352d414a776612c8474285efb8684a2df7607432f88fb87f55e659a546326a6cbd748fe2c4734d429cafb92b2de29d2a51849f55d6f4f3502029b7c8d9a0b0501521e5e4c63325c10467237bf863f42f32be333ece7ea91c36d4b03c6cfc217dcf118e7bcf0c664adaed3cc534a3eb882802376b7e3edbf6e104513af701c105fa6e849e46b1f5a51d246251d4d044de2641b52bb0c504d9cf98c2aafb829042bf97db2ee64f867a737b37b4560f3fc5795056f441d9f268fae15135c95d92326804fc623ec4a9cabd5ecf64e3868956d5a3e3a371ee06b2f3970f4fa0e4d31e503a5445306feb911bf61b5bac6a86a24079f224746081480eb3e75f42d4968873906bc636a106651d2ea9cc5484beec72b253023943cf4ca9c5ce0a97b98fe45605041a0da2cbb4648370cb53bd14ae60c2fff8e76f49da84b22794f908036e0c31564d48e702a34cfb1a993d1feaa52c20b158a83af6d20aa947ad2ff65bb132994e3a486a4ce455ec7ffba8c199ce172d85be2e8aa82b4369c0b9e4deb41342130589c118331d14d9f42c3c474d77fd3d71055c8268342090eadbcd1f8aa87ff048a49e1b2e31c55bed91624558cae925e8fa89846de39f86e6e52baa1fb08ba84e8ac96820ffe0c59399f8c411dd8b20b35feb32bdf571820ba7d72ce26746d0d3e39c6a0fee95b86b18aa0a1d14218006f0cea6edd233130d53fd6c33f9883205527332594e7e274d47a04ee24fa8f16fddc21ae921c96776714acb412470ef9522ca96b9bc14047bc084f1e5d67b736431e750886f4ab4dcf9308134045e7fb8af0b4a5e771deb3b2dd857a3026e398e3a7c2b6a4949c298a20c3c21257122f9b048a04abdf4f74159b3a6abb28b79605628bc7f9277c6a3c453705596d626bb2b171b4470058f9e41c77d90dcdf4411129d59a93b0223ab9761bc46dfb41877f41ae66b683dff4a7b2ccfbe94d756b013c0002504d934cb7e3a5e39336a160fc066e16a70e6621ffad04992f2e536659d724cf07de2d2ad232331d74170fd28310f6576d6ae4d2a2cb3d41eb6aee1efe92337d25f224ff34341f710c28c1b81acc06cf88a05ef099e8a26c74e98fbebf404e972bdb87f5f82b9e9f37e15aac65ca87aa99d4d2aca78c6f9586219a8329406298e7100ca448300dbc751b2d5c161568bc047eb0f9745715f2833b52563a2d2672d04a06e8b4b474a8ee4f36aedd3fd26a151e4ea7cf719eee629bacdf92cf607bc16b4148ecefc455504de0616c51af9abbd9677d69b4e8f03db719773da41cfdd1003ae08e79d1a09f4f5f202c3655d1906abf5f5d29586f165db832d2a6eab37a97433269870e973e8d59cb2e0756a629ffecff4e7124061069a0f37d013df54d0c573df5838e084ccb89f1251e504bdb7a8ef7770da298964b7284fa44e3b810a1ea65679d2cde60415446a1efd01618d4873303e54f8ccc7c7f3183f2d29a417d9a7cecf252b596a169505bb487ed99e4d0b36ba71907b4eccb468a16da4dd56f5aa64f8f85ae9fa08df6223a7b04caa52c57ff5ce1c499b0a7ac15ab755fe741a17d08b556822b2a3c57ca81f4041ccf6236e65d0b8de95977860e21c506df3d732a8df321dca2c3e0699aa45211e8737f0abfa08e443e5a2e5ace2e9e506e8f916727ed222293e808c417572661146656df392487fb147d0af724f51e2e1ebeaaeaaed81c0c345219baf034c0fd933cf4f85474d1d3d97136eb89c95a9339d200965680cb69aeea20df4711efc2e05935d423ec0abc6f671279312ca0a1f84802d4314f69f84879e6e2834a4b1b759d8f1eec3c3f23ad0d3384b81e399a765ed60421267e6583169763fbf72838e413538e3b4aa6259bf8a1b44e55bc005b79ba86cbae46001addd1c01d780190603926da7f6b3442ef2be4d20bfb80552f237243e2118d1fc0b7631d5ba3e55b438eeda5b7eb5bc8d1d111327412b683bb3ac5212f3acee313bcccef7e818848d488a8414628ab6c49a8a0ab3fb10467fd6ea6bb07b20defca9a667eec528481dfb9dc9d950462d089e568eb6d4a1c570381331ddc8e4952f0fdd9cbdc46c1b973a902ae7ee7f1f166b4916aadfc5546c155598320d3fb87a91a8c66767b6437a2f2e4aa8d4b82c22f5974982fb37af666284e910d53c4cd88b3a037eb11d61ac70b31628789c98dbf149406764cdc63916bbe1e1c037799b1909ce94ad29c0e4d69d39064f233a7eb42a0f92cf61b205fcce26b1a461e6c538523e3a70f292b487933e7ae89080113f4246e69f96394a1afeda55dfcae094ba6cdb16ab93d7c6e0b4acc293b277bffc5ecfe6c53a50ff0fbf2f2cf1c514c0e9b38fa777697caa65e15029219f136354c5260c3caef2679e4db0880f6973086c98824da579a384c725f292fa8816096ffd9709cd312a89ea0db1f3f0bece9e7f16e7e1a921a76dbf6484da22da169b1e7dc8a4dc0b751d4775f6ecc0454c2a3b8fdca33b6080c27e052e74364d1a3aefde9f6751d7d19d898abbbe04430fd3d3fa649598ea5cc9c9f30fb2806572bc645882c8595479c9bf6fb309ff25dde0fe7d4594cfdb7071d7165697155b4bc744d71cefcab95b871954b2e88ba49799610601b02175bad64b44affec3e4625cb58a4b43ef63fa59df7917443979beecacc8e48e9ead9ac352c470f7e15302d1e716d410155152814406b9512c6646b7814606841c6a1ad7a55337cd1f1159cc44a54df22c2856f7b52310fb03f5acab36575016a12edaf7fc79cbb865cc34be08b7451bcbf74064dd7d7cfafc03630b6a1b3125b124881deb0695b46bdb6173d944cae607f3f4a8c1af835331dae7852ce022a7c7352cbc46efa6794f46fbc8f165f94dccbe8a32c856e9fa635ba9c2dba541a6ca09661c7a0beb7493ce723027dd626c89980e19267e82a855e87e7074146ea63fe5f5dfee38afe79dc982cd510683f6041d612883a691bff3c3ac84259050a3b19f47ff79b31efd89f08c2fa79d074a065195a926307ea7c38efc4719c1c05e5856336c13ca8cf46a547dd77d708b426eedce4b414e72923f0b8728d37012194ed3007c741235dd8244745120ce9bca0499d194671b29ec9f1727790f705aeb4824372b4dc040f2b107a2d7d907c0773c1b33afaf386a5d85ac2da338f657c2ddb86d65ae32fdd9ad6332725b163f0bfc706ae641a2855799b829e7fb707ccb48d4ac06435d4423ceae172c43c9ffc27f018c3d74bf9a69f16133b24ea74ad54d300453019fac7e21c5729cd7ed1e51ff498823ded5d6624c54003323ba295e8d6153759eb01594c0a1f025dcf260ab565b933231111abe1af3d306abb91c3f4cd37604382f47b23268e261b6cfd826bc1deb3d4dac1ecee6662d0d12f7886b6b6d28e603b0781eee1e074108dabe9209259b4d419be26aea030e7a337e364308b5af9f341fb5b79f1c4900211521eea9b98b3942332cccfdaea834bc769d7354332951efffdabea2b60e181f77de1427883492eaf8c4f7bc2b1f6352cb28b7e4b8dfffc1525ad03bb6a8b1e8576b25fbc0a690c40198b291a14fa04cd9cb2f0606ba6cadc15c3021efae9a42e997645ea3d5344eda0b21d99569d4a2fcc66ed45d72271ce69843552925afb96366ffedede0ea302c44df3c3efa7d4fb4a59c9a4a1efdce93ffce3c07740ebc673b1079722df01290c78deca71c94278694e147a0530465a2a2ad1aef95ef58ef906e5cc28675c6da3e0465f3f90bd24207ab3afc93991717e0558c391a98d869647236847d34983c9d08bd71ab15e9fd36dd787235236d54318f3b48f8d16259952146ef705fc6de7eed8a6aa363aab836ece2b5776db06bdf0f0ec2aedf9a04617925d454600754afd2be74c8481e39f620fc1f53b9616f9c39ad6c33ebf168262eb70d8336f89bf290268f710b45671063d2927f197abb32fc4805ba75dc6b7c161e8c30f7511c6f8094002c22c8a60a6a8868931b93cd4eb512a4d4f3b45b58299d7de246aac0026b479edb37396b47f3fb552ff34a7d4b8d5875b3fe6010185b8d145e2ddf7e8b03f966cd6909422477dd46114edff01c2d8ec299228cb268fb73e77c7a4e41aaf0cea059586d5b0a152031d6e43ee5d3ee9258cfabd5c23ee678df6ec296067e239cca35654aeaada65673f99c526eae7858ca2bfa73019cb81684809fc62360ace77a2b2327bd05eeb948cde27c09ffff35b23457f8ee0ef5f94b80b2b160a13a61c8c669fc0c25a25f9ab71c72de62e27385f3c501cb57d8f81e8bfe56be2177e9b0cceeb98670eec4d30bc26eff84bf75f8162bcd8a788cab911c450a959a02a6e81f4ad850481dc2e2f771156cd0224df29ed83cabcc7d76de4c16d2dd78a8cb0191860d42b220ec68ce56dfce090ea396012b92208eb92b9dc49252107e6aeef6fbeb40f0ba257dcaa9d4c315fc89def05cc13b87fc8ed76c195fe738a7955e631589f9adc1c8eaaf956f23b489836847c61f799569316607743e34200bbc522b176d7a82516bd8aa872da6d25a45a1680aef245a38851ee31471253c9126089885fd43ad3de11dfc8b9da61ebe5e68ed7ceaba88b468c59d8eefa17b9e407fd3b94cb4b26fe9100acce2f5f70866d32718c8087ce1e8df5abb3ca88130121f5430b385ffa807db6f882878f9db1d66772e7b7d3c2179afe1f869255967b97719c5e60d2b1a555f488420a679f26b5fd28ab8ccd444c81ae84021759a231bf113e34d961b5c4387bc201443c976d85ad2efaa4950060a6423a8a18cf996911fddbfb4a90980d45df2649e488ebf32942f4dd3257b9a458b47a41bda810da52f564d5dc2cefc2ed1e33f3a70353ef55d096637e5835a9196913e84f9a3191ba951f8c19ea5abfa79b873f5355f653c44807c86f4693aa794676be22f815a4a319bda908f415be10e35d9f1b910c42531973309817a41b27d8b52d1b5ba6340ace8e593c4694b6bedff6669181666ccc652c134266377735e26a6802658893eb42c600dc5d11c7ce8f776a09ee6ed16c4b382b5d6509685eda5bc156b177d60c104f07459d3dc08c5cf2445140a374552109861b5fc9f7b61f1c79f198ed103e8231100436302d4f3540087f9c7bbd33f2b4b712aff9f97725ca9053f03192ec68ac76b5e10c8611ea45c625c0f3dc0a37d79c7f6b1e2da623163b2a08ef37e7b391b9c2c1aba79807469ee0248c726a</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>面试-计算机基础</title>
    <link href="https://kiml.github.io/posts/cb03b778/"/>
    <id>https://kiml.github.io/posts/cb03b778/</id>
    <published>2024-06-18T07:09:51.000Z</published>
    <updated>2024-06-21T14:32:03.092Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>❗表示必掌握，❔表示基本不会问</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-06-18 初始记录</span><br><span class="line">24-06-21 网络安全</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="网络">网络</h2><h3 id="❗TCP-IP-四层网络模型、OSI-七层网络模型">❗TCP IP 四层网络模型、OSI 七层网络模型</h3><blockquote><p>大白话描述。</p></blockquote><ol><li class="lvl-3"><p>物理层：网线，电缆，在物理层面连接网络。（可以发送 0，1 信号）</p></li><li class="lvl-3"><p>数据链路层：定义一套协议，对 01 数据进行分组。把一堆 0/1 电路洗脑，封装成数据包，包含头和数据，头包含了目标的 mac 地址（从一台电脑的网卡发送到另一台网卡）。</p><p>以太网规定了每个网卡包含一个 mac 地址（唯一）。</p><p>在一个局域网/子网内，电脑是广播给所有的电脑（通过<strong>网络交换机</strong>），通过头的 mac 地址，实现通信。</p></li><li class="lvl-3"><p>网络层：<strong>IP 协议</strong>。如果计算机不在子网内，需要路由器进行子网的连接（子网内的请求把路由器的 mac 地址和请求的 mac 地址都写上，路由器把请求转发出去：<em>这里可能是多个网关不断转发</em>）</p><p>判断两个 ip 是不是在同一个子网内，要用子网掩码做与运算。再比较前 3 位是否一致（代表网络）。</p><p>ARP 协议：局域网内，每个 ip 地址对应一个 mac 地址，局域网内的设备是互相知道的。</p><p><strong>网关</strong>：其实就是路由器的一种。可以把路由器上的 ip 地址认为是网关。</p></li><li class="lvl-3"><p>传输层：tcp 协议、udp 协议。端口对端口。（<em>端口号是 0<sub>65536，0</sub>1023 被占用，别的要用 1024 以上的端口</em>）</p><p>传输层的 tcp 协议，仅仅是规定了一套基于端口的点对点通信协议，包括如何建立连接，发送和读取消息，实际上要基于 tcp 协议开发，一般使用 socket。</p></li><li class="lvl-3"><p>应用层：http 协议，stp 协议（邮件）。读取数据，处理数据，发送响应……。</p></li></ol><p><strong>4 层模型</strong>：数据链路层 -&gt; 网络层 -&gt; 传输层 -&gt; 应用层</p><p><strong>7 层模型</strong>：物理层 -&gt; 4 层模型（其中：会话层（SQL）、表示层（加密、ASCII）、应用层（HTTP） -&gt; 应用层）</p><p><strong>DNS 地址</strong>：把域名地址发送给 DNS 服务器，DNS 服务器（8.8.8.8）告诉你域名地址对应的 ip 和端口号。</p><h3 id="HTTP-协议的特点有哪些？">HTTP 协议的特点有哪些？</h3><ol><li class="lvl-3"><p>默认端口为 80；</p></li><li class="lvl-3"><p>一次请求对应一次响应；</p></li><li class="lvl-3"><p>无状态：多次请求和响应间的数据是不共享的，可以通过会话技术解决该问题。</p></li></ol><h3 id="❗浏览器请求一个链接的全过程">❗浏览器请求一个链接的全过程</h3><ol><li class="lvl-3"><p>把域名地址发送给 DNS 服务器，DNS 解析域名到服务器地址</p></li><li class="lvl-3"><p>先会判断 ip 地址是不是在一个子网内，不是就走网关。直接把浏览器发送的数据按应用层协议，比如 http 协议打包成一个应用层数据包（包含 http 请求报文）。</p></li><li class="lvl-3"><p>按 tcp 协议的规定，生成 tcp 数据包，请求头包含，发送的端口和请求的端口；tcp 数据包包含 http 数据包。</p></li><li class="lvl-3"><p>按 ip 协议的规定，生成 ip 数据包，请求头包含，发送的 ip 地址和请求的 ip 地址；ip 数据包包含 tcp 数据包。</p></li><li class="lvl-3"><p>按以太网的协议，生成以太网数据包，请求头包含，发送的网卡 mac 地址和请求的网卡 mac 地址（网关的 mac 地址）；以太网数据包，包含 ip 数据包。以太网数据包限制大小 1500 字节，所以会进行切割。</p></li><li class="lvl-3"><p>打包完毕，把以太网数据包通过<strong>网络交换机</strong>发送给（路由器）<strong>网关</strong>，经过网关的多次转发，发送给请求域名的服务器。服务器按包的序号重新拼接、层层解包，获取 http 请求报文。程序获取请求，做出响应，一层层封装再响应。</p></li></ol><h3 id="❗画一下-TCP-三次握手、四次挥手流程图。为什么是三次？">❗画一下 TCP 三次握手、四次挥手流程图。为什么是三次？</h3><p>三次握手：客户端 -&gt;服务端 -&gt;客户端</p><p>四次挥手：客户端 -&gt;服务端 -&gt;服务端 -&gt;客户端</p><p><strong>为什么是三次</strong>：如果只有二次握手，<em>可能会出现比如：发送一次请求，卡在半路；发送二次请求，握手成功。这时一次请求发送成功，服务端建立连接，但是客户端无响应，资源浪费</em>。如果是三次握手，第三次握手可以复位连接，释放资源。</p><h3 id="❗http-的工作流程？http1-0、http1-1、http2-0-具体有哪些区别？">❗http 的工作流程？http1.0、http1.1、http2.0 具体有哪些区别？</h3><p>工作流程就是<strong>浏览器请求一个链接的全过程</strong>。</p><p>http1.0：tcp 短连接。三次握手、四次挥手，断开连接。</p><p>http1.1：默认支持长连接，第一次打开网页，就会打开一个 tcp 连接，接着一段时间内都不关闭。所有网页资源的获取走同一个 tcp 连接，直到获取完毕，关闭连接。但是每个通道都需要一个线程守护，大大影响服务器的并发能力（目前是主流版本 BIO）。</p><p>http2.0：支持多路复用，一个 tcp 连接可以并行发送多个请求以及接收响应数据。二进制分帧，将传输数据拆分成更小的包。（底层基于 NIO 的选择器技术实现，未普及）</p><h3 id="BIO、NIO、AIO-有什么区别？">BIO、NIO、AIO 有什么区别？</h3><p>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</p><ul class="lvl-0"><li class="lvl-2"><p>每个客户端与服务端通信都会建一个配对的 socket 线程。缺点：连接客户端过多，服务器会宕机。优化：建一个线程池。</p></li></ul><p>NIO（<em>比较常用</em>）：Non IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</p><ul class="lvl-0"><li class="lvl-2"><p>服务端有一个 selector 线程（一般 +Cached 线程池），每个客户端连接，注册创建一个 channel。如果客户端发送请求，创建线程对 channel 创建一个线程（从线程池），处理完请求线程被销毁。</p></li></ul><p>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</p><ul class="lvl-0"><li class="lvl-2"><p>NIO 比 BIO 多了一个 buffer（缓冲区）的概念，线程从 channel 读取数据会从缓冲区读取（这个读取是直接交给操作系统来干的，是异步的，操作系统读完数据，再告诉线程去处理），写入缓冲区（这个也是异步的）。</p></li></ul><p>小结：</p><ul class="lvl-0"><li class="lvl-2"><p>BIO 是一个连接一个线程。（只要连接，就分配一个线程）</p></li><li class="lvl-2"><p>NIO 是一个请求一个线程。（只有 IO 请求，才分配一个线程）</p></li><li class="lvl-2"><p>AIO 是一个有效请求一个线程。（AIO 是异步的 NIO）</p></li></ul><h4 id="同步阻塞、同步非阻塞、异步非阻塞">同步阻塞、同步非阻塞、异步非阻塞</h4><p>BIO 同步阻塞。不是完全网络通信模型，是针对磁盘文件的 IO 读写。</p><p>NIO 是同步非阻塞。发起请求后可以去干别的事，但是还是需要主动轮询操作系统。</p><p>AIO 是异步非阻塞。操作系统异步通知。</p><p>// todo 看 demo 代码</p><h3 id="❗聊聊-HTTPS-的工作原理？为什么用-HTTPS-就可以加密通信？">❗聊聊 HTTPS 的工作原理？为什么用 HTTPS 就可以加密通信？</h3><ol><li class="lvl-3"><p>浏览器把支持的加密规则发送给网站。网站选择一套加密算法和 hash 算法。</p></li><li class="lvl-3"><p>网站发自己的证书（网站地址、加密公钥、颁发机构）</p></li><li class="lvl-3"><p>浏览器去验证证书是否合法（合法链接会有一把锁）。浏览器接着生成<strong>一串随机数密码，然后用证书里的公钥进行加密</strong>，这块走的非对称加密；<strong>发送消息的 hash 值（这个是用随机密码加密过的）</strong></p></li><li class="lvl-3"><p>网站从消息里提出、公钥加密后的随机数密码（用私钥解密），用随机数密码再对消息进行解密，然后用 hash 算法对消息计算 hash 值并与浏览器发送的 hash 值进行比对。网站同样上面的步骤发送，浏览器同样解密。</p></li><li class="lvl-3"><p>之后浏览器和网站进行的通信，都是走随机密码加密，此时随机密码已经存在浏览器和网站的本地。后续不用再针对这个进行加密解密。（<strong>因为这个加密解密只在第一次链接发送，并且要证书才能加密解密，所以安全性较高</strong>）</p></li></ol><h3 id="http-的长连接的工作原理是什么？">http 的长连接的工作原理是什么？</h3><blockquote><p>dubbo 协议走的长连接，可能会带到这个。</p></blockquote><p>http1.0 底层 tcp 是短连接，http1.1 即以后都是长连接（建立了连接之后，无论有多少次请求都是走一个 tcp 连接）。</p><h3 id="GET-请求和-POST-请求方式有什么区别吗？">GET 请求和 POST 请求方式有什么区别吗？</h3><ol><li class="lvl-3"><p>请求参数的携带方式同：get 请求放在请求行中，post 放在请求体中。</p></li><li class="lvl-3"><p>get 请求，请求参数是在请求行中，数据的大小受到浏览器限制；post 请求则是放在请求体中，数据无大小限制。</p></li><li class="lvl-3"><p>get 请求的安全性低，post 请求相对安全性高（不会作为 url 的一部分，不会被缓存、保存在服务器日志、以及浏览器浏览记录中），且 post 可以进行加密操作。</p></li><li class="lvl-3"><p>get 的效率比 post 更高，因为 post 请求在真正接受数据之前会先将请求头发送给服务器进行确认，然后才真正发送数据，所以 get 一定是先于 post 执行的。</p></li></ol><p><strong>但是：</strong> 本质上来说，GET 请求和 POST 请求没什么区别，只是在浏览器端对它们的使用不同而已，它们底层都是基于 TCP（三次握手、四次挥手）的 Socket 进行数据传输的。</p><h3 id="Socket-工作原理">Socket 工作原理</h3><blockquote><p>socket 是属于传输层的编程规范。<em>按照视频讲述的内容：就是浏览器发送一个请求链接的部分</em></p></blockquote><ol><li class="lvl-3"><p>按 tcp 协议的规定，生成 tcp 数据包，请求头包含，发送的端口和请求的端口；tcp 数据包包含 http 数据包。</p></li><li class="lvl-3"><p>按 ip 协议的规定，生成 ip 数据包，请求头包含，发送的 ip 地址和请求的 ip 地址；ip 数据包包含 tcp 数据包。</p></li><li class="lvl-3"><p>按以太网的协议，生成以太网数据包，请求头包含，发送的网卡 mac 地址和请求的网卡 mac 地址（网关的 mac 地址）；以太网数据包，包含 ip 数据包。以太网数据包限制大小 1500 字节，所以会进行切割。</p></li><li class="lvl-3"><p>打包完毕，把以太网数据包通过<strong>网络交换机</strong>发送给（路由器）<strong>网关</strong>，经过网关的多次转发，发送给请求域名的服务器。服务器按包的序号重新拼接、层层解包，获取 http 请求报文。程序获取请求，做出响应，一层层封装再响应。</p></li></ol><h3 id="❔进程间是如何通信的">❔进程间是如何通信的</h3><p>进程间的通信：管道（半双工）、命名管道（半双工）、消息队列、共享内存</p><h3 id="❔线程间又如何切换">❔线程间又如何切换</h3><p>上下文切换、时间片算法。</p><h2 id="场景题">场景题</h2><h3 id="线上服务器的-cpu-使用到达-100-，如何排查、定位、解决问题？">线上服务器的 cpu 使用到达 100%，如何排查、定位、解决问题？</h3><blockquote><p>就是找哪段代码出了问题。</p><p>场景：catch 时写了死循环</p></blockquote><ol><li class="lvl-3"><p>定位耗费 cpu 的进程</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示进程列表</span></span><br><span class="line">top -c</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后输入 P，按照 cpu 使用率排序</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">输入 M，按照内存排序</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>定位耗费 cpu 的线程</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的 pid 就是上一步查出来的 pid</span></span><br><span class="line">top -Hp pid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这样可以获取线程的 pid</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后输入 P，按照 cpu 使用率排序</span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>定位哪段代码导致的 cpu 过高</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的 pid 是上一步获取到的 线程 pid 为了获取它的16进制表示</span></span><br><span class="line">printf &quot;%x\n&quot; pid</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">jstack 进行分析</span></span><br><span class="line">jstack 进程pid | grep &#x27;线程pid&#x27; -C -color</span><br></pre></td></tr></table></figure><h3 id="线上进程-kill-不掉怎么办？">线上进程 kill 不掉怎么办？</h3><blockquote><p>场景：发布系统搞了一个子进程，子进程是系统进程。杀不掉。</p></blockquote><p>kill 一个进程 kill 不掉，这个进程就是变成了一个僵尸进程（zombie）状态。因为这个进程释放了资源，但是父进程没有确认。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">显示所有进程和其状态，可以加 grep 过滤</span></span><br><span class="line">ps aux </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 STAT 那一栏，如果是 Z，就是僵尸进程</span></span><br><span class="line">ps -ef|grep 僵尸进程id，可以找到父进程id</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后先 <span class="built_in">kill</span> 父进程，再 <span class="built_in">kill</span> 子进程</span></span><br></pre></td></tr></table></figure><h3 id="服务器存储空间快满了，在不影响服务正常运行的情况下怎么解决？">服务器存储空间快满了，在不影响服务正常运行的情况下怎么解决？</h3><ol><li class="lvl-3"><p>一般来说，可能是日志写满了。可以去 spring boot 下的日志去看看。还可以写个 shell 脚本，crontab 定时，定期删除 7 天以前的日志。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看磁盘使用情况</span></span><br><span class="line">df -h</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>要是不行</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">找大于100M的文件</span></span><br><span class="line">find / -size +100M |xargs ls -lh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">看各个目录占用的磁盘大小。这个命令可以把占用大小导出</span></span><br><span class="line">du -h &gt;fs_du.log</span><br></pre></td></tr></table></figure><h2 id="安全">安全</h2><h3 id="黑客常用的-XSS-网络攻击原理">黑客常用的 XSS 网络攻击原理</h3><p>XSS 攻击和 SQL 注入是大部分的黑客进行网络攻击的手段，除此之外还有 CSRF、Session 劫持之类的。</p><p>XSS 攻击：</p><ol><li class="lvl-3"><p>反射型攻击（在 URL 链接里嵌入自己的恶意脚本）。这个 URL 地址指向黑客的服务器，他的服务器会返回一段 html+javascript 恶意脚本（跨站点脚本），在网页内运行（跳转、下载、病毒、流氓软件）。</p><ul class="lvl-2"><li class="lvl-6">这个脚本，可以通过浏览器获取大量的信息，比如说一些 cookie/密码。可以利用 cookie 伪造用户登录的 session 状态，以用户的名义干一些事情。</li><li class="lvl-6"><strong>处理方法</strong>：HttpOnly方式，在浏览器存放cookie时，设置一个HttpOnly属性。</li></ul></li><li class="lvl-3"><p>持久型攻击。把恶意脚本放到评论内容里面，这个内容会存到数据库，用户访问浏览器就会访问这个恶意脚本。</p><ul class="lvl-2"><li class="lvl-6"><strong>处理方法</strong>：对评论内容进行消毒，就是进行一些转义，比如把<code>&gt;</code>转义为<code>&amp;gt</code>之类的。这样就可以把恶意脚本里的html、js脚本之类的失效。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
❗表示必掌握，❔表示基本不会问&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-18 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-06-21 网络安全&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="面试" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>【AI大模型全栈】大模型应用开发基础</title>
    <link href="https://kiml.github.io/posts/6e6eec5c/"/>
    <id>https://kiml.github.io/posts/6e6eec5c/</id>
    <published>2024-06-18T03:09:20.000Z</published>
    <updated>2024-06-20T09:51:07.595Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="f388714764740bb4bdcff2283fcc2eb8a9f294f49f7c1c24949b483cdd10f6d3"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十二天-509斐波那契数、70爬楼梯、746使用最小花费爬楼梯</title>
    <link href="https://kiml.github.io/posts/bae90a3d/"/>
    <id>https://kiml.github.io/posts/bae90a3d/</id>
    <published>2024-06-18T01:09:37.000Z</published>
    <updated>2024-06-20T09:44:06.773Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：动态规划之前没有接触过，基本都不会。看了前面两题 746 按照解题方法 AC 了。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-18 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="509-斐波那契数">509 斐波那契数</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/fibonacci-number" >https://leetcode.cn/problems/fibonacci-number<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归做法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="70-爬楼梯">70 爬楼梯</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/climbing-stairs/" >https://leetcode.cn/problems/climbing-stairs/<i class="fas fa-external-link-alt"></i></a>)</p><p>不会。</p><h3 id="746-使用最小花费爬楼梯">746 使用最小花费爬楼梯</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/min-cost-climbing-stairs/" >https://leetcode.cn/problems/min-cost-climbing-stairs/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：爬到 i 台阶需要的最小花费</p></li><li class="lvl-3"><p>递推公式：<code>Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2])</code></p></li><li class="lvl-3"><p>dp 数组的初始化 <code>dp[0] = 0</code>、<code>dp[1] = 1</code></p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] cost = &#123;<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>&#125;;  </span><br><span class="line">    minCostClimbingStairs(cost);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[cost.length + <span class="number">1</span>];  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i] = Math.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[cost.length];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="509-斐波那契数-2">509 斐波那契数</h3><p>题解：(<a class="link"   href="https://programmercarl.com/0509.%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0.html" >https://programmercarl.com/0509.斐波那契数.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：第 i 个斐波那契数</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = dp[i - 1] + dp[i - 2]</code></p></li><li class="lvl-3"><p>dp 数组的初始化 <code>dp[0] = 1</code>、<code>dp[1] = 1</code></p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibBp</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> n;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;  </span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[n];  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只维护两个数值的版本</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span> ; i &lt; n+<span class="number">1</span> ; i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span>  <span class="operator">=</span> dp[<span class="number">0</span>] + dp[<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="70-爬楼梯-2">70 爬楼梯</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF.html" >https://programmercarl.com/0070.爬楼梯.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：爬 i 阶有几种方法</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = dp[i - 1] + dp[i - 2]</code>这里有点难理解：因为走到 i 阶只有两种情况，1️⃣从 i - 2 到 i 走两步；2️⃣从 i - 1 到 i 走两步。所以到 i 阶的总方法数 : <code>dp[i] = dp[i - 1] + dp[i - 2]</code></p></li><li class="lvl-3"><p>dp 数组的初始化 <code>dp[1] = 1</code>、<code>dp[2] = 2</code>。根据题目描述，n &gt; 0 所以这里这么设置。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> n;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;  </span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;  </span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[n];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="746-使用最小花费爬楼梯-2">746 使用最小花费爬楼梯</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0746.%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF.html" >https://programmercarl.com/0746.使用最小花费爬楼梯.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：动态规划之前没有接触过，基本都不会。看了前面两题 746 按照解题方法 AC 了。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-18 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Keep 主题更新 tools 功能报错 btoa is not defined</title>
    <link href="https://kiml.github.io/posts/9344475e/"/>
    <id>https://kiml.github.io/posts/9344475e/</id>
    <published>2024-06-17T10:35:00.000Z</published>
    <updated>2024-06-20T09:40:54.792Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言不是专业前端，此问题通过 Chat GLM 解决</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-17 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="问题">问题</h2><p>Keep 主题更新 tools 功能，但是访问 tools 模板页面报错：btoa is not defined。</p><h2 id="原因">原因</h2><p>根据 Chat GLM 的描述。</p><blockquote><p>如果你遇到了 <code>btoa is not defined</code> 的错误，这意味着 <code>btoa</code> 函数在你的环境中不可用。<code>btoa</code> 是浏览器环境中用于将字符串编码为 Base64 的函数，而在 Node.js 环境中没有这个全局函数。</p><p>在 Node.js 中，你可以使用 <code>Buffer</code> 类来实现相似的功能。下面是一个不使用 <code>btoa</code> 的替代方案，它可以在 Node.js 和浏览器环境中都工作。</p></blockquote><h2 id="解决">解决</h2><p>找到 <code>node_module</code> 中 keep 主题的安装位置：一般在这个地方（<code>…/blog/node_modules/hexo-theme-keep/layout/_template</code>）。在这个文件夹中的 <code>tools-nav.ejs</code> 为更新后的 tools 页面模板文件。</p><p>修改开始部分代码，注释第一行，改成使用 Buffer 转换的方式（这部分也是 Chat GLM 给出的建议）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  </span><br><span class="line"><span class="comment">// const btoaStr = (str) =&gt; btoa(encodeURIComponent(str)).trim().replaceAll(&#x27;=&#x27;, &#x27;&#x27;)  </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">btoaStr</span> = (<span class="params">str</span>) =&gt; &#123;  </span><br><span class="line">    <span class="comment">// 使用 Buffer 将字符串转换为 Base64 编码  </span></span><br><span class="line">    <span class="keyword">const</span> base64 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(str).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 去除 Base64 编码字符串中的等号  </span></span><br><span class="line">    <span class="keyword">const</span> base64Url = base64.<span class="title function_">replace</span>(<span class="regexp">/\+/g</span>, <span class="string">&#x27;-&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\//g</span>, <span class="string">&#x27;_&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&#x27;&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> base64Url;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">const</span> tools_data = theme.<span class="property">source_data</span>.<span class="property">tools</span>  </span><br><span class="line"><span class="keyword">const</span> tools_nav_data = theme.<span class="property">source_data</span>.<span class="property">tools</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t?.<span class="property">category</span>)  </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言不是专业前端，此问题通过 Chat GLM 解决&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-17 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="bug记录" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/"/>
    
    <category term="2024" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/2024/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十一天-56合并区间、738单调递增的数字、968监控二叉树</title>
    <link href="https://kiml.github.io/posts/28ed1b79/"/>
    <id>https://kiml.github.io/posts/28ed1b79/</id>
    <published>2024-06-17T01:05:37.000Z</published>
    <updated>2024-06-20T09:46:47.987Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：56、738AC。968 看提示说比较难，先去做贪心的总结。968 不会，直接看解析。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-17 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="56-合并区间">56 合并区间</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/merge-intervals" >https://leetcode.cn/problems/merge-intervals<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) &#123;  </span><br><span class="line">    ArrayList&lt;<span class="type">int</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// 按左边界排序  </span></span><br><span class="line">    Arrays.sort(intervals, (o1, o2) -&gt; &#123;  </span><br><span class="line">        <span class="keyword">if</span> (o1[<span class="number">0</span>] == o2[<span class="number">0</span>]) &#123;  </span><br><span class="line">            <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> o1[<span class="number">0</span>] - o2[<span class="number">0</span>];  </span><br><span class="line">    &#125;);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (intervals.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> intervals;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">0</span>];  </span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 没有重合区间，将上一个合并区间加入list，并更新最新的合并区间  </span></span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt; intervals[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;  </span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start, end&#125;);  </span><br><span class="line">            start = intervals[i][<span class="number">0</span>];  </span><br><span class="line">            end = intervals[i][<span class="number">1</span>];  </span><br><span class="line">        <span class="comment">// 更新合并的右边界  </span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            end = Math.max(end, intervals[i][<span class="number">1</span>]);  </span><br><span class="line">            <span class="comment">// 更新右边界  </span></span><br><span class="line">            intervals[i][<span class="number">1</span>] = end;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 最后需要将最后一个合并区间加入  </span></span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start, end&#125;);  </span><br><span class="line">    <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[list.size()][]);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="738-单调递增的数字">738 单调递增的数字</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/monotone-increasing-digits" >https://leetcode.cn/problems/monotone-increasing-digits<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">monotoneIncreasingDigits</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> n + <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">if</span> (num.length() &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> n;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span>[] chars = num.toCharArray();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> chars.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (chars[i - <span class="number">1</span>] &gt; chars[i]) &#123;  </span><br><span class="line">            chars[i - <span class="number">1</span>]--;  </span><br><span class="line">            <span class="comment">// 从i开始都变成9  </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; chars.length; j++) &#123;  </span><br><span class="line">                chars[j] = <span class="string">&#x27;9&#x27;</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(String.valueOf(chars));  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化了一下，感觉循环还是放外面好</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">monotoneIncreasingDigits</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> n + <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">if</span> (num.length() &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> n;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> -<span class="number">1</span>;  </span><br><span class="line">    <span class="type">char</span>[] chars = num.toCharArray();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> chars.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (chars[i - <span class="number">1</span>] &gt; chars[i]) &#123;  </span><br><span class="line">            chars[i - <span class="number">1</span>]--;  </span><br><span class="line">            start = i;  </span><br><span class="line"><span class="comment">//          // 从i开始都变成9  </span></span><br><span class="line"><span class="comment">//          for (int j = i; j &lt; chars.length; j++) &#123;  </span></span><br><span class="line"><span class="comment">//              chars[j] = &#x27;9&#x27;;  </span></span><br><span class="line"><span class="comment">//          &#125;  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (start != -<span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="comment">// 从i开始都变成9  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start; j &lt; chars.length; j++) &#123;  </span><br><span class="line">            chars[j] = <span class="string">&#x27;9&#x27;</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(String.valueOf(chars));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="968-监控二叉树">968 监控二叉树</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/binary-tree-cameras" >https://leetcode.cn/problems/binary-tree-cameras<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="看解析">看解析</h2><h3 id="56-合并区间-2">56 合并区间</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html" >https://programmercarl.com/0056.合并区间.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="738-单调递增的数字-2">738 单调递增的数字</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0738.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97.html" >https://programmercarl.com/0738.单调递增的数字.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="968-监控二叉树-2">968 监控二叉树</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0968.%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html" >https://programmercarl.com/0968.监控二叉树.html<i class="fas fa-external-link-alt"></i></a>)</p><p>思路：本题要从叶子节点分析，贪心贪叶子节点的上一个节点为摄像头（这种情况下摄像头最少）。然后，根据节点状态，一共分了 3 种：0 无覆盖；1 有摄像头；2 有覆盖。按照下图的思路做题，就可以解出，还是比较难想的。</p><p>内链：[[968监控二叉树图示.excalidraw]]</p><p>外链：<img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2406/Snipaste_2024-06-17_16-14-55.png"                        alt="|1300"                 ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCameraCover</span><span class="params">(TreeNode root)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (minCameraCoverTravel(root) == <span class="number">0</span>) &#123;  </span><br><span class="line">        res++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">minCameraCoverTravel</span><span class="params">(TreeNode root)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="comment">// 空节点默认为有覆盖的状态  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 后续遍历  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> minCameraCoverTravel(root.left);  </span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> minCameraCoverTravel(root.right);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 前两个if可以互换  </span></span><br><span class="line">    <span class="comment">// 情况1  </span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">2</span> &amp;&amp; right == <span class="number">2</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">// 情况2，加一个摄像头   </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="number">0</span> || right == <span class="number">0</span>) &#123;  </span><br><span class="line">        res++;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：56、738AC。968 看提示说比较难，先去做贪心的总结。968 不会，直接看解析。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-17 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十天-452用最少数量的箭引爆气球、435无重叠区间、763划分字母区间</title>
    <link href="https://kiml.github.io/posts/253a4d3a/"/>
    <id>https://kiml.github.io/posts/253a4d3a/</id>
    <published>2024-06-15T01:04:21.000Z</published>
    <updated>2024-06-20T09:46:51.330Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：可能因为熬夜，思绪都是飘的。都是看了解析写出来的。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-15 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="452-用最少数量的箭引爆气球">452 用最少数量的箭引爆气球</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons" >https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路。</p><h3 id="435-无重叠区间">435 无重叠区间</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/non-overlapping-intervals" >https://leetcode.cn/problems/non-overlapping-intervals<i class="fas fa-external-link-alt"></i></a>)</p><p>还是没有思路。</p><h3 id="763-划分字母区间">763 划分字母区间</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/partition-labels/description/" >https://leetcode.cn/problems/partition-labels/description/<i class="fas fa-external-link-alt"></i></a>)</p><p>直接看的解析。</p><h2 id="看解析">看解析</h2><h3 id="452-用最少数量的箭引爆气球-2">452 用最少数量的箭引爆气球</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0452.%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83.html" >https://programmercarl.com/0452.用最少数量的箭引爆气球.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：看了一下题目就是要求重叠的区间  </span></span><br><span class="line"><span class="comment"> * 关键在于更新最小右边界  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> points 坐标点  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最小弓箭数  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;  </span><br><span class="line">    Arrays.sort(points, Comparator.comparingInt(o -&gt; o[<span class="number">0</span>]));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (points.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> points.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; points.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (points[i][<span class="number">0</span>] &gt; points[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            points[i][<span class="number">1</span>] = Math.min(points[i][<span class="number">1</span>], points[i - <span class="number">1</span>][<span class="number">1</span>]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="435-无重叠区间-2">435 无重叠区间</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0435.%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.html" >https://programmercarl.com/0435.无重叠区间.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：和上一题差不多，找重叠的，然后移除了  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intervals 区间的集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;  </span><br><span class="line">    Arrays.sort(intervals, Comparator.comparingInt(o -&gt; o[<span class="number">0</span>]));  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (intervals.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> count;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= intervals[i - <span class="number">1</span>][<span class="number">1</span>])&#123;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">            intervals[i][<span class="number">1</span>] = Math.min(intervals[i][<span class="number">1</span>], intervals[i - <span class="number">1</span>][<span class="number">1</span>]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="763-划分字母区间-2">763 划分字母区间</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0763.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4.html" >https://programmercarl.com/0763.划分字母区间.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：  </span></span><br><span class="line"><span class="comment"> * 1. 找到每个字母的区间  </span></span><br><span class="line"><span class="comment"> * 2. 根据遍历中最远结束节点，更新切割位置  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s 字符串  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">partitionLabels</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 记录每个字母最后出现的节点  </span></span><br><span class="line">    <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];  </span><br><span class="line">    Arrays.fill(ints, -<span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;  </span><br><span class="line">        ints[chars[i] - <span class="string">&#x27;a&#x27;</span>] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">// 记录上一个切割的位置（用于计算存入list的长度）  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> -<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 把节点更新为要结束的地方  </span></span><br><span class="line">        idx = Math.max(idx, ints[chars[i] - <span class="string">&#x27;a&#x27;</span>]);  </span><br><span class="line">        <span class="comment">// 直到可以结束  </span></span><br><span class="line">        <span class="keyword">if</span> (i == idx) &#123;  </span><br><span class="line">            list.add(i - last);  </span><br><span class="line">            last = i;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> list;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：可能因为熬夜，思绪都是飘的。都是看了解析写出来的。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-15 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>面试-反射、GC、JVM优化</title>
    <link href="https://kiml.github.io/posts/6f2f510a/"/>
    <id>https://kiml.github.io/posts/6f2f510a/</id>
    <published>2024-06-14T13:37:11.000Z</published>
    <updated>2024-06-20T09:42:43.174Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>❗表示必掌握，❔表示基本不会问</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24-06-14 初始记录 这JVM的图居然是我以前画的，一点都不记得了。</span><br><span class="line">24-06-16 补充JVM，部分问题没有深入，需要看新的视频。</span><br><span class="line">24-06-18 补充剩下的内容</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="类加载器与反射">类加载器与反射</h2><h3 id="简述-java-类加载机制？">简述 java 类加载机制？</h3><p>虚拟机把描述类的数据从 Class 文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的 java 类型。</p><h3 id="描述一下-JVM-加载-Class-文件的原理机制？">描述一下 JVM 加载 Class 文件的原理机制？</h3><p>Java 中的所有类，都需要由类加载器装载到 JVM 中才能运行。类加载器本身也是一个类，而它的工作就是把 class 文件从硬盘读取到内存中。在写程序的时候，我们几乎不需要关心类的加载，因为这些都是隐式装载的，除非我们有特殊的用法，像是反射，就需要显式的加载所需要的类。</p><p>类装载方式，有两种 ：</p><ol><li class="lvl-3"><p>隐式装载， 程序在运行过程中当碰到通过 new 等方式生成对象时，隐式调用类装载器加载对应的类到 jvm 中</p></li><li class="lvl-3"><p>显式装载， 通过 class.forname() 等方法，显式加载需要的类</p></li></ol><p>Java 类的加载是动态的，它并不会一次性将所有类全部加载后再运行，而是保证程序运行的基础类 (像是基类) 完全加载到 jvm 中，至于其他类，则在需要的时候才加载。这当然就是为了节省内存开销。</p><h3 id="说一下类装载的执行过程？">说一下类装载的执行过程？</h3><p>类装载分为以下 5 个步骤：</p><ul class="lvl-0"><li class="lvl-2"><p>加载：根据查找路径找到相应的 class 文件然后导入；</p></li><li class="lvl-2"><p>验证：检查加载的 class 文件的正确性；</p></li><li class="lvl-2"><p>准备：给类中的静态变量分配内存空间；</p></li><li class="lvl-2"><p>解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；</p></li><li class="lvl-2"><p>初始化：对静态变量和静态代码块执行初始化工作。</p></li></ul><h3 id="什么是类加载器，类加载器有哪些">什么是类加载器，类加载器有哪些?</h3><p>宏观来看只有两种类加载器：启动类加载器（c++ 实现）和其他所有的类加载器（java 语言）。</p><p>主要有一下四种类加载器:</p><ul class="lvl-0"><li class="lvl-2"><p>启动类加载器 (Bootstrap ClassLoader)：用来加载 java 核心类库，无法被 java 程序直接引用。</p></li><li class="lvl-2"><p>平台/扩展类加载器 (extensions class loader)：它用来加载 Java 的扩展库。Java 虚拟机的 实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 Java 类。（JDK9 之后，扩展类加载器被重命名为平台类加载器）。</p></li><li class="lvl-2"><p>系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader() 来获取它。</p></li><li class="lvl-2"><p>用户自定义类加载器，通过继承 java.lang.ClassLoader 类的方式实现。</p></li></ul><h3 id="什么是反射机制？">什么是反射机制？</h3><p>JAVA 反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 java 语言的反射机制。</p><h3 id="什么是静态编译，什么是动态编译？">什么是静态编译，什么是动态编译？</h3><p>静态编译：在编译时确定类型，绑定对象</p><p>动态编译：运行时确定类型，绑定对象</p><h3 id="反射机制的优缺点有哪些？">反射机制的优缺点有哪些？</h3><p>优点： 运行期类型的判断，动态加载类，提高代码灵活度。</p><p>缺点： 性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，过程比直接的 java 代码要多了一步委托的过程，反射需要类加载器通过双亲委派模型实现动态编译，效率较低。</p><h3 id="什么是双亲委派机制？">什么是双亲委派机制？</h3><p>首先，JVM 中有三大类加载器：启动类加载器（最顶层），平台类加载器（中层），系统类加载器（下层）。</p><p>双亲委派模型就是指一个类加载器收到了类加载请求，它不会直接自己先加载，而把请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，就再往上委托，赴到最顶层的类加载器，如果父类加载器可以完成类加载任务，就成功返回，若不能，就向下传递，让子加载器去加载，这就是双亲委派模式。</p><p>双亲委派模型主要是用来保证同一个类只能被一个类加载器加载。</p><h3 id="怎么破坏双亲委派机制？">怎么破坏双亲委派机制？</h3><p>一般在自定义类加载器中，我们不希望通过双亲委派机制一层层向上再下来，而是希望直接通过自己定义的类加载器直接实现类加载，来提升加载性能，比如 Tomcat 中的 web 容器类加载器就是破坏了双亲委托模式的，里面的 WebApplicationClassLoader 除了核心类库外，都是优先加载自己路径下的 Class。</p><p>要打破双亲委派机制，只要在重写 loadclass 的过程中，不遵从 JVM 规范就行了，也就是不盲目优先向 Parednt 的 ClassLoader 查找即可。</p><h3 id="你在哪些场景下用过反射？">你在哪些场景下用过反射？</h3><p>反射在框架中有频繁的被使用，比如 JDK 动态代理，Spring 中的注入属性，调用方法等。</p><p>反射更多是为了灵活舍弃一部分性能，自己使用一般用在工具类中，比如频繁通过参数名来调用指定的方法时，可以用通过反射去匹配指定的方法名，然后实现功能。</p><h3 id="Java-中获取反射的三种方法是什么？">Java 中获取反射的三种方法是什么？</h3><ol><li class="lvl-3"><p>类名.class 属性</p></li><li class="lvl-3"><p>对象名.getClass() 方法</p></li><li class="lvl-3"><p>Class.forName(全类名) 方法</p></li></ol><h3 id="反射可以获取私有方法或构造函数吗或私有成员变量吗？">反射可以获取私有方法或构造函数吗或私有成员变量吗？</h3><p>可以。有专门反射私有构造函数的方法 <code>clazz.getDeclaredConstructor(int.class);</code> 来读取私有的构造函数，私有成员变量和私有方法也一样，但用这个方法读取完还需要设置一下暴力反射才行：<code>c.setAccessible(true)</code>。</p><h2 id="JVM">JVM</h2><p>内链：[[JVM.excalidraw]]</p><p>外链：<img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2406/Snipaste_2024-06-17_15-35-20.png"                        alt=""                 ></p><p>JVM 包含两个子系统和两个组件，两个子系统为 Class loader(类装载)、Execution engine(执行引擎)；两个组件为 Runtime data area(运行时数据区)、Native Interface(本地接口)。</p><p>Class loader(类装载)：根据给定的全限定名类名 (如：java.lang.Object) 来装载 class 文件到 Runtime data area 中的 method area。</p><p>Execution engine(执行引擎)：执行 classes 中的指令。</p><p>Native Interface(本地接口)：与 native libraries 交互，是其它编程语言交互的接口。</p><p>Runtime data area(运行时数据区域)：这就是我们常说的 JVM 的内存。</p><p>顺序 ：</p><ol><li class="lvl-3"><p>首先通过编译器把 Java 代码转换成字节码，类加载器（ClassLoader）再把字节码加载到内存中，将其放在运行时数据区（Runtime data area）的方法区内。</p></li><li class="lvl-3"><p>而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令。</p></li><li class="lvl-3"><p>再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。</p></li></ol><h3 id="❗JVM-中有哪几块内存区域？Java-8-之后对内存分代做了什么改进？">❗JVM 中有哪几块内存区域？Java 8 之后对内存分代做了什么改进？</h3><blockquote><p>首先：一般来说：Spring boot 会内置一个 tomcat，tomcat 自己是基于 java 来开发的。我们启动的其实是 tomcat（一个 JVM 进程），我们写的代码，会被 tomcat 加载到 JVM 中。</p><p>tomcat 去负责接收请求，执行我们写好的代码（基于 Spring 框架的一堆代码）</p></blockquote><ol><li class="lvl-3"><p>程序计数器（Program Counter Register）：当前线程所执行的字节码的行号指示器，个人感觉的他就是为多线程准备的，程序计数器是每个线程独有的，所以是线程安全的。它主要用于记录每个线程的执行情况。</p></li><li class="lvl-3"><p>Java 虚拟机栈（Java Virtual Machine Stacks）：线程私有，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p></li><li class="lvl-3"><p>本地方法栈（Native Method Stack）：线程私有，与虚拟机栈的作用是一样的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的（Native 方法是 JVM 底层的 C 语言对其它系统或硬件进行交互）。</p></li><li class="lvl-3"><p>Java 堆（Java Heap）：Java 虚拟机中内存最大的一块，是被所有线程共享的，几乎所有的对象实例都在这里分配内存；Java 堆也叫 GC 堆，是垃圾收集器管理的主要区域，堆中可以细分为：新生代、老年代；再细致一点，新生代中又分为：Eden Space(伊甸园)、Survivor 空间，Survivor 空间又分为 From 区和 to 区。</p></li><li class="lvl-3"><p>方法区（Methed Area）：1.8 之后方法区用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p><strong>方法区补充点：</strong></p><ul class="lvl-2"><li class="lvl-6">在 JDK1.7 以前 HotSpot 虚拟机使用永久代来实现方法区，永久代的大小在启动 JVM 时可以设置一个固定值（-XX:MaxPermSize），不可变。</li><li class="lvl-6">在 JDK1.7 中 存储在永久代的部分数据就已经转移到 Java Heap（堆）或者 Native memory。譬如符号引用 (Symbols) 转移到了 native memory，原本存放在永久代的字符常量池移出。但永久代仍存在于 JDK 1.7 中，并没有完全移除。</li><li class="lvl-6">JDK1.8 中进行了较大改动：<ul class="lvl-4"><li class="lvl-10">移除了永久代（PermGen），替换为元空间（Metaspace）；</li><li class="lvl-10">永久代中的 class metadata 转移到了 native memory（本地内存，而不是虚拟机）；</li><li class="lvl-10">永久代中的 interned Strings 和 class static variables 转移到了 Java heap（堆）；</li><li class="lvl-10">永久代参数 （PermSize MaxPermSize） -&gt; 元空间参数（MetaspaceSize MaxMetaspaceSize）</li></ul></li></ul></li><li class="lvl-2"><p>永久代（元空间）</p><ul class="lvl-2"><li class="lvl-6">在 Java8 中，永久代已经被移除，被一个称为“元数据区”（元空间，Metaspace）的区域所取代。</li><li class="lvl-6">值得注意的是：元空间并不在虚拟机中，而是使用本地内存（之前，永久代是在 jvm 中）。</li><li class="lvl-6">这样，解决了以前永久代的 OOM 问题，元数据和 class 对象存在永久代中，容易出现性能问题和内存溢出，毕竟是和老年代共享堆空间。java8 后，永久代升级为元空间独立后，也降低了老年代 GC 的复杂度。</li></ul></li></ul><h3 id="❔你知道-JVM-是如何运行起来的吗？我们的对象是如何分配的">❔你知道 JVM 是如何运行起来的吗？我们的对象是如何分配的</h3><blockquote><p>大白话：比如说我们有一个类里面包含了 main 方法，你去执行这个 main 方法，此时会启动一个 JVM 的进程。默认会有一个 main 线程，这个 main 线程就负责执行这个 main 方法的代码，进而创建各种对象。</p><p>tomcat 也是一样的，类加载到 JVM 里面，Spring 将我们的类实例化成各种 Bean 容器。会有工作线程来执行我们 bean 实例对象里的方法和代码，进而也会创建其他的各种对象，实现业务逻辑。</p></blockquote><p>例子：Spring 容器中的 JVM。</p><ol><li class="lvl-3"><p>类加载器把我们写的类加载到元空间</p></li><li class="lvl-3"><p>Spring 容器通过反射技术，获取元空间中的类，创建 bean 实例对象对象存入堆内存。</p></li><li class="lvl-3"><p>tomcat 线程执行请求会在栈内存通过栈帧存放局部变量，引用堆内存中的实例变量</p></li></ol><h3 id="❗JVM-在哪些情况下会触发垃圾回收">❗JVM 在哪些情况下会触发垃圾回收</h3><blockquote><p>在 JVM 内存里必然有一个内存的分代模型。比如说一个 4 核 8G 的机器，堆内存可能也就 4G 左右（其他例如栈内存、元空间区域存放类信息也需要空间）。</p><p>堆内存内部再分，比如给年轻代 2GB、给老年代 2GB，默认情况下 Eden 和 s1、s2 的比例是：8:1:1。</p></blockquote><p>如果 Eden 满了，必然会触发垃圾回收（young GC）。<em>回收的对象就是没有人引用的对象</em>：方法执行过程中的局部变量引用对象、类中的静态变量引用的对象这两类对象不会被回收，其他对象基本上都可以被回收。</p><h4 id="什么是-Full-GC？什么情况下会触发？">什么是 Full GC？什么情况下会触发？</h4><p>Full GC 是指清理整个堆空间——包括年轻代和老年代。</p><p>什么时候触发：</p><ol><li class="lvl-3"><p>调用 System.gc</p></li><li class="lvl-3"><p>方法区空间不足</p></li><li class="lvl-3"><p>老年代空间不足，包括：</p><ol><li class="lvl-7">新创建的对象都会被分配到 Eden 区，如果该对象占用内存非常大，则直接分配到老年代区，此时老年代空间不足。</li><li class="lvl-7">做 minor gc 操作前，发现要移动的空间（Eden 区、From 区向 To 区复制时，To 区的内存空间不足）比老年代剩余空间要大，则触发 full gc，而不是 minor gc。</li></ol></li></ol><h4 id="❗JVM-年轻代的回收算法">❗JVM 年轻代的回收算法</h4><blockquote><p>垃圾回收的时候有一个概念：stop the world。停止 jvm 内的工作线程的运行，然后扫描所有的对象，判断哪些可以回收，哪些不可以回收。</p><p>年轻代内大部分都是垃圾对象。</p></blockquote><p>垃圾回收：<strong>复制算法</strong>。</p><ol><li class="lvl-3"><p>把年轻代内的存活对象复制到 s1，触发 young GC 把 Eden 清空。</p></li><li class="lvl-3"><p>第二次满，把年轻代内的存活对象和 s1 内存活的对象，复制到 s2。然后把 Eden 和 s1 清空</p></li><li class="lvl-3"><p>Eden 又满，把年轻代内的存活对象和 s2 内存活的对象，复制到 s1。然后把 Eden 和 s2 清空</p></li></ol><h4 id="❗对象什么时候会转移到老年代中">❗对象什么时候会转移到老年代中</h4><ol><li class="lvl-3"><p>有的对象在年轻代里熬过了很多次垃圾回收（默认是 15 次，可以设置），就会被认为是长期存活的对象，会从年轻代转移到老年代。（例如：<em>Spring 容器内的一些 Bean 对象</em>）</p></li><li class="lvl-3"><p>Eden 垃圾回收时，发现存活对象的大小，比 Suivivor 区还要大，就会直接放入老年代。</p></li><li class="lvl-3"><p>很大的对象，会直接存入老年代。</p></li></ol><h4 id="❗JVM-老年代的回收算法">❗JVM 老年代的回收算法</h4><blockquote><p>老年代内的对象，很多都是长期被引用的，不能用复制算法，效率比较低。</p></blockquote><p>老年代使用的算法是<strong>标记清除（回收）算法</strong>或者<strong>标记压缩算法</strong>。</p><p>标记清除（回收）：</p><ol><li class="lvl-3"><p>首先会从 GC root 进行遍历，把可达对象（存过的对象）打标记</p></li><li class="lvl-3"><p>再从 GC root 二次遍历，将没有被打上标记的对象清除掉。优点：老年代对象一般是比较稳定的，相比复制算法，不需要复制大量对象。之所以将所有对象扫描 2 次，看似比较消耗时间，其实不然，是节省了时间。举个栗子，数组 1,2,3,4,5,6。删除 2,3,4，如果每次删除一个数字，那么 5,6 要移动 3 次，如果删除 1 次，那么 5,6 只需移动 1 次。</p></li></ol><p>缺点：这种方式需要中断其他线程（STW），相比复制算法，可能产生内存碎片。</p><p>标记压缩：和标记清除算法基本相同，不同的就是，在清除完成之后，会把存活的对象向内存的一边进行压缩，这样就可以解决内存碎片问题。</p><p>当老年代也满了装不下的时候，就会抛出 OOM（Out of Memory）异常。</p><h4 id="怎么判断对象是否可以被回收？">怎么判断对象是否可以被回收？</h4><p>垃圾收集器在做垃圾回收的时候，首先需要判定的就是哪些内存是需要被回收的，哪些对象是「存活」的，是不可以被回收的；哪些对象已经「死掉」了，需要被回收。</p><p>一般有两种方法来判断：</p><ol><li class="lvl-3"><p>引用计数器法：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；</p></li><li class="lvl-3"><p>可达性分析算法：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。</p></li></ol><h4 id="❗常用的垃圾回收器">❗常用的垃圾回收器</h4><ol><li class="lvl-3"><p>parnew+cms 的组合（jdk8 以及 8 以前）<br>parnew 是新生代回收器，多线程。cms 是老年代垃圾回收（比较慢，一般比年轻代慢 10 倍以上），cms 的垃圾回收算法，刚开始用标记清理，然后整理。会产生几个阶段，尽可能并发进行</p></li><li class="lvl-3"><p>G1(Garbage First)（从 jdk9 往后主推）回收整个堆。</p></li></ol><h3 id="❗生产环境中的-Tomcat-如何设置-JVM-参数。如何检查-JVM-运行情况">❗生产环境中的 Tomcat 如何设置 JVM 参数。如何检查 JVM 运行情况</h3><blockquote><p>Java Web 系统，在 tomcat 的一个配置脚本，catalina 脚本里找一下。</p></blockquote><p>核心了解点：</p><ol><li class="lvl-3"><p>内存区域大小的分配，每个线程的栈大小，metaspace 大小，堆内存的大小，年轻代和老年代分别的大小，eden 和 survivor 区域的大小。（没有设置，会有默认值，可以通过命令行查看）</p></li><li class="lvl-3"><p>垃圾回收器用了什么，每种垃圾回收器是否有对应的一些特殊的参数设置，那些特殊的参数分别用来干什么的。</p></li></ol><p>❗为什么要这么设置？当前系统运行的时候，jvm 的表现如何？</p><p>// todo 额，这部分都在打广告，打算看了另一个视频再补充。</p><h4 id="❗实际项目中是否做过-JVM-GC-优化，怎么做的？">❗实际项目中是否做过 JVM GC 优化，怎么做的？</h4><blockquote><p>没做过，直接单机压测，然后调优。</p></blockquote><p>// todo</p><h4 id="❗发生-OOM-之后，应该如何排查和处理线上系统的-OOM-问题？">❗发生 OOM 之后，应该如何排查和处理线上系统的 OOM 问题？</h4><p>解决的一个思路：在 JVM 里可以设置几个参数，如果一旦 JVM 发生了 OOM 之后，就会导出一份内存的快照。可以用类似 MAT 这样的工具去分析（<em>找出当时的内存占用最大的对象是谁，找出那些对象是在哪些地方创建出来的，一般来说是对内存去做一个调优</em>）。</p><p>// todo 这里要结合业务去思考，结合项目（模拟）</p><h3 id="Java-会存在内存泄漏吗？请简单描述">Java 会存在内存泄漏吗？请简单描述</h3><p>内存泄漏是指不再被使用的对象或者变量一直被占据在内存中。理论上来说，Java 是有 GC 垃圾回收机制的，也就是说，不再被使用的对象，会被 GC 自动回收掉，自动从内存中清除。</p><p>但是，即使这样，Java 也还是存在着内存泄漏的情况，java 导致内存泄露的原因很明确：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是 java 中内存泄露的发生场景。</p><h3 id="有遇到过栈溢出吗？一般是什么问题导致？">有遇到过栈溢出吗？一般是什么问题导致？</h3><p>栈溢出（StackOverflowError）是指栈内容全部被占用，而数据还要往里放。一般是递归错误或者出现死循环导致。</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
❗表示必掌握，❔表示基本不会问&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-14 初始记录 这JVM的图居然是我以前画的，一点都不记得了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-06-16 补充JVM，部分问题没有深入，需要看新的视频。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-06-18 补充剩下的内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="面试" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十九天-134加油站、135分发糖果、860柠檬水找零、406根据身高重建队列</title>
    <link href="https://kiml.github.io/posts/d65e5e22/"/>
    <id>https://kiml.github.io/posts/d65e5e22/</id>
    <published>2024-06-14T06:29:22.000Z</published>
    <updated>2024-06-20T09:46:54.588Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：134AC 但是时间比较长、135 看了部分题解 AC、860AC（但是 HashMap）、406 不会</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-14 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="134-加油站">134 加油站</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/gas-station" >https://leetcode.cn/problems/gas-station<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：有两个 式子 相-，可以得到一个数组。  </span></span><br><span class="line"><span class="comment"> * 然后求这个数组，sum &gt; 0 的情况。  </span></span><br><span class="line"><span class="comment"> * 环形循环不好处理，直接将路线延长一倍  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> gas 汽油  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cost 消耗  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = i; i &lt; gas.length * <span class="number">2</span> &amp;&amp; startIndex &lt; gas.length; i++, j++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (startIndex != -<span class="number">1</span> &amp;&amp; i - startIndex == gas.length) &#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="number">0</span> &amp;&amp; i &lt; gas.length) &#123;  </span><br><span class="line">            startIndex = i;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (j &gt;= gas.length) &#123;  </span><br><span class="line">            j = i - gas.length;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取本段路的剩余情况  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> gas[j] - cost[j];  </span><br><span class="line">  </span><br><span class="line">        sum += diff;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            startIndex = -<span class="number">1</span>;  </span><br><span class="line">            sum = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> startIndex;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="135-分发糖果">135 分发糖果</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/candy" >https://leetcode.cn/problems/candy<i class="fas fa-external-link-alt"></i></a>)</p><p>提前看了一部分解析，不能同时考虑左右（没看真的想不到🤕）。但是很慢。看了解析，和我写的一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (ratings.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> ratings.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[ratings.length];  </span><br><span class="line">    result[<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; ratings.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            result[i] = result[i - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            result[i] = <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    System.out.println(Arrays.toString(result));  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ratings.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (ratings[i] &gt; ratings[i + <span class="number">1</span>] &amp;&amp; result[i] &lt;= result[i + <span class="number">1</span>]) &#123;  </span><br><span class="line">            result[i] = result[i + <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    System.out.println(Arrays.toString(result));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(result).sum();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="860-柠檬水找零">860 柠檬水找零</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/lemonade-change" >https://leetcode.cn/problems/lemonade-change<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lemonadeChange</span><span class="params">(<span class="type">int</span>[] bills)</span> &#123;  </span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">    map.put(<span class="number">5</span>, <span class="number">0</span>);  </span><br><span class="line">    map.put(<span class="number">10</span>, <span class="number">0</span>);  </span><br><span class="line">    map.put(<span class="number">20</span>, <span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> bill : bills) &#123;  </span><br><span class="line">        <span class="comment">// 收钱  </span></span><br><span class="line">        map.put(bill, map.get(bill) + <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (bill == <span class="number">10</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (map.get(<span class="number">5</span>) &lt; <span class="number">1</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            map.put(<span class="number">5</span>, map.get(<span class="number">5</span>) - <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (bill == <span class="number">20</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (map.get(<span class="number">5</span>) &gt;= <span class="number">1</span> &amp;&amp; map.get(<span class="number">10</span>) &gt;= <span class="number">1</span>) &#123;  </span><br><span class="line">                map.put(<span class="number">5</span>, map.get(<span class="number">5</span>) - <span class="number">1</span>);  </span><br><span class="line">                map.put(<span class="number">10</span>, map.get(<span class="number">10</span>) - <span class="number">1</span>);  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (map.get(<span class="number">5</span>) &gt;= <span class="number">3</span>)&#123;  </span><br><span class="line">                map.put(<span class="number">5</span>, map.get(<span class="number">5</span>) - <span class="number">3</span>);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="406-根据身高重建队列">406 根据身高重建队列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/queue-reconstruction-by-height" >https://leetcode.cn/problems/queue-reconstruction-by-height<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路，虽然看了提示要和 135 一样分开处理，但是还是没有思路。</p><h2 id="看解析">看解析</h2><h3 id="134-加油站-2">134 加油站</h3><p>题解：(<a class="link"   href="https://programmercarl.com/0134.%E5%8A%A0%E6%B2%B9%E7%AB%99.html" >https://programmercarl.com/0134.加油站.html<i class="fas fa-external-link-alt"></i></a>)</p><p>看了解析，明明思路是一样的，就是慢一点。❗忽略了一个点，<strong>如果总和大于 0， 那么必定有解</strong>。无语解析里那个 totalSum 真的太妙了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">totalSum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; gas.length; i++) &#123;  </span><br><span class="line">        curSum += gas[i] - cost[i];  </span><br><span class="line">        totalSum += gas[i] - cost[i];  </span><br><span class="line">        <span class="keyword">if</span> (curSum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            index = (i + <span class="number">1</span>) % gas.length;  </span><br><span class="line">            curSum = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (totalSum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> index;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="135-分发糖果-2">135 分发糖果</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0135.%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C.html" >https://programmercarl.com/0135.分发糖果.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="860-柠檬水找零-2">860 柠檬水找零</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0860.%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6.html" >https://programmercarl.com/0860.柠檬水找零.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">不用HashMap，直接两个<span class="type">int</span>进行加减🤡</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lemonadeChange</span><span class="params">(<span class="type">int</span>[] bills)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">five</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">ten</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> bill : bills) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (bill == <span class="number">5</span>) &#123;  </span><br><span class="line">            five++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bill == <span class="number">10</span>) &#123;  </span><br><span class="line">            ten++;  </span><br><span class="line">            five--;  </span><br><span class="line">            <span class="keyword">if</span> (five &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bill == <span class="number">20</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (five &gt;= <span class="number">1</span> &amp;&amp; ten &gt;= <span class="number">1</span>) &#123;  </span><br><span class="line">                five--;  </span><br><span class="line">                ten--;  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (five &gt;= <span class="number">3</span>) &#123;  </span><br><span class="line">                five -= <span class="number">3</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="406-根据身高重建队列-2">406 根据身高重建队列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0406.%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97.html" >https://programmercarl.com/0406.根据身高重建队列.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路: 先按身高排序, 然后根据前面的人数进行队列调整。  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> people 队伍需求  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 排号的队列  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) &#123;  </span><br><span class="line">    Arrays.sort(people, (o1, o2) -&gt; &#123;  </span><br><span class="line">        <span class="keyword">if</span> (o1[<span class="number">0</span>] == o2[<span class="number">0</span>]) &#123;  </span><br><span class="line">            <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> o2[<span class="number">0</span>] - o1[<span class="number">0</span>];  </span><br><span class="line">    &#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列调整用LinkedList。按顺序在下标位置插入，这样每次插入的值都在相应的下标上。</span></span><br><span class="line"><span class="comment">// 把旧的大于等于它的值往后调整，不影响之前的排序。</span></span><br><span class="line">    LinkedList&lt;<span class="type">int</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] person : people) &#123;  </span><br><span class="line">        list.add(person[<span class="number">1</span>], person);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[people.length][]);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：134AC 但是时间比较长、135 看了部分题解 AC、860AC（但是 HashMap）、406 不会&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-14 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十八天-122买卖股票的最佳时机II、55 跳跃游戏、45跳跃游戏II、1005K次取反后最大化的数组和</title>
    <link href="https://kiml.github.io/posts/8d31312e/"/>
    <id>https://kiml.github.io/posts/8d31312e/</id>
    <published>2024-06-14T01:01:01.000Z</published>
    <updated>2024-06-20T09:46:57.556Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：122AC，55 看了题解 AC，45AC，题解代码更简单一点</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-14 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="122-买卖股票的最佳时机-II">122 买卖股票的最佳时机 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii" >https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii<i class="fas fa-external-link-alt"></i></a>)</p><p>画图很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 就是算所有增区间的值  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prices 列表  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 股票金额  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt;= prices[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            sum +=prices[i] - prices[i - <span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> sum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="55-跳跃游戏">55 跳跃游戏</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/jump-game/" >https://leetcode.cn/problems/jump-game/<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路。看了部分题解，说是求覆盖最大的范围。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (i &gt; maxIndex) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里看了题解优化了一下</span></span><br><span class="line">        maxIndex = Math.max(nums[i] + i, maxIndex);  </span><br><span class="line">        <span class="keyword">if</span> (maxIndex &gt;= nums.length - <span class="number">1</span>)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h3 id="45-跳跃游戏-II">45 跳跃游戏 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/jump-game-ii/" >https://leetcode.cn/problems/jump-game-ii/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 假设每次都跳跃区间内最远的距离  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxJ</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> count;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length;) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (i + nums[i] &gt;= nums.length - <span class="number">1</span>) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">            <span class="keyword">return</span> count;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt;= i + nums[i] &amp;&amp; j &lt; nums.length; j++) &#123;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (j + nums[j] &gt;= maxIndex) &#123;  </span><br><span class="line">                maxIndex = j + nums[j];  </span><br><span class="line">                maxJ = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        count++;  </span><br><span class="line">        i = maxJ;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1005K-次取反后最大化的数组和">1005K 次取反后最大化的数组和</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations" >https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：可以多次选择同一个数字，返回最大和，说明可以先排序  </span></span><br><span class="line"><span class="comment"> * 1. 从小到大排列， 把所有负数变正  </span></span><br><span class="line"><span class="comment"> * 2. 还有次数剩余。奇数次剩余，就把绝对值最小的翻转一次。  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 翻转次数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">largestSumAfterKNegations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;  </span><br><span class="line">    Arrays.sort(nums);  </span><br><span class="line">    <span class="type">int</span> <span class="variable">minAbs</span> <span class="operator">=</span> Integer.MAX_VALUE;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (Math.abs(nums[i]) &lt; minAbs) &#123;  </span><br><span class="line">            minAbs = Math.min(minAbs, Math.abs(nums[i]));  </span><br><span class="line">            index = i;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            nums[i] = -nums[i];  </span><br><span class="line">            k--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        sum += nums[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>) &#123;  </span><br><span class="line">        sum -= <span class="number">2</span> * nums[index];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> sum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="122-买卖股票的最佳时机-II-2">122 买卖股票的最佳时机 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.html" >https://programmercarl.com/0122.买卖股票的最佳时机II.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="55-跳跃游戏-2">55 跳跃游戏</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0055.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html" >https://programmercarl.com/0055.跳跃游戏.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="45-跳跃游戏-II-2">45 跳跃游戏 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0045.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII.html" >https://programmercarl.com/0045.跳跃游戏II.html<i class="fas fa-external-link-alt"></i></a>)</p><p>题解的思路在于增加覆盖范围。每更新一次覆盖范围，就结果 +1（这里比较绕，但是这样就不用双层循环了）。</p><p>简化版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 当前覆盖的最远距离下标</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 下一步覆盖的最远距离下标</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= end &amp;&amp; end &lt; nums.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">          temp = Math.max(temp, i + nums[i]);</span><br><span class="line">          <span class="comment">// 可达位置的改变次数就是跳跃次数</span></span><br><span class="line">          <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">              end = temp;</span><br><span class="line">              result++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="1005K-次取反后最大化的数组和-2">1005K 次取反后最大化的数组和</h3><p>解析：(<a class="link"   href="https://programmercarl.com/1005.K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C.html" >https://programmercarl.com/1005.K次取反后最大化的数组和.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：122AC，55 看了题解 AC，45AC，题解代码更简单一点&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-14 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十七天-455分发饼干、376摆动序列、53最大子序和</title>
    <link href="https://kiml.github.io/posts/dc3e282a/"/>
    <id>https://kiml.github.io/posts/dc3e282a/</id>
    <published>2024-06-13T01:17:44.000Z</published>
    <updated>2024-06-20T09:47:00.358Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言状态：455AC、376、53 都需要看解析，感觉贪心上来都是一点思路都没有，可能题做的不够多。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-13 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="455-分发饼干">455 分发饼干</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/assign-cookies" >https://leetcode.cn/problems/assign-cookies<i class="fas fa-external-link-alt"></i></a>)</p><p>属于小饼干优先。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] g = &#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>&#125;;  </span><br><span class="line">    <span class="type">int</span>[] s = &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;  </span><br><span class="line">    System.out.println(findContentChildren(g, s));  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 感觉上s从小排序，g从小排序。按序分配就行。  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> g 孩子胃口  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s 饼干数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;  </span><br><span class="line">    Arrays.sort(s);  </span><br><span class="line">    Arrays.sort(g);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; g.length &amp;&amp; j &lt; s.length; j++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (g[i] &lt;= s[j]) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">            i++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="376-摆动序列">376 摆动序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/wiggle-subsequence" >https://leetcode.cn/problems/wiggle-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路。看了一点点解析，画图。把坡删了。（但是又忽略了单调坡的情况，具体题解在看解析部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> nums.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] != nums[<span class="number">1</span>]) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">2</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        count = <span class="number">2</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        count = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">slopePre</span> <span class="operator">=</span> nums[i - <span class="number">1</span>] - nums[i - <span class="number">2</span>];  </span><br><span class="line">        <span class="type">int</span> <span class="variable">slope</span> <span class="operator">=</span> nums[i] - nums[i - <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ((slopePre &gt;= <span class="number">0</span>  &amp;&amp; slope &lt; <span class="number">0</span>) || (slopePre &lt;= <span class="number">0</span> &amp;&amp; slope &gt; <span class="number">0</span>)) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="53-最大子序和">53 最大子序和</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/maximum-subarray" >https://leetcode.cn/problems/maximum-subarray<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路。看了部分解析，说是连续和如果出现负数，直接抛弃，从下一个数开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路是连续和为负，就直接抛弃连续和  </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">        sum += num;  </span><br><span class="line">        max = Math.max(sum, max);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            sum = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> max;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="455-分发饼干-2">455 分发饼干</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.html" >https://programmercarl.com/0455.分发饼干.html<i class="fas fa-external-link-alt"></i></a>)</p><p>有两种思路，大饼干优先满足胃口大的；小饼干优先满足胃口小的。</p><h3 id="376-摆动序列-2">376 摆动序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0376.摆动序列.html<i class="fas fa-external-link-alt"></i></a>)</p><p>思路：</p><ol><li class="lvl-3"><p>怎样算有峰值 <code>(preDiff &gt;= 0  &amp;&amp; curDiff &lt; 0) || (preDiff &lt;= 0 &amp;&amp; curDiff &gt; 0)</code></p></li><li class="lvl-3"><p>数组首怎么计数：默认加上一个平节点，即 preDiff 为 0</p></li><li class="lvl-3"><p>单调坡度有平坡：只在坡度进行更新的时候，才把前一个坡值进行记录</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> nums.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 当前的差值  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">curDiff</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">// 前一个坡的差值  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">preDiff</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        curDiff = nums[i] - nums[i - <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ((preDiff &gt;= <span class="number">0</span>  &amp;&amp; curDiff &lt; <span class="number">0</span>) || (preDiff &lt;= <span class="number">0</span> &amp;&amp; curDiff &gt; <span class="number">0</span>)) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">            <span class="comment">// 只有坡度更新才记录坡值  </span></span><br><span class="line">            preDiff = curDiff;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个偷懒版本是先去重，再找坡。但是要循环两次，时间复杂度变高。</p><h3 id="53-最大子序和-2">53 最大子序和</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.html" >https://programmercarl.com/0053.最大子序和.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言状态：455AC、376、53 都需要看解析，感觉贪心上来都是一点思路都没有，可能题做的不够多。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-13 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
