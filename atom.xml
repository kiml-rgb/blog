<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Theme</title>
  
  <subtitle>Keep theme quick starter</subtitle>
  <link href="https://kiml_rgb.gitee.io/blog/atom.xml" rel="self"/>
  
  <link href="https://kiml_rgb.gitee.io/blog/"/>
  <updated>2023-11-03T01:38:25.390Z</updated>
  <id>https://kiml_rgb.gitee.io/blog/</id>
  
  <author>
    <name>Keep Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>装机-软件安装</title>
    <link href="https://kiml_rgb.gitee.io/blog/2023/11/4640726c232e.html"/>
    <id>https://kiml_rgb.gitee.io/blog/2023/11/4640726c232e.html</id>
    <published>2023-11-02T06:22:08.984Z</published>
    <updated>2023-11-03T01:38:25.390Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>找到工作之后每天就是躺平，好久没有更新技术上的内容了，之前学的好多东西也忘了……甚至md语法都忘了好多（每天CRUD，但是也很消耗精力。必须要不断学习，好痛苦，什么时候能退休😢）趁着618配了一台新电脑，顺便用半个多月的时间用新电脑打游戏。。。正好最近在装软件，整理一下装机要注意的事，以及一些必备软件，便于后面再次装机使用。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">23.06.24 初始记录</span><br><span class="line">23.07.02 IDEA常用插件 + 基本设置</span><br><span class="line">23.07.09 编程环境Java + MySQL</span><br><span class="line">23.07.11 Git</span><br><span class="line">23.08.28 Maven</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初始装机</h1><p>这部分都是照着b站上的视频完成的。总之时间就分两大块，把零件装上去，理线。具体可参照以下视频：<a class="link"   href="https://www.bilibili.com/video/BV1UU4y1c74o/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a8ddc837b7094cb5958404fa24c71cac" >B站 赵德柱装机<i class="fas fa-external-link-alt"></i></a></p><h1>系统安装</h1><p>系统安装需要准备一个U盘装系统。具体步骤可以参照以下视频：<a class="link"   href="https://www.bilibili.com/video/BV1UP4y1L7io/?spm_id_from=333.337.search-card.all.click&amp;vd_source=a8ddc837b7094cb5958404fa24c71cac" >B站 赵德柱装系统<i class="fas fa-external-link-alt"></i></a>安装系统完毕第一件事就是去对应官网安装对应驱动，这个依据配置不同，需要下载的东西也不一样。可以检查以下项目的驱动是否安装，每项都需要到对应的官网去下载对应的驱动包：</p><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox0"><label for="checkbox0">cpu驱动</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox1"><label for="checkbox1">主板驱动（涉及较多）</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox2"><label for="checkbox2">显卡驱动</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox3"><label for="checkbox3">鼠标驱动（调光需要）</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox4"><label for="checkbox4">键盘驱动（调光需要）</label></p></li></ul><h1>软件安装</h1><h2 id="常用软件">常用软件</h2><h3 id="Office全家桶">Office全家桶</h3><p>这个直接登录原来的微软账户就可以安装了，之前买笔记本有配有家庭版可以直接使用。有的笔记本没有送，这个需要注意原来的不要卸载，不然重新下载比较麻烦（这是个付费软件）。<s>直接去买个激活码就行</s></p><h3 id="Steam"><a class="link"   href="https://store.steampowered.com/" >Steam<i class="fas fa-external-link-alt"></i></a></h3><p>装机第一件事</p><h3 id="UU加速器"><a class="link"   href="https://uu.163.com/" >UU加速器<i class="fas fa-external-link-alt"></i></a></h3><p>用了这么多，最常用的还是这个，加速商店是足够用了，想要加速游戏可以进一步去贴吧下载</p><h3 id="Chrome"><a class="link"   href="https://www.google.cn/intl/zh-CN/chrome/" >Chrome<i class="fas fa-external-link-alt"></i></a></h3><p>插件就不提供了，自己后续需要再搜，最好还是能整个账号，不然每次装机都要重新把收藏夹的导出来有点麻烦。</p><h3 id="Snipaste"><a class="link"   href="https://zh.snipaste.com/" >Snipaste<i class="fas fa-external-link-alt"></i></a></h3><p>很好用的截屏软件，U盘里带有安装包，直接解压缩，开启后就可以F1截图了</p><h3 id="ScreenToGif"><a class="link"   href="https://www.screentogif.com/" >ScreenToGif<i class="fas fa-external-link-alt"></i></a></h3><p>制作Gif的软件，以前下载过但是没有用到的机会</p><h3 id="ToDesk"><a class="link"   href="https://www.todesk.com/" >ToDesk<i class="fas fa-external-link-alt"></i></a></h3><p>远程连接工具，不想背电脑回家就带这个</p><h3 id="Obsidian"><a class="link"   href="https://obsidian.md/" >Obsidian<i class="fas fa-external-link-alt"></i></a></h3><p>目前在用的All in One笔记软件，好用但是太繁琐了，一开始大半时间都浪费在插件和布局上面，目前用着还行，希望后面能完全用起来。当个md编辑器还是不错的。部分常用的基本用法如下：内链：<a href="Obsidian%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95.md">Obsidian基本用法</a>外链：</p><h3 id="Typora"><a class="link"   href="https://typoraio.cn/" >Typora<i class="fas fa-external-link-alt"></i></a></h3><p>一款 Markdown 编辑器和阅读器。更便捷的浏览工具。</p><h2 id="网盘">网盘</h2><h3 id="百度网盘"><a class="link"   href="http://pan.baidu.com/" >百度网盘<i class="fas fa-external-link-alt"></i></a></h3><p>之前参加活动，容量已经到5T了，但是不充会员完全没法使用，现在就是一个吉祥物的存在，有时候网上购买资源会发网盘链接，还是需要下载一个软件。</p><h3 id="阿里云盘"><a class="link"   href="https://www.aliyundrive.com/" >阿里云盘<i class="fas fa-external-link-alt"></i></a></h3><p>需要备用一个</p><h2 id="编程专用">编程专用</h2><h3 id="开发环境">开发环境</h3><h4 id="Java"><a class="link"   href="https://www.oracle.com/cn/java/technologies/downloads/" >Java<i class="fas fa-external-link-alt"></i></a></h4><p>目前用的还是1.8版本，在U盘内存了常用的几版JDK。有安装包双击下载就行，下载之后需要配置一下环境变量</p><h4 id="MySQL"><a class="link"   href="https://downloads.mysql.com/archives/installer/" >MySQL<i class="fas fa-external-link-alt"></i></a></h4><p>目前使用的是5.7.20版本，官网下载就行。同样也需要配置环境变量。</p><h4 id="Redis"><a href="">Redis</a></h4><p>安装与SpringBoot下的使用方法如下：内链：<a href="Spring%20Data%20Redis.md">Spring Data Redis</a><br>外链：<a href="">Spring Data Redis</a></p><h4 id="Maven"><a class="link"   href="https://maven.apache.org/download.cgi" >Maven<i class="fas fa-external-link-alt"></i></a></h4><p>一个Java项目管理工具，window需要官网下载可用的.zip包，之后解压到一个没有中文没有空格的路径下，同时也需要配置相应的环境变量。（可能出现IDEA不适配需要降低maven版本，当前IDEA 2020.3.2，可以安装Maven 3.6.3）打开安装目录<code>conf/settings.xml</code>文件，进行以下两项配置。<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/%E8%A3%85%E6%9C%BA-%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/image.dbc7x4qo3qw.webp"                      alt=""                ><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/%E8%A3%85%E6%9C%BA-%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/image.4fgykq5m7x40.webp"                      alt=""                ></p><h3 id="开发工具">开发工具</h3><h4 id="IntelliJ-IDEA">IntelliJ IDEA</h4><p>这个不用多说，U盘里存了一个可用的破解版，从大学用到现在了。安装后还需要进行一些常用的设置。具体可以参考以下内链：[[IntelliJ IDEA常用设置]]<br>外链：<a href="">IntelliJ IDEA常用设置</a></p><h4 id="Tabby"><a class="link"   href="https://github.com/Eugeny/tabby" >Tabby<i class="fas fa-external-link-alt"></i></a></h4><p>一款终端工具，之前用的一直是FinalShell，后来想转成XSHELL，才知道 <a class="link"   href="https://www.xshell.com/zh/free-for-home-school/" >XSHELL &amp; XFTP<i class="fas fa-external-link-alt"></i></a>的家庭版是免费的，后来是看博客，知道了一款22年的终端Tabby（不过这么多具体哪个好用确实也是不太了解，换成这个的原因主要是他可以结合远程连接和远程传输两块的内容。也看到把数据库连接，服务器监控，终端都结合在一起的工具，但是数据库工具还是比较习惯用navicat，所以暂时决定是先把终端工具换成Tabby）具体使用步骤参考（后面有时间再整理到自己的笔记里面吧）：(<a class="link"   href="https://www.macrozheng.com/tool/tabby_start.html" >https://www.macrozheng.com/tool/tabby_start.html<i class="fas fa-external-link-alt"></i></a>)</p><h4 id="Navicat"><a class="link"   href="https://www.navicat.com.cn/download/navicat-premium" >Navicat<i class="fas fa-external-link-alt"></i></a></h4><p>一款好用的数据库管理工具，提供14天免费试用。<s>但是这种一般都是有破解的，网盘里存了一个（会被杀毒软件杀掉）</s></p><h4 id="Git"><a class="link"   href="https://gitforwindows.org/" >Git<i class="fas fa-external-link-alt"></i></a></h4><p>版本控制工具。（目前使用的博客工具Hexo也是依靠Git部署）具体使用介绍如下内链：[[Git及常用命令]]<br>外链：<a href="">Git及常用命令</a></p><h3 id="其他">其他</h3><h4 id="翻墙"><a href="">翻墙</a></h4>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
找到工作之后每天就是躺平，好久没有更新技术上的内容了，之前学的好多东西也忘了……甚至md语法都忘了好多（每天CRUD，但是也很消耗精力。必须要不断学习，好痛苦，什么时候能退休😢）趁着618配了一台新电脑，顺便用半个多月的时间用新电脑打游戏。。。正好最近在装软件，整理一下装机要注意的事，以及一些必备软件，便于后面再次装机使用。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;23.06.24 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.07.02 IDEA常用插件 + 基本设置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.07.09 编程环境Java + MySQL&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.07.11 Git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.08.28 Maven&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="环境搭建" scheme="https://kiml_rgb.gitee.io/blog/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="工具" scheme="https://kiml_rgb.gitee.io/blog/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>Spring Data Redis</title>
    <link href="https://kiml_rgb.gitee.io/blog/2023/08/a52deee36df0.html"/>
    <id>https://kiml_rgb.gitee.io/blog/2023/08/a52deee36df0.html</id>
    <published>2023-08-29T15:25:03.000Z</published>
    <updated>2023-11-03T01:38:25.390Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>Spring Data Redis 是Spring 框架提供的用于操作Redis的方式。涵盖Redis的安装、Spring Cache结合Redis的使用、Redis连接池的使用和RedisTemplate的使用等内容。</p></li><li class="lvl-2"><p>参考文章<br><a class="link"   href="https://www.macrozheng.com/mall/reference/spring_data_redis.html" >Spring Data Redis 最佳实践！<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23.08.29 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>Redis安装</h1><h2 id="Linux">Linux</h2><ul class="lvl-0"><li class="lvl-2"><p>下载Redis5.0的Docker镜像</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull redis:5.0</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>使用Docker命令启动Redis容器</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 6379:6379 --name redis \</span><br><span class="line">-v /mydata/redis/data:/data \</span><br><span class="line">-d redis:5.0 redis-server --appendonly yes</span><br></pre></td></tr></table></figure><h2 id="Windows">Windows</h2><ul class="lvl-0"><li class="lvl-2"><p>下载Windows版本的<a class="link"   href="https://github.com/MicrosoftArchive/redis/releases" >Redis<i class="fas fa-external-link-alt"></i></a><br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Spring-Data-Redis/image.2gf5snnqm6kg.webp"                      alt=""                ></p></li><li class="lvl-2"><p>下载后直接解压</p></li><li class="lvl-2"><p>在当前地址栏输入cmd命令，执行对应的redis启动命令</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注册服务</span></span><br><span class="line">redis-server --service-install redis.windows.conf</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">redis-server --service-start</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止服务</span></span><br><span class="line">redis-server --service-stop</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除服务</span></span><br><span class="line">redis-server --service-uninstall</span><br></pre></td></tr></table></figure><h1>Spring Cache 操作Redis</h1><h2 id="Spring-Cache-简介">Spring Cache 简介</h2><blockquote><p>当Spring Boot 结合Redis来作为缓存使用时，最简单的方式就是使用Spring Cache了，使用它我们无需知道Spring中对Redis的各种操作，仅仅通过它提供的@Cacheable 、@CachePut 、@CacheEvict 、@EnableCaching等注解就可以实现缓存功能。</p></blockquote><h2 id="常用注解">常用注解</h2><h3 id="EnableCaching">@EnableCaching</h3><p>开启缓存功能，一般放在启动类上。</p><h3 id="Cacheable">@Cacheable</h3><p>使用该注解的方法当缓存存在时，会从缓存中获取数据而不执行方法，当缓存不存在时，会执行方法并把返回结果存入缓存中。<code>一般使用在查询方法上</code>，可以设置如下属性：</p><ul class="lvl-0"><li class="lvl-2"><p>value：缓存名称（必填），指定缓存的命名空间；</p></li><li class="lvl-2"><p>key：用于设置在命名空间中的缓存key值，可以使用SpEL表达式定义；</p></li><li class="lvl-2"><p>unless：条件符合则不缓存；</p></li><li class="lvl-2"><p>condition：条件符合则缓存。</p></li></ul><h3 id="CachePut">@CachePut</h3><p>使用该注解的方法每次执行时都会把返回结果存入缓存中。<code>一般使用在新增方法上</code>，可以设置如下属性：</p><ul class="lvl-0"><li class="lvl-2"><p>value：缓存名称（必填），指定缓存的命名空间；</p></li><li class="lvl-2"><p>key：用于设置在命名空间中的缓存key值，可以使用SpEL表达式定义；</p></li><li class="lvl-2"><p>unless：条件符合则不缓存；</p></li><li class="lvl-2"><p>condition：条件符合则缓存。</p></li></ul><h3 id="CacheEvict">@CacheEvict</h3><p>使用该注解的方法执行时会清空指定的缓存。<code>一般使用在更新或删除方法上</code>，可以设置如下属性：</p><ul class="lvl-0"><li class="lvl-2"><p>value：缓存名称（必填），指定缓存的命名空间；</p></li><li class="lvl-2"><p>key：用于设置在命名空间中的缓存key值，可以使用SpEL表达式定义；</p></li><li class="lvl-2"><p>condition：条件符合则缓存。</p></li></ul><h2 id="使用步骤">使用步骤</h2><h3 id="基础步骤">基础步骤</h3><ul class="lvl-0"><li class="lvl-2"><p>在pom.xml中添加项目依赖：</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>修改配置文件application.yml，添加Redis的连接配置</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">192.168</span><span class="number">.6</span><span class="number">.139</span> <span class="comment"># Redis服务器地址</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span> <span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span> <span class="comment"># Redis服务器连接端口</span></span><br><span class="line">    <span class="attr">password:</span> <span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">1000ms</span> <span class="comment"># 连接超时时间</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>在启动类上添加@EnableCaching注解启动缓存功能</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>类中实现缓存功能</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PmsBrandService实现类</span></span><br><span class="line"><span class="comment"> * Created by macro on 2019/4/19.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PmsBrandServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PmsBrandService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PmsBrandMapper brandMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(value = RedisConfig.REDIS_KEY_DATABASE, key = &quot;&#x27;pms:brand:&#x27;+#id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Long id, PmsBrand brand)</span> &#123;</span><br><span class="line">        brand.setId(id);</span><br><span class="line">        <span class="keyword">return</span> brandMapper.updateByPrimaryKeySelective(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CacheEvict(value = RedisConfig.REDIS_KEY_DATABASE, key = &quot;&#x27;pms:brand:&#x27;+#id&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brandMapper.deleteByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Cacheable(value = RedisConfig.REDIS_KEY_DATABASE, key = &quot;&#x27;pms:brand:&#x27;+#id&quot;, unless = &quot;#result==null&quot;)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PmsBrand <span class="title function_">getItem</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> brandMapper.selectByPrimaryKey(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="存储JSON格式数据">存储JSON格式数据</h3><blockquote><p>给RedisTemplate设置JSON格式的序列化器，并通过配置RedisCacheConfiguration设置超时时间来实现以上需求，此时还需要去除启动类上的@EnableCaching注解，具体配置类RedisConfig代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis配置类</span></span><br><span class="line"><span class="comment"> * Created by macro on 2020/3/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> <span class="keyword">extends</span> <span class="title class_">CachingConfigurerSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis数据库自定义key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">final</span> String REDIS_KEY_DATABASE=<span class="string">&quot;mall&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;Object&gt; serializer = redisSerializer();</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        redisTemplate.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setValueSerializer(serializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        redisTemplate.setHashValueSerializer(serializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisSerializer&lt;Object&gt; <span class="title function_">redisSerializer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建JSON序列化器</span></span><br><span class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; serializer = <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>&lt;&gt;(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        serializer.setObjectMapper(objectMapper);</span><br><span class="line">        <span class="keyword">return</span> serializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisCacheManager <span class="title function_">redisCacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class="line">        <span class="type">RedisCacheWriter</span> <span class="variable">redisCacheWriter</span> <span class="operator">=</span> RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory);</span><br><span class="line">        <span class="comment">//设置Redis缓存有效期为1天</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">redisCacheConfiguration</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer())).entryTtl(Duration.ofDays(<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RedisCacheManager</span>(redisCacheWriter, redisCacheConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Redis连接池">使用Redis连接池</h3><blockquote><p>SpringBoot 1.5.x版本Redis客户端默认是Jedis实现的，SpringBoot 2.x版本中默认客户端是用Lettuce实现的，我们先来了解下Jedis和Lettuce客户端。</p></blockquote><h4 id="Jedis-vs-Lettuce">Jedis vs Lettuce</h4><p>Jedis在实现上是直连Redis服务，多线程环境下非线程安全，除非使用连接池，为每个 RedisConnection 实例增加物理连接。</p><p>Lettuce是一种可伸缩，线程安全，完全非阻塞的Redis客户端，多个线程可以共享一个RedisConnection，它利用Netty NIO框架来高效地管理多个连接，从而提供了异步和同步数据访问方式，用于构建非阻塞的反应性应用程序。</p><h4 id="使用步骤-2">使用步骤</h4><ul class="lvl-0"><li class="lvl-2"><p>修改application.yml添加Lettuce连接池配置，用于配置线程数量和阻塞等待时间</p></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span> <span class="comment"># 连接池最大连接数</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span> <span class="comment"># 连接池最大空闲连接数</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span> <span class="comment"># 连接池最小空闲连接数</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span> <span class="comment"># 连接池最大阻塞等待时间，负值表示没有限制</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>由于SpringBoot 2.x中默认并没有使用Redis连接池，所以需要在pom.xml中添加commons-pool2的依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>不添加依赖则报错</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.NoClassDefFoundError: org/apache/commons/pool2/impl/GenericObjectPoolConfig</span><br><span class="line">at org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration<span class="variable">$LettucePoolingClientConfiguYrRUIQWOPrationBuilder</span>.&lt;init&gt;(LettucePoolingClientConfiguration.java:84) ~[spring-data-redis-2.1.5.RELEASE.jar:2.1.5.RELEASE]</span><br><span class="line">at org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration.builder(LettucePoolingClientConfiguration.java:48) ~[spring-data-redis-2.1.5.RELEASE.jar:2.1.5.RELEASE]</span><br><span class="line">at org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration<span class="variable">$PoolBuilderFactory</span>.createBuilder(LettuceConnectionConfiguration.java:149) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">at org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration.createBuilder(LettuceConnectionConfiguration.java:107) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">at org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration.getLettuceClientConfiguration(LettuceConnectionConfiguration.java:93) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">at org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration.redisConnectionFactory(LettuceConnectionConfiguration.java:74) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">at org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$$EnhancerBySpringCGLIB$<span class="variable">$5caa7e47</span>.CGLIB$redisConnectionFactory<span class="variable">$0</span>(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">at org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$$EnhancerBySpringCGLIB$$5caa7e47$$FastClassBySpringCGLIB$<span class="variable">$b8ae2813</span>.invoke(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.context.annotation.ConfigurationClassEnhancer<span class="variable">$BeanMethodInterceptor</span>.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">at org.springframework.boot.autoconfigure.data.redis.LettuceConnectionConfiguration$$EnhancerBySpringCGLIB$<span class="variable">$5caa7e47</span>.redisConnectionFactory(&lt;generated&gt;) ~[spring-boot-autoconfigure-2.1.3.RELEASE.jar:2.1.3.RELEASE]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_91]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_91]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_91]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_91]</span><br><span class="line">at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.1.5.RELEASE.jar:5.1.5.RELEASE]</span><br><span class="line">... 111 common frames omitted</span><br></pre></td></tr></table></figure><h3 id="自由操作Redis">自由操作Redis</h3><blockquote><p>使用RedisTemplate自由缓存方法中产生的中间值</p></blockquote><h4 id="RedisService">RedisService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis操作Service</span></span><br><span class="line"><span class="comment"> * Created by macro on 2020/3/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">getExpire</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RedisServiceImpl">RedisServiceImpl</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis操作实现类</span></span><br><span class="line"><span class="comment"> * Created by macro on 2020/3/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">index</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="RedisController">RedisController</h4><blockquote><p>简单测试在Controller中进行操作</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Redis测试Controller</span></span><br><span class="line"><span class="comment"> * Created by macro on 2020/3/3.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;RedisController&quot;, description = &quot;Redis测试&quot;)</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> PmsBrandService brandService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;测试简单缓存&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/simpleTest&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;PmsBrand&gt; <span class="title function_">simpleTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;PmsBrand&gt; brandList = brandService.list(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">PmsBrand</span> <span class="variable">brand</span> <span class="operator">=</span> brandList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;redis:simple:&quot;</span> + brand.getId();</span><br><span class="line">        redisService.set(key, brand);</span><br><span class="line">        <span class="type">PmsBrand</span> <span class="variable">cacheBrand</span> <span class="operator">=</span> (PmsBrand) redisService.get(key);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(cacheBrand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;测试Hash结构的缓存&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/hashTest&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;PmsBrand&gt; <span class="title function_">hashTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;PmsBrand&gt; brandList = brandService.list(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">PmsBrand</span> <span class="variable">brand</span> <span class="operator">=</span> brandList.get(<span class="number">0</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;redis:hash:&quot;</span> + brand.getId();</span><br><span class="line">        Map&lt;String, Object&gt; value = BeanUtil.beanToMap(brand);</span><br><span class="line">        redisService.hSetAll(key, value);</span><br><span class="line">        Map&lt;Object, Object&gt; cacheValue = redisService.hGetAll(key);</span><br><span class="line">        <span class="type">PmsBrand</span> <span class="variable">cacheBrand</span> <span class="operator">=</span> BeanUtil.mapToBean(cacheValue, PmsBrand.class, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(cacheBrand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;测试Set结构的缓存&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/setTest&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Set&lt;Object&gt;&gt; <span class="title function_">setTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;PmsBrand&gt; brandList = brandService.list(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;redis:set:all&quot;</span>;</span><br><span class="line">        redisService.sAdd(key, (Object[]) ArrayUtil.toArray(brandList, PmsBrand.class));</span><br><span class="line">        redisService.sRemove(key, brandList.get(<span class="number">0</span>));</span><br><span class="line">        Set&lt;Object&gt; cachedBrandList = redisService.sMembers(key);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(cachedBrandList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;测试List结构的缓存&quot;)</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/listTest&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;List&lt;Object&gt;&gt; <span class="title function_">listTest</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;PmsBrand&gt; brandList = brandService.list(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;redis:list:all&quot;</span>;</span><br><span class="line">        redisService.lPushAll(key, (Object[]) ArrayUtil.toArray(brandList, PmsBrand.class));</span><br><span class="line">        redisService.lRemove(key, <span class="number">1</span>, brandList.get(<span class="number">0</span>));</span><br><span class="line">        List&lt;Object&gt; cachedBrandList = redisService.lRange(key, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="keyword">return</span> CommonResult.success(cachedBrandList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
Spring Data Redis 是Spring 框架提供的用于操作Redis的方式。涵盖Redis的安装、Spring Cache结合Redis的使用、Redis连接池的使用和RedisTemplate的使用等内容。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;参考文章&lt;br&gt;
&lt;a class=&quot;link&quot;   href=&quot;https://www.macrozheng.com/mall/reference/spring_data_redis.html&quot; &gt;Spring Data Redis 最佳实践！&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;23.08.29 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml_rgb.gitee.io/blog/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml_rgb.gitee.io/blog/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Redis" scheme="https://kiml_rgb.gitee.io/blog/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Git及常用命令</title>
    <link href="https://kiml_rgb.gitee.io/blog/2023/07/4a9f7c37553f.html"/>
    <id>https://kiml_rgb.gitee.io/blog/2023/07/4a9f7c37553f.html</id>
    <published>2023-07-11T15:29:25.000Z</published>
    <updated>2023-11-03T01:38:25.390Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>Git部分知识以及常用命令</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">23.07.11 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>安装</h1><p>之前在写 [[Obsidian + Git + Hexo + 图床 = Blog + 个人笔记体系]]这篇笔记的时候有提到过Git的安装。这里就直接把步骤贴过来，具体安装地址(<a class="link"   href="https://git-scm.com/" >https://git-scm.com/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>访问 git 官方地址，下载对应的安装包，进行安装（简单的点击下一步）。</p></li><li class="lvl-3"><p>安装好之后，鼠标右键可以看到：Git Bash Here，点击后打开了。</p></li><li class="lvl-3"><p>输入：<code>git --version</code><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230222164201.2q5arauzuko0.webp"                      alt="Pasted-image-20230222164201"                ><br>出现版本号说明安装成功。</p></li></ol><h1>git配置 SSH key</h1><p>Git是分布式的代码管理工具，远程的代码管理是基于SSH的，所以要使用远程的Git则需要SSH的配置。一、设置Git的user name和email：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="string">&quot;kiml&quot;</span></span>  </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email <span class="string">&quot;1162278448@qq.com&quot;</span></span></span><br></pre></td></tr></table></figure><p>二、生成SSH密钥内链：[[Obsidian + Git + Hexo + 图床 = Blog + 个人笔记体系#git配置 SSH key]]<br>外链：<a class="link"   href="https://kiml_rgb.gitee.io/blog/2023/02/6870bf8bd223.html" >Obsidian + Git + Hexo + 图床 = Blog + 个人笔记体系<i class="fas fa-external-link-alt"></i></a></p><h1>git工具</h1><h2 id="GitHub-Desktop"><a class="link"   href="https://desktop.github.com/" >GitHub Desktop<i class="fas fa-external-link-alt"></i></a></h2><blockquote><p>平时更多使用IntelliJ IDEA自带的git工具，偶然发现这个工具，近期打算使用官方文档：[<a class="link"   href="https://docs.github.com/zh/desktop/installing-and-configuring-github-desktop/overview/getting-started-with-github-desktop" >https://docs.github.com/zh/desktop/installing-and-configuring-github-desktop/overview/getting-started-with-github-desktop<i class="fas fa-external-link-alt"></i></a>]</p></blockquote><h1>常用命令</h1><h2 id="clone到本地">clone到本地</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git@gitee.com:kiml_rgb/blog.git</span><br></pre></td></tr></table></figure><h2 id="提交代码">提交代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入项目工程目录</span></span><br><span class="line">cd hello/</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将当前修改的文件添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交代码</span></span><br><span class="line">git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><h2 id="推送代码">推送代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><h2 id="拉取代码">拉取代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><h2 id="创建并提交分支">创建并提交分支</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换并从当前分支创建一个dev分支</span></span><br><span class="line">git checkout -b dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将新创建的dev分支推送到远程仓库</span></span><br><span class="line">git push origin dev</span><br></pre></td></tr></table></figure><h2 id="其他常用命令">其他常用命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到dev分支</span></span><br><span class="line">git checkout dev</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看本地仓库文件状况</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看本地所有分支</span></span><br><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看提交记录</span></span><br><span class="line">git log</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
Git部分知识以及常用命令&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;23.07.11 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="环境搭建" scheme="https://kiml_rgb.gitee.io/blog/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Git" scheme="https://kiml_rgb.gitee.io/blog/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA常用设置</title>
    <link href="https://kiml_rgb.gitee.io/blog/2023/07/82fdef6c011a.html"/>
    <id>https://kiml_rgb.gitee.io/blog/2023/07/82fdef6c011a.html</id>
    <published>2023-07-02T09:39:31.000Z</published>
    <updated>2023-11-03T01:38:25.390Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>IntelliJ IDEA常用设置</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">23.07.02 初始记录</span><br><span class="line">23.07.09 基本设置（初始）</span><br><span class="line">23.07.16 基本设置完成 推荐插件（初始）</span><br><span class="line">23.08.28 三个插件的添加</span><br></pre></td></tr></table></figure><span id="more"></span><h1>基本设置</h1><h2 id="基本风格及UI字体大小">基本风格及UI字体大小</h2><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.5zsc16mptw80.webp"                      alt=""                ></p><h2 id="设置打开IDEA不直接打开项目">设置打开IDEA不直接打开项目</h2><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.76qez6t5u3o0.webp"                      alt=""                ><br>这样默认打开IDEA时就是如下画面：<img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.e3ljr81ydg0.webp"                      alt=""                ><br>点击Customize里的All settings，就可以为所有新项目设置配置。</p><h2 id="设置项目文件编码格式（很重要）">设置项目文件编码格式（很重要）</h2><p>建议将所有都设置成UTF-8格式<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.4mt50kakw6m0.webp"                      alt=""                ></p><h2 id="设置代码提示的匹配格式">设置代码提示的匹配格式</h2><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.6oylhmww6fc0.webp"                      alt=""                ></p><h2 id="设置新建类文件的注释模板">设置新建类文件的注释模板</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @author $&#123;USER&#125;</span><br><span class="line"> * @date: $&#123;DATE&#125; $&#123;TIME&#125;</span><br><span class="line"> * @description:</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.19n6mdsu3yio.webp"                      alt=""                ></p><h2 id="设置多个类同时打开并不重叠隐藏">设置多个类同时打开并不重叠隐藏</h2><p><img                       lazyload                     alt="image"                     data-src="https://jsd.cdn.zzko.cn/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.r309flmzils.png"                      alt=""                ></p><h2 id="设置maven配置">设置maven配置</h2><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.3wwoo2np8jo0.webp"                      alt=""                ></p><h2 id="设置SQL自动补全">设置SQL自动补全</h2><ul class="lvl-0"><li class="lvl-2"><p>启用IDEA的database插件</p></li><li class="lvl-2"><p>针对项目进行SQL Dialects配置<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.3t2qjdicqn20.webp"                      alt=""                ></p></li></ul><h2 id="基本设置导出">基本设置导出</h2><p>为了更方便的迁移IDEA，可以将基本设置导出。<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/IntelliJ-IDEA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE/image.xaiqk7ez5cw.webp"                      alt=""                ></p><h1>推荐插件</h1><h2 id="Lombok">Lombok</h2><blockquote><p>通过注解不再需要编写getter、setter、equals等方法，可以在编译时自动生成，开发时常用的插件。IDEA在目前使用的版本中已经内置，SpringBoot 2.1.x之后的版本也在Starter中内置了Lombok依赖。</p></blockquote><h3 id="集成">集成</h3><p>在项目的pom.xml文件中可以添加Lombok依赖，SpringBoot 2.1.x版本后无需指定Lombok版本，SpringBoot在<code>spring-boot-dependencies</code>中已经内置。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--lombok依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatisX"><a class="link"   href="https://baomidou.com/pages/ba5b24/" >MyBatisX<i class="fas fa-external-link-alt"></i></a></h2><blockquote><p>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。</p></blockquote><h2 id="Maven-Helper">Maven Helper</h2><blockquote><p>可以右键项目快速完成项目maven的各个阶段。<br>pom.xml文件点击后，显示右边多了<code>Dependency Analyzer</code>的Tab选项，可以查看依赖冲突。同时也可以快速排除冲突的文件。</p></blockquote><h2 id="Git-Commit-Template">Git Commit Template</h2><blockquote><p>为git的提交提供模板。例子：fix(DAO):用户查询缺少username属性 feat(Controller):用户查询接口开发</p></blockquote><p>参数详解：</p><table><thead><tr><th>参数</th><th>类型</th><th>shuoming</th></tr></thead><tbody><tr><td>type(必须)</td><td></td><td>用于说明git commit的类别，只允许使用下面的标识。</td></tr><tr><td></td><td>feat</td><td>新功能（feature）</td></tr><tr><td></td><td>fix/to</td><td>修复bug，可以是QA发现的BUG，也可以是研发自己发现的BUG。</td></tr><tr><td></td><td>fix</td><td>产生diff并自动修复此问题。适合于一次提交直接修复问题</td></tr><tr><td></td><td>to</td><td>只产生diff不自动修复此问题。适合于多次提交。最终修复问题提交时使用fix。</td></tr><tr><td></td><td>docs</td><td>文档（documentation）</td></tr><tr><td></td><td>style</td><td>格式（不影响代码运行的变动）。</td></tr><tr><td></td><td>refactor</td><td>重构（即不是新增功能，也不是修改bug的代码变动）。</td></tr><tr><td></td><td>perf</td><td>优化相关，比如提升性能、体验。</td></tr><tr><td></td><td>test</td><td>增加测试。</td></tr><tr><td></td><td>chore</td><td>构建过程或辅助工具的变动。</td></tr><tr><td></td><td>revert</td><td>回滚到上一个版本。</td></tr><tr><td></td><td>merge</td><td>代码合并。</td></tr><tr><td></td><td>sync</td><td>同步主线或分支的Bug。</td></tr><tr><td>scope(可选)</td><td></td><td>scope用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</td></tr><tr><td>subject(必须)</td><td></td><td>subject是commit目的的简短描述，不超过50个字符</td></tr></tbody></table><h2 id="Statistic">Statistic</h2><blockquote><p>代码统计器</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
IntelliJ IDEA常用设置&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;23.07.02 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.07.09 基本设置（初始）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.07.16 基本设置完成 推荐插件（初始）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.08.28 三个插件的添加&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="环境搭建" scheme="https://kiml_rgb.gitee.io/blog/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="IDEA" scheme="https://kiml_rgb.gitee.io/blog/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Obsidian + Git + Hexo + 图床 = Blog + 个人笔记体系</title>
    <link href="https://kiml_rgb.gitee.io/blog/2023/02/6870bf8bd223.html"/>
    <id>https://kiml_rgb.gitee.io/blog/2023/02/6870bf8bd223.html</id>
    <published>2023-02-27T08:59:50.000Z</published>
    <updated>2023-11-02T06:25:51.682Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>之前有过基于 Hexo 的博客搭建经历，但是由于时间繁忙，加上后续学习了解到的笔记软件，拥有我想要的全局搜索功能，而且比博客的格式、排版更加吸引人，就放弃了之前搭建的博客。但是出来找工作感觉拥有一个自己的技术博客会比较占优势，因此打算在笔记的基础上，加上原来的 Hexo 快速生成，转成技术博客输出。</p></li><li class="lvl-2"><p>参考文章</p></li></ul><blockquote><p><a class="link"   href="https://www.cnblogs.com/chenlove/p/15058170.html" >【保姆级】利用Github搭建自己的个人博客，看完就会<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://segmentfault.com/a/1190000042111566" >Hexo + Obsidian + Git 完美的博客部署与编辑方案<i class="fas fa-external-link-alt"></i></a></p></blockquote><ul class="lvl-0"><li class="lvl-2">更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">22.12.11 初始记录(修改预计开始日期为元旦)</span><br><span class="line">23.02.24 环境部署，个人博客绑定到 Gitee Pages</span><br><span class="line">23.02.27 Obsidian 整合 等待Gitee Pages审核ing</span><br></pre></td></tr></table></figure><span id="more"></span><h1>环境部署</h1><h2 id="安装git"><a class="link"   href="https://git-scm.com/" >安装git<i class="fas fa-external-link-alt"></i></a></h2><ol><li class="lvl-3"><p>访问 git 官方地址，下载对应的安装包，进行安装（简单的点击下一步）。</p></li><li class="lvl-3"><p>安装好之后，鼠标右键可以看到：Git Bash Here，点击后打开了。</p></li><li class="lvl-3"><p>输入：<code>git --version</code><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230222164201.2q5arauzuko0.webp"                      alt="Pasted-image-20230222164201"                ><br>出现版本号说明安装成功。</p></li></ol><h2 id="安装node-js"><a class="link"   href="https://nodejs.org/en/download/" >安装node.js<i class="fas fa-external-link-alt"></i></a></h2><ol><li class="lvl-3"><p>访问 node.js 官方地址，下载对应的安装包，进行安装（简单的点击下一步）。</p></li><li class="lvl-3"><p>安装好之后，配置环境变量，并在终端里面输入：<code>node -v</code><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230222164727.5b7mv0xizow0.webp"                      alt="Pasted-image-20230222164727"                ><br>出现版本号说明安装成功。</p></li></ol><h2 id="安装-Hexo">安装 Hexo</h2><ol><li class="lvl-3"><p>安装命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo -g</span><br></pre></td></tr></table></figure><p>测试是否安装成功，命令：<code>hexo -v</code><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230222171451.6693pj6e0xc0.webp"                      alt="Pasted-image-20230222171451"                ><br>出现版本号说明安装成功。</p><ol start="2"><li class="lvl-3"><p>安装 hexo 推送 git 拓展依赖，安装命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><h1>git配置 SSH key</h1><ol><li class="lvl-3"><p>先看本地是否配置好SSH key（命令：<code>cd ~/.ssh</code>）<br>SSH key的保存位置在本地的<code>C:\Users\&#123;你的用户名&#125;\.ssh</code>文件下，如果本地已存在SSH，此步不会有提示，否则出现No such file or directory。如果保存文件下没有文件<code>id_rsa.pub</code> 或 <code>id_dsa.pub</code>则也需要重新生成</p></li><li class="lvl-3"><p>生成SSH key<br>如果没有配置输入生成命令，然后连续回车三次即可：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;邮件地址&quot; #该邮箱地址是绑定github账号的地址</span><br></pre></td></tr></table></figure><h2 id="github">github</h2><ol start="3"><li class="lvl-3"><p>打开SSH key的保存位置，复制id_rsa.pub文件里全部内容，接着打开github主页，点击个人设置，点击左侧的SSH and GPG keys，点击New SSH key<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230223144007.6d3r6yb66x40.webp"                      alt="Pasted-image-20230223144007"                ></p></li><li class="lvl-3"><p>将id_rsa.pub复制的内容粘贴到key中，title随便起一个就行。<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230223144220.182ylahg08ik.webp"                      alt="Pasted-image-20230223144220"                ></p></li><li class="lvl-3"><p>测试是否成功，输入命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>出现<code> You've successfully authenticated, but GitHub does not provide shell access.</code>说明成功</p><ol start="6"><li class="lvl-3"><p>配置账号和密码</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.name <span class="string">&quot;liyunchen&quot;</span> <span class="comment">#你的github用户名</span></span> </span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global user.email <span class="string">&quot;xxx@163.com&quot;</span> <span class="comment">#填写你的github注册邮箱</span></span></span><br></pre></td></tr></table></figure><h2 id="gitee">gitee</h2><blockquote><p>除了Github Pages，也可以把博客搭建在Gitee Pages上，不翻墙的情况下，连接github经常会出现连接不上的情况，所以这次就直接改到Gitee上了</p></blockquote><ol start="3"><li class="lvl-3"><p>同样的配置SSH key，在Gitee的个人设置界面添加公钥<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230223150716.3xkexq2gba00.webp"                      alt="Pasted-image-20230223150716"                ></p></li><li class="lvl-3"><p>测试是否成功，输入命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure><p>出现<code> You've successfully authenticated, but GITEE.COM does not provide shell access.</code>说明成功</p><h1>搭建个人博客</h1><ol><li class="lvl-3"><p>新建一个保存博客的存放目录，进入到本地博客存放目录，初始化个人博客，命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>出现不可获取错误说明github连接失败，再重新执行一遍命令就可以了<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230223155221.7fb02qitno40.webp"                      alt="Pasted-image-20230223155221"                ></p><ol start="2"><li class="lvl-3"><p>生成静态网页，命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>本地预览，命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure><p><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230223155523.44lrgkvzeec0.webp"                      alt="Pasted-image-20230223155523"                ><br>访问<a class="link"   href="http://localhost:4000/" >localhost:4000<i class="fas fa-external-link-alt"></i></a></p><h2 id="github-2">github</h2><ol start="4"><li class="lvl-3"><p>新建一个github仓库，给仓库起个名称，可以为<code>用户名.github.io</code>，这样这个名称就可以作为你github博客的访问地址</p></li><li class="lvl-3"><p>编辑<code>_config.yml</code>，此文件在你博客存放目录下，需要编辑的github地址填写在最后<code>deploy</code>处</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span> </span><br><span class="line"><span class="attr">repository:</span> <span class="comment">#仓库地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span> <span class="comment">#查看自己仓库是master还是main</span></span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>发布到 github，命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>这样就已经把生成的静态文件推送到github仓库去了。</p><h2 id="gitee-2">gitee</h2><ol start="4"><li class="lvl-3"><p>新建一个 gitee 仓库，给仓库起个名称，这里我直接用 blog 作为名称，这样博客的访问地址就是<code>用户名.gitee.io/blog</code></p></li><li class="lvl-3"><p>编辑<code>_config.yml</code>，此文件在你博客存放目录下，文件需要</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span> </span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span> </span><br><span class="line"><span class="attr">repository:</span> <span class="comment">#仓库地址</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">master</span> <span class="comment">#查看自己仓库是master还是main</span></span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>发布到 gitee，命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><ol start="7"><li class="lvl-3"><p>在个人仓库界面，开启 Gitee Pages 服务（第一次使用还要手持身份证拍照的实名认证，蛮无语的，终于知道为什么用的人少了。。。）<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230223172025.531tgq6cyk80.webp"                      alt="Pasted-image-20230223172025"                ></p></li></ol><h1>博客主题（Keep）</h1><blockquote><p>在配置文件里可以看见 <a class="link"   href="https://hexo.io/themes/" >Hexo 主题商店<i class="fas fa-external-link-alt"></i></a>的地址，配置文件中默认的主题为 <code>landscape</code>，不太喜欢打算换掉。原先博客使用的是Next主题，也是使用 Hexo 搭建博客用到最多的主题，但是也用腻了。现在发现一个新的主题 <a class="link"   href="https://keep-docs.xpoet.cn/" >Keep<i class="fas fa-external-link-alt"></i></a>，感觉蛮简洁舒适的，所以这次重新搭建也打算直接换上。</p></blockquote><p>Keep 主题的官方配置文档很详细，在演示博客中有一个<a class="link"   href="https://keep-docs.xpoet.cn/" >使用指南<i class="fas fa-external-link-alt"></i></a>，直接照着配置就行。</p><h1>Obsidian整合</h1><h2 id="Obsidian知识库创建">Obsidian知识库创建</h2><ol><li class="lvl-3"><p>新建一个仓库或将之前的博客文件作为仓库打开<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230227114315.2wl2j9tteei.webp"                      alt="Pasted-image-20230227114315|500"                ></p></li><li class="lvl-3"><p>忽略多余的文件。我们主要是编辑和管理Markdown文件，所以一些多余的文件要忽略掉，这样在知识库里搜索文件、关键字时才不会搜索到多余的，也能有效提高检索效率。打开：设置&gt;文件与链接&gt;Exclude Files<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230227115820.5seds6ee9sk0.webp"                      alt="Pasted-image-20230227115820"                ></p></li><li class="lvl-3"><p>设置新建笔记的存放位置，内部链接类型~~（关闭Wiki链接的使用，因为hexo的解析要求为markdown格式的文件）~~以及附件默认的存放路径<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230227120117.1uritmjiuwps.webp"                      alt="Pasted-image-20230227120117"                ></p></li><li class="lvl-3"><p>在 hexo 项目的 .gitignore 文件中加入如下内容：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.obsidian/workspace</span><br></pre></td></tr></table></figure><h2 id="博客文章的管理">博客文章的管理</h2><blockquote><p>新建文件在 hexo 的默认配置中放在 <code>source/_post</code> 目录下，随着文章数量的增多，文章也会变得难以寻找。因此采用以文件夹来分目录的方式，存放写好的文件。但是这样分类后，还需要手动维护文章开始前的定义文字，去修改文件所在的目录，较为麻烦。</p></blockquote><p>为了省去手动维护 <code>categorys</code> 字段的这个问题，我们可以使用 <a class="link"   href="https://segmentfault.com/a/hexo-auto-category" >hexo-auto-category<i class="fas fa-external-link-alt"></i></a> 这个插件。这个插件在 Hexo 进行 build 的时候会去自动根据文章目录情况来自动修改文章的 <code>categories</code> 信息，更详细的部分可以看<a class="link"   href="https://link.segmentfault.com/?enc=nXk14OhMvqms0swMYP6CPw%3D%3D.A%2BmWEt8PuWft2Nu1h9Xn6kRljuhLjDFDtfqGI2%2By42dp1aDe0RH2VjOp%2FwhUoMbE" >作者的文章<i class="fas fa-external-link-alt"></i></a>。除此之外最好修改一下 <code>_config.yml</code> 中的默认配置：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:hash.html</span></span><br></pre></td></tr></table></figure><p>但是这里有一个问题，就是只有 hexo 在执行 <code>hexo generate</code> 或者 <code>hexo server</code> 时候才会去触发 <code>categories</code> 的生成，那么每次我们创建文章都要重新 <code>hexo generate</code> 以触发插件的自动校正功能，并再次把更新后的变更提交推送git。</p><p>参考<a class="link"   href="https://segmentfault.com/a/1190000042111566" >博客<i class="fas fa-external-link-alt"></i></a>使用Husky完成git hook的操作：</p><ol><li class="lvl-3"><p>安装 huksy：<code>npm install husky --save-dev</code></p></li><li class="lvl-3"><p>执行 huksy 初始化指令：<code>npx husky install</code></p></li><li class="lvl-3"><p>在 <code>package.json</code> 中的 <code>scripts</code> 中写入：<code>&quot;prepare&quot;: &quot;husky install&quot;</code></p></li><li class="lvl-3"><p>在生成的 <code>.husky</code> 目录创建 <code>pre-commit</code> 文件（有的话就不用创建），并写入以下内容：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env sh</span><br><span class="line">. &quot;$(dirname -- &quot;$0&quot;)/_/husky.sh&quot;</span><br><span class="line"></span><br><span class="line">npx hexo generate &amp;&amp; git add .</span><br></pre></td></tr></table></figure><p>如果提交代码的时候，终端出现类似的构建过程，就说明由 husky 创建的 git hook 生效了。</p><blockquote><p>hexo 博客默认携带的两个文件夹为 categories 和 tags ，这两个标签可以在文章开始前定义，然后 hexo 会自动解析该文章所属的目录和标签。</p></blockquote><p>上面已经通过插件解决了目录的问题，还剩下文章的标题和 tags。Obsidian 是支持创建新文件时插入模板的，这就意味着我们可以不用重复写 Hexo 博客文的 <a class="link"   href="https://link.segmentfault.com/?enc=4DPjhvn1QrqRE5OgrKMstw%3D%3D.MIPf5j5l9RhDiDjJt4mUgp54osH4sB5qkCHaPd3uwJRaisnSI%2BptA%2F%2FLQTE2JgBR" >Front-matter<i class="fas fa-external-link-alt"></i></a> 部分。</p><ol><li class="lvl-3"><p>在 <code>source</code> 目录下创建 <code>_obsidian</code> 文件夹，并创建一篇 <code>Post Template</code> 的文章（md文件），内容为：</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123;title&#125;&#125;</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">tags: []</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>然后进入到 Obsidian 的设置面板，选择<mark>核心插件</mark>，并启用<mark>模板</mark>功能。同时点击旁边的配置按钮，进入到模板配置的设置中，设置配置信息<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/image.4wkgikhe8u00.webp"                      alt="image"                ></p></li><li class="lvl-3"><p>之后，我们再创建新文章的时候，只需要点击侧边栏的<mark>插入模板</mark>按钮就可以快速生成 Front-matter 信息：<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/image.1cirn9jzcrk0.webp"                      alt="image"                ></p></li></ol><h2 id="博客图片的管理">博客图片的管理</h2><blockquote><p>在 Obsidian 中，可以直接粘贴截图，并设置默认保存位置。相对路径保存的格式如下：<code>![](attachments/xxx.png)</code>，但是这样部署到 hexo 中的图片会显示404加载不成功的错误。</p></blockquote><p>原先的办法是将 <code>_config.yml</code> 配置文件中的 <code>post_asset_folder</code> 选项设置为 <code>true</code> 来打开。该功能打开后，Hexo 将会在你每一次通过 <code>hexo new [layout] &lt;title&gt;</code> 命令创建新文章时自动创建一个文件夹。这个资源文件夹名与文章文件名相同。将所有与你的文章有关的资源（如图片）放在这个关联文件夹中之后，通过相对路径来引用它们。但是由于本次需要将 Obsidian 与 Hexo 结合，希望生成新文章不依靠于命令行。因此本次直接加入图床保存图片。使用的图床为Keep主题推荐的图床<a class="link"   href="https://picx.xpoet.cn/#/upload" >PicX<i class="fas fa-external-link-alt"></i></a>。<mark>建议本地依旧备份一份图片，以防万一。</mark></p><h2 id="Git-同步">Git 同步</h2><blockquote><p>Obsidian内存在插件Obsidian Git 插件使我们可以在 Obsidian 内就可以实现 git commit 以及 push 的操作。</p></blockquote><ol><li class="lvl-3"><p>在右侧命令面板处输入<code>open source control view</code>，可以打开Git面板，右侧会自动生成commit信息，commit信息可以在配置文件内自行配置<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/Pasted-image-20230227163445.6ryihbvm4hk0.webp"                      alt="Pasted-image-20230227163445"                ></p></li></ol><h2 id="File-Tree-定位">File Tree 定位</h2><blockquote><p>用 Obsidian 控制文件有一个弊端在于左侧目录为全部文件，而我们编写 hexo 博客，一般只会在<code>_posts</code>文件下操作，可以使用Obsidian插件 <code>File Tree Alternative Plugin</code></p></blockquote><p>安装插件后可以看到文件列变为了以下格式<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/image.1js3ah8m1dts.webp"                      alt="image|300"                ></p><p>打开选中<code>_post</code>，右键<code>Focus on Folder</code>，则菜单栏只显示<code>_post</code>文件夹<br><img                       lazyload                     alt="image"                     data-src="https://cdn.staticaly.com/gh/kiml-rgb/blog-images@master/Obsidian-+-Git-+-Hexo-+-%E5%9B%BE%E5%BA%8A-=-Blog-+-%E4%B8%AA%E4%BA%BA%E7%AC%94%E8%AE%B0%E4%BD%93%E7%B3%BB/image.3cgdd5lxswo0.webp"                      alt="image|300"                ></p><h1>其他拓展</h1><h2 id="更高级的-Markdown-渲染器">更高级的 Markdown 渲染器</h2><blockquote><p>Hexo 默认的 Markdown 渲染器是<a class="link"   href="https://github.com/hexojs/hexo-renderer-marked" >hexo-renderer-marked<i class="fas fa-external-link-alt"></i></a>，但其支持的渲染格式有限，比如<mark>重点符号</mark>的渲染就是不成功的，因此更换更好用的渲染器<a class="link"   href="https://github.com/hexojs/hexo-renderer-markdown-it" >hexo-renderer-markdown-it<i class="fas fa-external-link-alt"></i></a></p></blockquote><ol><li class="lvl-3"><p>卸载<code>hexo-renderer-marked</code></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm un hexo-renderer-marked --save</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>安装 <code>hexo-renderer-markdown-it</code></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-renderer-markdown-it --save</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>将如下文本复制粘贴到 <a class="link"   href="https://so.csdn.net/so/search?q=Hexo&amp;spm=1001.2101.3001.7020" >Hexo<i class="fas fa-external-link-alt"></i></a> 的配置文件 <code>_config.yml</code> 的尾部</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">markdown:</span></span><br><span class="line">  <span class="attr">preset:</span> <span class="string">&quot;default&quot;</span></span><br><span class="line">  <span class="attr">render:</span></span><br><span class="line">    <span class="attr">html:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">xhtmlOut:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">langPrefix:</span> <span class="string">&quot;language-&quot;</span></span><br><span class="line">    <span class="attr">breaks:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">linkify:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">typographer:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">quotes:</span> <span class="string">&quot;“”‘’&quot;</span></span><br><span class="line">  <span class="attr">enable_rules:</span></span><br><span class="line">  <span class="attr">disable_rules:</span></span><br><span class="line">  <span class="attr">plugins:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-abbr</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-cjk-breaks</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-deflist</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-emoji</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-footnote</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-ins</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-mark</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sub</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-sup</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-checkbox</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-imsize</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">markdown-it-expandable</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">success</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">tips</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">warning</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">markdown-it-container</span></span><br><span class="line">      <span class="attr">options:</span> <span class="string">danger</span></span><br><span class="line">  <span class="attr">anchors:</span></span><br><span class="line">    <span class="attr">level:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">collisionSuffix:</span> <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="attr">permalink:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">permalinkClass:</span> <span class="string">&quot;header-anchor&quot;</span></span><br><span class="line">    <span class="attr">permalinkSide:</span> <span class="string">&quot;left&quot;</span></span><br><span class="line">    <span class="attr">permalinkSymbol:</span> <span class="string">&quot;¶&quot;</span></span><br><span class="line">    <span class="attr">case:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">separator:</span> <span class="string">&quot;-&quot;</span></span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>分别使用 <code>npm</code> 命令安装以下三个插件，其它插件 <code>hexo-renderer-markdown-it</code> 渲染器已有</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i markdown-it-checkbox</span><br><span class="line">npm i markdown-it-imsize</span><br><span class="line">npm i markdown-it-expandable</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
之前有过基于 Hexo 的博客搭建经历，但是由于时间繁忙，加上后续学习了解到的笔记软件，拥有我想要的全局搜索功能，而且比博客的格式、排版更加吸引人，就放弃了之前搭建的博客。但是出来找工作感觉拥有一个自己的技术博客会比较占优势，因此打算在笔记的基础上，加上原来的 Hexo 快速生成，转成技术博客输出。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;参考文章&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://www.cnblogs.com/chenlove/p/15058170.html&quot; &gt;【保姆级】利用Github搭建自己的个人博客，看完就会&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;
&lt;a class=&quot;link&quot;   href=&quot;https://segmentfault.com/a/1190000042111566&quot; &gt;Hexo + Obsidian + Git 完美的博客部署与编辑方案&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;更新&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;22.12.11 初始记录(修改预计开始日期为元旦)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.02.24 环境部署，个人博客绑定到 Gitee Pages&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23.02.27 Obsidian 整合 等待Gitee Pages审核ing&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="博客" scheme="https://kiml_rgb.gitee.io/blog/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
</feed>
