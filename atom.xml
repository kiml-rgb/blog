<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Theme</title>
  
  <subtitle>Keep theme quick starter</subtitle>
  <link href="https://kiml.github.io/atom.xml" rel="self"/>
  
  <link href="https://kiml.github.io/"/>
  <updated>2024-06-02T14:18:02.053Z</updated>
  <id>https://kiml.github.io/</id>
  
  <author>
    <name>Keep Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>面试-总览</title>
    <link href="https://kiml.github.io/2024/06/02/100000018/"/>
    <id>https://kiml.github.io/2024/06/02/100000018/</id>
    <published>2024-06-02T13:59:58.000Z</published>
    <updated>2024-06-02T14:18:02.053Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>这个部分作为一个背题打卡List。展示面试前必须掌握的东西。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.06.02 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>集合HashMap</h1><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox0"><label for="checkbox0">put的过程</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox1"><label for="checkbox1">头插法和尾插法的区别</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox2"><label for="checkbox2">1.7和1.8的扩容机制(先扩容在添加调整为先添加在扩容)</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox3"><label for="checkbox3">链表和红黑树的转化过程</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox4"><label for="checkbox4">线程不安全的问题(解决方案)</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox5"><label for="checkbox5">ConcurrentHashMap的1.7和1.8原理和区别</label></p></li></ul><h1>ArrayList</h1><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox6"><label for="checkbox6">什么是双向链表</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox7"><label for="checkbox7">底层原理</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox8"><label for="checkbox8">和LinkedList的区别</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox9"><label for="checkbox9">线程不安全如何解决</label></p></li></ul><h1>多线程</h1><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox10"><label for="checkbox10">实现方式，每种实现方式的区别</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox11"><label for="checkbox11">Volatile关键字</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox12"><label for="checkbox12">CAS自旋锁</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox13"><label for="checkbox13">Lock锁是公平锁还是非公平锁</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox14"><label for="checkbox14">你了解AQS机制它的核心原理是什么</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox15"><label for="checkbox15">公平锁，非公平锁，偏向锁，轻量锁</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox16"><label for="checkbox16">线程的6种状态</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox17"><label for="checkbox17">线程池的7大核心参数</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox18"><label for="checkbox18">4个拒绝策略</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox19"><label for="checkbox19">多线程的执行流程</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox20"><label for="checkbox20">线程池的常用实现方法</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox21"><label for="checkbox21">ThreadLocal的原理</label></p></li></ul><h1>JVM</h1><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox22"><label for="checkbox22">说一下 JVM 的主要组成部分及其作用</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox23"><label for="checkbox23">说一下 JVM 运行时数据区</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox24"><label for="checkbox24">堆里面的分区：Eden，survival （from+ to），老年代，各自的特点是什么</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox25"><label for="checkbox25">说一下 JVM 调优的工具</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox26"><label for="checkbox26">常用的 JVM 调优的参数都有哪些</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox27"><label for="checkbox27">简述Java垃圾回收机制</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox28"><label for="checkbox28">什么是Full GC</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox29"><label for="checkbox29">什么情况下会触发</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox30"><label for="checkbox30">说一下 JVM 有哪些垃圾回收算法</label></p></li></ul><h1>数据库</h1><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox31"><label for="checkbox31">索引的机制和底层原理</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox32"><label for="checkbox32">什么是组合索引</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox33"><label for="checkbox33">最左匹配原则</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox34"><label for="checkbox34">数据库的事务</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox35"><label for="checkbox35">引擎的原理</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox36"><label for="checkbox36">数据库悲观锁和乐观锁的实现</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox37"><label for="checkbox37">b+树的好处</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox38"><label for="checkbox38">数据库的优化</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox39"><label for="checkbox39">多个数据源如何操作</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox40"><label for="checkbox40">数据库的优化</label></p></li></ul><h1>框架</h1><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox41"><label for="checkbox41">Spring的事务传播机制</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox42"><label for="checkbox42">bean 的生命周期</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox43"><label for="checkbox43">SpringMVC的执行流程</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox44"><label for="checkbox44">ioc</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox45"><label for="checkbox45">di</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox46"><label for="checkbox46">aop</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox47"><label for="checkbox47">SpringBoot异常处理机制</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox48"><label for="checkbox48">简化操作的原理</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox49"><label for="checkbox49">自定义注解</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox50"><label for="checkbox50">Springcloud的组件</label></p></li></ul><h1>Redis</h1><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox51"><label for="checkbox51">Redis的数据类型</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox52"><label for="checkbox52">常用命令</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox53"><label for="checkbox53">持久化方法</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox54"><label for="checkbox54">雪崩、击穿、穿透</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox55"><label for="checkbox55">过期策略</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox56"><label for="checkbox56">淘汰策略</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox57"><label for="checkbox57">与数据库的一致性</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox58"><label for="checkbox58">哨兵模式</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox59"><label for="checkbox59">集群</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox60"><label for="checkbox60">分布式锁</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox61"><label for="checkbox61">异步队列</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox62"><label for="checkbox62">延时队列</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox63"><label for="checkbox63">线程模型</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox64"><label for="checkbox64">分区</label></p></li></ul><h1>MQ</h1><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox65"><label for="checkbox65">为什么要用MQ</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox66"><label for="checkbox66">MQ的优势</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox67"><label for="checkbox67">消息补偿机制</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox68"><label for="checkbox68">一致性</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox69"><label for="checkbox69">预防消息丢失</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox70"><label for="checkbox70">可靠性</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox71"><label for="checkbox71">不重复消费</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox72"><label for="checkbox72">集群镜像模式</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox73"><label for="checkbox73">MQ的工作模式</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox74"><label for="checkbox74">项目应用场景</label></p></li></ul><h1>场景</h1><ul class="lvl-0"><li class="lvl-2"><p><input type="checkbox" id="checkbox75"><label for="checkbox75">请求量大如何拦截</label></p></li><li class="lvl-2"><p><input type="checkbox" id="checkbox76"><label for="checkbox76">如何去两个库查数据</label></p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
这个部分作为一个背题打卡List。展示面试前必须掌握的东西。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.06.02 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>面试-02 集合</title>
    <link href="https://kiml.github.io/2024/06/01/100000019/"/>
    <id>https://kiml.github.io/2024/06/01/100000019/</id>
    <published>2024-06-01T03:32:49.000Z</published>
    <updated>2024-06-02T14:29:25.499Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>HashMap常见问题。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.06.01 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>Java集合</h1><h1>❗HashMap底层的数据结构</h1><p>数组 + 最简单的原理。对存入的key进行hash计算，根据计算出的hash值，对数组长度进行取模，获取到要存入的位置。</p><h1>❗JDK 1.8 中对hash算法和寻址算法是如何优化的？</h1><p>hash算法：hash值与hash值右移16位进行异或计算。得到结果位高16位+高16位与低16位的异或值。（<strong>这一步主要为了低16位在下一步寻址的时候，使低16位保留高16位的特征，减少哈希冲突</strong>）寻址：<code>(n - 1)&amp;hash</code> 算出数组内的一个位置。</p><p>为什么使用&amp;运算不使用取模运算？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">取模运算性能比较差，而且(n - 1)&amp;hash的效果和hash对n取模，效果是一样的。</span><br><span class="line"></span><br><span class="line">为什么效果是一样的？</span><br><span class="line">因为数组的长度一直是2的n次方，只要他保持数组长度是2的n次方，那么效果就是一样的。</span><br></pre></td></tr></table></figure><h1>❗HashMap如何解决hash碰撞？</h1><p>hash冲突，链表+红黑树，O(n)和O(logn)</p><h1>❗HashMap如何进行扩容？</h1><p>2倍扩容。扩容之后要进行rehash。即hash值与新数组长度<code>(n - 1)</code>进行与操作。如果值与原来不一样，新的index就是<code>旧index + oldCap</code>，通过这个方式，避免了rehash的时候，进行取模（效率不高）。</p><h1>其他</h1>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
HashMap常见问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.06.01 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="Java基础" scheme="https://kiml.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
    <category term="HashMap" scheme="https://kiml.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十二天-二叉树理论基础、递归遍历、迭代遍历、统一迭代</title>
    <link href="https://kiml.github.io/2024/06/01/100000019/"/>
    <id>https://kiml.github.io/2024/06/01/100000019/</id>
    <published>2024-06-01T03:17:20.000Z</published>
    <updated>2024-06-01T03:18:58.574Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-02 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-02 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十一天-239滑动窗口最大值、347前 K 个高频元素</title>
    <link href="https://kiml.github.io/2024/05/31/100000016/"/>
    <id>https://kiml.github.io/2024/05/31/100000016/</id>
    <published>2024-05-31T02:33:19.000Z</published>
    <updated>2024-06-01T03:00:19.391Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：239超时，347直接用的Stream流。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24.05.31 初始记录</span><br><span class="line">24.06.01 完成题目</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="239滑动窗口最大值">239滑动窗口最大值</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/sliding-window-maximum/description/" >https://leetcode.cn/problems/sliding-window-maximum/description/<i class="fas fa-external-link-alt"></i></a>)<br>暴力解法：循环判断最大值（超时）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE239</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        <span class="type">int</span>[] split = Arrays.stream(s.split(<span class="string">&quot;,&quot;</span>)).mapToInt(Integer::parseInt).toArray();  </span><br><span class="line">        <span class="type">int</span>[] ints = maxSlidingWindow(split, Integer.parseInt(scanner.nextLine()));  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> anInt : ints) &#123;  </span><br><span class="line">            System.out.println(anInt);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (nums.length &lt;= k) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;getMax(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>)&#125;;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= nums.length - k; i++) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> getMax(nums, i, i + k - <span class="number">1</span>);  </span><br><span class="line">            list.add(max);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> list.stream().mapToInt(i -&gt; i).toArray();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> i; k &lt;= j; k++) &#123;  </span><br><span class="line">            max = Math.max(max, nums[k]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> max;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="347前-K-个高频元素">347前 K 个高频元素</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/top-k-frequent-elements/description/" >https://leetcode.cn/problems/top-k-frequent-elements/description/<i class="fas fa-external-link-alt"></i></a>)</p><p>直接用Stream流的解法，估计上班会用这个。。。甚至可以优化成一行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] topKFrequent(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;  </span><br><span class="line">    <span class="comment">// map用于计数  </span></span><br><span class="line">    TreeMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">        map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> map.entrySet().stream()  </span><br><span class="line">            .sorted((o1, o2) -&gt; o2.getValue() - o1.getValue())  </span><br><span class="line">            .limit(k)  </span><br><span class="line">            .map(Map.Entry::getKey)  </span><br><span class="line">            .mapToInt(i -&gt; i)  </span><br><span class="line">            .toArray();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看解析</h1><h2 id="239滑动窗口最大值-2">239滑动窗口最大值</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0239.%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%9C%80%E5%A4%A7%E5%80%BC.html#%E6%80%9D%E8%B7%AF" >https://programmercarl.com/0239.滑动窗口最大值.html#思路<i class="fas fa-external-link-alt"></i></a>)</p><blockquote><p>思路：这题放在队列专题，肯定是要用到队列思想的。按暴力的解法，求最大值的那个循环（这样效率就是<code>O(n * k)</code>），在这边可以用单调队列解决。<br><strong>其实队列没有必要维护窗口里的所有元素，只需要维护有可能成为窗口里最大值的元素就可以了，同时保证队列里的元素数值是由大到小的。</strong><br>那么这个维护元素单调递减的队列就叫做<strong>单调队列，即单调递减或单调递增的队列。Java中没有直接支持单调队列，需要我们自己来实现一个单调队列</strong></p></blockquote><p>设计单调队列的时候，pop，和push操作要保持如下规则：</p><ol><li class="lvl-3"><p>pop(value)：如果窗口移除的元素value等于单调队列的出口元素，那么队列弹出元素，否则不用任何操作</p></li><li class="lvl-3"><p>push(value)：如果push的元素value大于入口元素的数值，那么就将队列入口的元素弹出，直到push元素的数值小于等于队列入口元素的数值为止（<strong>所以这里要用while</strong>）</p></li></ol><p>保持如上规则，每次窗口移动的时候，只要问que.peek()就可以返回当前窗口的最大值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 定义一个单调队列  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;  </span><br><span class="line">    Deque&lt;Integer&gt; deque = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> num)</span> &#123;  </span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty() &amp;&amp; num &gt; deque.getLast()) &#123;  </span><br><span class="line">            deque.removeLast();  </span><br><span class="line">        &#125;  </span><br><span class="line">        deque.add(num);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 判断队顶元素是否是要移除的元素  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pull</span><span class="params">(<span class="type">int</span> num)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!deque.isEmpty() &amp;&amp; deque.peek() == num) &#123;  </span><br><span class="line">            deque.poll();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> deque.peek();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] maxSlidingWindow(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;  </span><br><span class="line">    <span class="type">MyQueue</span> <span class="variable">myQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyQueue</span>();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;  </span><br><span class="line">        myQueue.push(nums[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length - k + <span class="number">1</span>];  </span><br><span class="line">    ints[j++] = myQueue.peek();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k; i &lt;nums.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 窗口滑动，移除元素（移除时要判断元素是否在单调队列内）  </span></span><br><span class="line">        myQueue.pull(nums[i - k]);  </span><br><span class="line">        <span class="comment">// 窗口滑动，添加最新元素到单调队列  </span></span><br><span class="line">        myQueue.push(nums[i]);  </span><br><span class="line">        <span class="comment">// 获取单调队列队顶元素（根据定义的规则，一定是区间内最大的）  </span></span><br><span class="line">        ints[j++] = myQueue.peek();  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> ints;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="347前-K-个高频元素-2">347前 K 个高频元素</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0347.%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html" >https://programmercarl.com/0347.前K个高频元素.html<i class="fas fa-external-link-alt"></i></a>)<br>这题属于：前K个大数问题。这种问题一般用<strong>大顶堆</strong>（根节点最大）或<strong>小顶堆</strong>（根节点最小）。需要使用小顶堆，<strong>因为要统计最大前k个元素，只有小顶堆每次将最小的元素弹出，最后小顶堆里积累的才是前k个最大元素。</strong></p><p>emmmmm感觉和Stream流没有什么区别（可能在于他用的容器吧）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*Comparator接口说明:</span></span><br><span class="line"><span class="comment"> * 返回负数，形参中第一个参数排在前面；返回正数，形参中第二个参数排在前面</span></span><br><span class="line"><span class="comment"> * 对于队列：排在前面意味着往队头靠</span></span><br><span class="line"><span class="comment"> * 对于堆（使用PriorityQueue实现）：从队头到队尾按从小到大排就是最小堆（小顶堆），</span></span><br><span class="line"><span class="comment"> *                                从队头到队尾按从大到小排就是最大堆（大顶堆）---&gt;队头元素相当于堆的根节点</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//解法1：基于大顶堆实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent1(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//key为数组元素值,val为对应出现次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num,<span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在优先队列中存储二元组(num, cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">//出现次数按从队头到队尾的顺序是从大到小排,出现次数最多的在队头(相当于大顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1, pair2) -&gt; pair2[<span class="number">1</span>] - pair1[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;<span class="comment">//大顶堆需要对所有元素进行排序</span></span><br><span class="line">            pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(), entry.getValue()&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123; <span class="comment">//依次从队头弹出k个,就是出现频率前k高的元素</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//解法2：基于小顶堆实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] topKFrequent2(<span class="type">int</span>[] nums, <span class="type">int</span> k) &#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(); <span class="comment">//key为数组元素值,val为对应出现次数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            map.put(num, map.getOrDefault(num, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//在优先队列中存储二元组(num, cnt),cnt表示元素值num在数组中的出现次数</span></span><br><span class="line">        <span class="comment">//出现次数按从队头到队尾的顺序是从小到大排,出现次数最低的在队头(相当于小顶堆)</span></span><br><span class="line">        PriorityQueue&lt;<span class="type">int</span>[]&gt; pq = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;((pair1, pair2) -&gt; pair1[<span class="number">1</span>] - pair2[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123; <span class="comment">//小顶堆只需要维持k个元素有序</span></span><br><span class="line">            <span class="keyword">if</span> (pq.size() &lt; k) &#123; <span class="comment">//小顶堆元素个数小于k个时直接加</span></span><br><span class="line">                pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(), entry.getValue()&#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry.getValue() &gt; pq.peek()[<span class="number">1</span>]) &#123; <span class="comment">//当前元素出现次数大于小顶堆的根结点(这k个元素中出现次数最少的那个)</span></span><br><span class="line">                    pq.poll(); <span class="comment">//弹出队头(小顶堆的根结点),即把堆里出现次数最少的那个删除,留下的就是出现次数多的了</span></span><br><span class="line">                    pq.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;entry.getKey(), entry.getValue()&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] ans = <span class="keyword">new</span> <span class="title class_">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> k - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123; <span class="comment">//依次弹出小顶堆,先弹出的是堆的根,出现次数少,后面弹出的出现次数多</span></span><br><span class="line">            ans[i] = pq.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：239超时，347直接用的Stream流。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.31 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24.06.01 完成题目&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="队列" scheme="https://kiml.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
    <category term="单调队列" scheme="https://kiml.github.io/tags/%E5%8D%95%E8%B0%83%E9%98%9F%E5%88%97/"/>
    
    <category term="优先级队列" scheme="https://kiml.github.io/tags/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>面试-SPI</title>
    <link href="https://kiml.github.io/2024/05/30/100000017/"/>
    <id>https://kiml.github.io/2024/05/30/100000017/</id>
    <published>2024-05-30T08:37:53.000Z</published>
    <updated>2024-06-01T03:32:44.024Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>SPI相关的面试问题及用法</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.30 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="SPI介绍">SPI介绍</h2><p>​SPI全称Service Provider Interface，是Java提供的一套用来被第三方实现或者扩展的API，它可以用来启用框架扩展和替换组件。<br>Java的SPI机制就是将一些==<strong>类信息写在约定的文件中</strong>==，然后由特定的类加载器ServiceLoader加载解析文件获取资源。<br>Java SPI 基于 “<strong>接口编程＋策略模式＋配置文件</strong>(约定)”组合实现的动态加载机制。它提供了一种服务发现机制，允许在程序外部动态指定具体实现。一般情况下是调用方调用实现好的接口，但是当接口存在于调用方这边时，就是 SPI ，由接口调用方确定接口规则，然后由不同的厂商去根据这个规则对这个接口进行实现，从而提供服务。​以下是SPI的一些运用场景:</p><table><thead><tr><th>场景</th><th>说明</th></tr></thead><tbody><tr><td>数据库驱动</td><td>数据库驱动加载接口实现类的加载 JDBC加载不同类型数据库的驱动</td></tr><tr><td>日志门面SLF4J接口实现类加载</td><td>SLF4J加载不同提供商的日志实现类</td></tr><tr><td>Spring</td><td>Spring中大量使用了SPI,比如：对servlet3.0规范对ServletContainerInitializer的实现、自动类型转换Type Conversion SPI(Converter SPI、Formatter SPI)等</td></tr><tr><td>Dubbo</td><td>Dubbo中也大量使用SPI的方式实现框架的扩展, 不过它对Java提供的原生SPI做了封装，允许用户扩展实现Filter接口</td></tr><tr><td>SpringBoot</td><td>SpringBoot基于SPI思想实现自动装配</td></tr><tr><td>插件扩展</td><td>开源框架，想使用别人的插件，扩展某个功能。</td></tr></tbody></table><h2 id="ServiceLoader"><a class="link"   href="https://javaguide.cn/java/basis/spi.html#serviceloader" >ServiceLoader<i class="fas fa-external-link-alt"></i></a></h2><p>点击标题跳转链接到JavaGuide。</p><h2 id="面试大白话">面试大白话</h2><p>Java中的SPI就是你提供一个接口，然后让别人提供实现类。然后将这个实现放在<code>resources/META-INF/services/</code>中。这样Java启动的时候就会去扫描这个下面的jar包，并把他加载进来。一般来说用在开源框架中的插件扩展，然后比较常见的思想提现就是Java的JDBC实现，可以根据自己使用的数据库，将对应的jar包引用进来。</p><p>（Dubbo中可能问到的问题）Dubbo中也使用了这个思想: 比如说有一行代码是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Protocol</span> <span class="variable">protocol</span> <span class="operator">=</span> ExtensionLoader.getExtensionLoader(Protocol.class).getAdaptiveExtension();</span><br></pre></td></tr></table></figure><p>然后在使用Protocol接口时，dubbo他会去找一个你配置的Protocol，他就会将你配置的Protocol实现类，加载到jvm中来，然后实例化对象，就用你的那个Protocol实现类就可以了。这个Protocol就是用来配置他的网络协议的，然后在源码中可以看到，默认使用的是dubbo协议，就是DubboProtocol。dubbo里面提供了大量的类似上面的扩展点，就是说，你如果要扩展一个东西，只要自己写个jar，让你的consumer或者是provider工程，依赖你的那个jar，在你的jar里指定目录下配置好接口名称对应的文件，里面通过key=实现类（这些都可以在官网的文档里找到）。</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
SPI相关的面试问题及用法&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.30 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="面试题" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    
    <category term="SPI" scheme="https://kiml.github.io/tags/SPI/"/>
    
    <category term="面试题" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
    <category term="Java基础" scheme="https://kiml.github.io/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>【代码模板】文件存储</title>
    <link href="https://kiml.github.io/2024/05/30/100000014/"/>
    <id>https://kiml.github.io/2024/05/30/100000014/</id>
    <published>2024-05-30T07:13:41.000Z</published>
    <updated>2024-06-01T03:35:56.227Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>项目中常用到文件上传的功能。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.30 初始记录（Minio，阿里云OSS）</span><br></pre></td></tr></table></figure><span id="more"></span><h1>文件上传</h1><ol><li class="lvl-3"><p>校验</p><ul class="lvl-2"><li class="lvl-6">文件是否为空</li><li class="lvl-6">文件的格式</li><li class="lvl-6">文件的大小</li></ul></li><li class="lvl-3"><p>文件重命名</p></li><li class="lvl-3"><p>文件目录分离</p><ul class="lvl-2"><li class="lvl-6">使用目录分离算法(Hash把hash值作为目录名称)</li><li class="lvl-6">按照日期分目录(每天创建一个新的目录)</li><li class="lvl-6">按照用户名分目录</li></ul></li><li class="lvl-3"><p>图片保存地点</p><ul class="lvl-2"><li class="lvl-6">web服务器（项目所运行在的电脑）</li><li class="lvl-6">云存储服务商</li><li class="lvl-6">自己搭建文件服务器（FastDFS Minio）</li></ul></li></ol><h2 id="通用部分代码">通用部分代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 文件上传  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file 文件  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> Boolean  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;common&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">uploadPic</span><span class="params">(MultipartFile file)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 校验</span></span><br><span class="line">        <span class="comment">// 校验文件是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isNull(file)) <span class="keyword">return</span> R.error(<span class="string">&quot;上传文件不能为空&quot;</span>);</span><br><span class="line">        <span class="comment">// 校验文件的格式</span></span><br><span class="line">        <span class="keyword">if</span> (!StrUtil.containsAnyIgnoreCase(FileUtil.getSuffix(file.getOriginalFilename()), <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(<span class="string">&quot;上传文件格式错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 校验文件的大小</span></span><br><span class="line">        <span class="keyword">if</span> (file.getSize() / <span class="number">1024</span> / <span class="number">1024</span> &gt; <span class="number">2</span>) <span class="keyword">return</span> R.error(<span class="string">&quot;文件过大，限制在2MB以内&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 给文件进行重命名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.fastUUID().toString() + <span class="string">&quot;.&quot;</span> + FileUtil.getSuffix(file.getOriginalFilename());</span><br><span class="line">        <span class="comment">// 给文件目录分离</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 图片保存地点（不同保存地点实现方式不同）</span></span><br><span class="line">        .....</span><br><span class="line">        <span class="keyword">return</span> R.success(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="不同的保存地点">不同的保存地点</h2><h2 id="web服务器（项目所运行在的电脑）">web服务器（项目所运行在的电脑）</h2><ol><li class="lvl-3"><p>文件上传部分代码</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种情况下，文件存储路径为服务器上的路径名称</span></span><br><span class="line">file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;D:\\images\\&quot;</span> + fileName));</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>下载</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>前端直接访问服务器域名+存储地址</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这种情况下，代码中需要添加访问资源映射地址</span></span><br><span class="line"><span class="comment">// 在拦截器中配置</span></span><br><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> AuthInterceptor authInterceptor;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">DWG</span> <span class="operator">=</span> <span class="string">&quot;file:&quot;</span> + <span class="string">&quot;D:/images/&quot;</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">    <span class="comment">// 添加访问资源的地址</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/virtual/**&quot;</span>).addResourceLocations(DWG);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;  </span><br><span class="line">        registry.addInterceptor(authInterceptor)  </span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)  </span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/**/login/**&quot;</span>, <span class="string">&quot;/**/*.html&quot;</span>, <span class="string">&quot;/**/*.js&quot;</span>, <span class="string">&quot;/**/*.css&quot;</span>, <span class="string">&quot;/doc.*&quot;</span>,  </span><br><span class="line">                        <span class="string">&quot;/swagger-ui.*&quot;</span>,  </span><br><span class="line">                        <span class="string">&quot;/swagger-resources&quot;</span>,  </span><br><span class="line">                        <span class="string">&quot;/webjars/**&quot;</span>,  </span><br><span class="line">                        <span class="string">&quot;/v2/api-docs/**&quot;</span>,  </span><br><span class="line">                        <span class="string">&quot;/virtual/**&quot;</span>  </span><br><span class="line">                );  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>前端通过接口下载文件</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadPic</span><span class="params">(String name, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\images\\&quot;</span> + name);</span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((len = fileInputStream.read(bytes)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fileInputStream.close();</span><br><span class="line">    outputStream.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="云存储服务商">云存储服务商</h2><p>通过开通云存储服务商的OSS服务，调用提供的API，实现文件存储。一般后面两种情况会直接编写Util类方便多处调用。</p><h3 id="阿里云">阿里云</h3><h4 id="Maven依赖">Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件">配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">aliyun:</span>  </span><br><span class="line">  <span class="attr">oss:</span>  </span><br><span class="line">    <span class="attr">endpoint:</span> <span class="string">oss-cn-hangzhou.aliyuncs.com</span>  </span><br><span class="line">    <span class="attr">accessKeyId:</span> <span class="string">xxxxxxxxxxxxxxxx</span>  </span><br><span class="line">    <span class="attr">accessKeySecret:</span> <span class="string">xxxxxxxxxxxxxxxx</span>  </span><br><span class="line">    <span class="attr">bucket:</span>  <span class="string">xxxxxxxxxxxxxxxx</span></span><br><span class="line">    <span class="attr">userFolder:</span> <span class="string">user/</span>  </span><br><span class="line">    <span class="attr">managerFolder:</span> <span class="string">manager/</span></span><br></pre></td></tr></table></figure><h4 id="代码">代码</h4><ul class="lvl-0"><li class="lvl-2"><p>OssAutoConfiguration.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@ConditionalOnClass(&#123;OSSClient.class&#125;)</span>  </span><br><span class="line"><span class="meta">@EnableConfigurationProperties(OssProperties.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssAutoConfiguration</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> OssProperties ossProperties;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OssAutoConfiguration</span><span class="params">(<span class="keyword">final</span> OssProperties ossProperties)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.ossProperties = ossProperties;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> OssClientFactoryBean <span class="title function_">ossClientFactoryBean</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">final</span> <span class="type">OssClientFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OssClientFactoryBean</span>();  </span><br><span class="line">        factoryBean.setEndpoint(<span class="built_in">this</span>.ossProperties.getEndpoint());  </span><br><span class="line">        factoryBean.setAccessKeyId(<span class="built_in">this</span>.ossProperties.getAccessKeyId());  </span><br><span class="line">        factoryBean.setAccessKeySecret(<span class="built_in">this</span>.ossProperties.getAccessKeySecret());  </span><br><span class="line">        <span class="keyword">return</span> factoryBean;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>OssClientFactoryBean.class</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssClientFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;OSSClient&gt;, InitializingBean, DisposableBean &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> OSSClient ossClient;  </span><br><span class="line">    <span class="keyword">private</span> String endpoint;  </span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;  </span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> OSSClient <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.ossClient;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;  </span><br><span class="line">        <span class="keyword">return</span> OSSClient.class;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.ossClient != <span class="literal">null</span>) &#123;  </span><br><span class="line">            <span class="built_in">this</span>.ossClient.shutdown();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;  </span><br><span class="line">        Assert.notNull(<span class="built_in">this</span>.endpoint, <span class="string">&quot;&#x27;aliyun.oss.endpoint&#x27; must be not null&quot;</span>);  </span><br><span class="line">        Assert.notNull(<span class="built_in">this</span>.accessKeyId, <span class="string">&quot;&#x27;aliyun.oss.accessKeyId&#x27; must be not null&quot;</span>);  </span><br><span class="line">        Assert.notNull(<span class="built_in">this</span>.accessKeySecret, <span class="string">&quot;&#x27;aliyun.oss.accessKeySecret&#x27; must be not null&quot;</span>);  </span><br><span class="line">        <span class="built_in">this</span>.ossClient = <span class="keyword">new</span> <span class="title class_">OSSClient</span>(<span class="built_in">this</span>.endpoint, <span class="built_in">this</span>.accessKeyId, <span class="built_in">this</span>.accessKeySecret);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndpoint</span><span class="params">(<span class="keyword">final</span> String endpoint)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.endpoint = endpoint;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessKeyId</span><span class="params">(<span class="keyword">final</span> String accessKeyId)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.accessKeyId = accessKeyId;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessKeySecret</span><span class="params">(<span class="keyword">final</span> String accessKeySecret)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.accessKeySecret = accessKeySecret;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>OssProperties.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Getter</span>  </span><br><span class="line"><span class="meta">@Setter</span>  </span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;aliyun.oss&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssProperties</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String endpoint;  </span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;  </span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;  </span><br><span class="line">    <span class="keyword">private</span> String bucket;  </span><br><span class="line">    <span class="keyword">private</span> String userFolder;  </span><br><span class="line">    <span class="keyword">private</span> String managerFolder;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>OssUtil.class</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OssUtil</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> OSSClient ossClient;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> OssProperties ossProperties;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 上传文件  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> folder &quot;需要加/ 如&quot;xxx/&quot;&quot;  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件地址  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(MultipartFile file, String folder)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> ossProperties.getBucket();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 判断Bucket的存在  </span></span><br><span class="line">        <span class="keyword">if</span> (!ossClient.doesBucketExist(bucketName)) &#123;  </span><br><span class="line">            <span class="comment">// 创建存储空间  </span></span><br><span class="line">            <span class="type">Bucket</span> <span class="variable">bucket</span> <span class="operator">=</span> ossClient.createBucket(bucketName);  </span><br><span class="line">            bucketName = bucket.getName();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 以输入流的形式上传文件  </span></span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> file.getInputStream();  </span><br><span class="line">            <span class="comment">// 文件名  </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();  </span><br><span class="line">            <span class="keyword">if</span> (ObjectUtil.isNull(originalFilename)) &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LogicException</span>(<span class="string">&quot;文件名称获取失败&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="type">val</span> <span class="variable">suffix</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));  </span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.fastUUID().toString() + suffix.toLowerCase();  </span><br><span class="line">            objectName = folder + DateUtil.format(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;yy-MM/dd&quot;</span>) + <span class="string">&quot;/&quot;</span> + fileName;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 文件大小  </span></span><br><span class="line">            <span class="type">long</span> <span class="variable">fileSize</span> <span class="operator">=</span> file.getSize();  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 创建上传Object的Metadata  </span></span><br><span class="line">            <span class="type">ObjectMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMetadata</span>();  </span><br><span class="line">            <span class="comment">// 上传的文件的长度  </span></span><br><span class="line">            metadata.setContentLength(is.available());  </span><br><span class="line">            <span class="comment">// 指定该Object被下载时的网页的缓存行为  </span></span><br><span class="line">            metadata.setCacheControl(<span class="string">&quot;no-cache&quot;</span>);  </span><br><span class="line">            <span class="comment">// 指定该Object下设置Header  </span></span><br><span class="line">            metadata.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);  </span><br><span class="line">            <span class="comment">// 指定该Object被下载时的内容编码格式  </span></span><br><span class="line">            metadata.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);  </span><br><span class="line">            <span class="comment">// 文件的MIME，定义文件的类型及网页编码，决定浏览器将以什么形式、什么编码读取文件。如果用户没有指定则根据Key或文件名的扩展名生成，  </span></span><br><span class="line">            <span class="comment">// 如果没有扩展名则填默认值application/octet-stream  </span></span><br><span class="line">            metadata.setContentType(AliyunOssFileTypeEnum.getText(suffix.toLowerCase()));  </span><br><span class="line">            <span class="comment">// 指定该Object被下载时的名称（指示MINME用户代理如何显示附加的文件，打开或下载，及文件名称）  </span></span><br><span class="line">            metadata.setContentDisposition(<span class="string">&quot;filename/filesize=&quot;</span> + originalFilename + <span class="string">&quot;/&quot;</span> + fileSize + <span class="string">&quot;Byte.&quot;</span>);  </span><br><span class="line">            <span class="comment">// 上传文件 (上传文件流的形式)  </span></span><br><span class="line">            <span class="type">PutObjectResult</span> <span class="variable">putResult</span> <span class="operator">=</span> ossClient.putObject(bucketName, objectName, is, metadata);  </span><br><span class="line">            <span class="comment">// 解析结果  </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resultStr</span> <span class="operator">=</span> putResult.getETag();  </span><br><span class="line">            log.info(<span class="string">&quot;唯一MD5数字签名:&quot;</span> + resultStr);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (OSSException oe) &#123;  </span><br><span class="line">            <span class="comment">// oe.printStackTrace();  </span></span><br><span class="line">            log.error(<span class="string">&quot;上传阿里云OSS服务器异常.&quot;</span> + oe.getMessage(), oe);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce) &#123;  </span><br><span class="line">            <span class="comment">// ce.printStackTrace();  </span></span><br><span class="line">            log.error(<span class="string">&quot;阿里云OSS服务连接异常.&quot;</span> + ce.getMessage(), ce);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="comment">// e.printStackTrace();  </span></span><br><span class="line">            log.error(<span class="string">&quot;文件流异常.&quot;</span> + e.getMessage(), e);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;https://&quot;</span> + ossProperties.getBucket() + <span class="string">&quot;.&quot;</span> + ossProperties.getEndpoint() + <span class="string">&quot;/&quot;</span> + objectName;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 上传文件 byte ()  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> folder &quot;需要加/ 如&quot;xxx/&quot;&quot;  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 文件地址  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">imgUploadByByte</span><span class="params">(<span class="type">byte</span>[] bytes, String folder)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> ossProperties.getBucket();  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 判断Bucket的存在  </span></span><br><span class="line">        <span class="keyword">if</span> (!ossClient.doesBucketExist(bucketName)) &#123;  </span><br><span class="line">            <span class="comment">// 创建存储空间  </span></span><br><span class="line">            <span class="type">Bucket</span> <span class="variable">bucket</span> <span class="operator">=</span> ossClient.createBucket(bucketName);  </span><br><span class="line">            bucketName = bucket.getName();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(bytes);  </span><br><span class="line">  </span><br><span class="line">            <span class="type">val</span> <span class="variable">suffix</span> <span class="operator">=</span> <span class="string">&quot;jpg&quot;</span>;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.fastUUID().toString() +suffix;  </span><br><span class="line">            objectName = folder + DateUtil.format(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;yy-MM/dd&quot;</span>) + <span class="string">&quot;/&quot;</span> + fileName;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 创建上传Object的Metadata  </span></span><br><span class="line">            <span class="type">ObjectMetadata</span> <span class="variable">metadata</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMetadata</span>();  </span><br><span class="line">            <span class="comment">// 上传的文件的长度  </span></span><br><span class="line">            metadata.setContentLength(inputStream.available());  </span><br><span class="line">            <span class="comment">// 指定该Object被下载时的网页的缓存行为  </span></span><br><span class="line">            metadata.setCacheControl(<span class="string">&quot;no-cache&quot;</span>);  </span><br><span class="line">            <span class="comment">// 指定该Object下设置Header  </span></span><br><span class="line">            metadata.setHeader(<span class="string">&quot;Pragma&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);  </span><br><span class="line">            <span class="comment">// 指定该Object被下载时的内容编码格式  </span></span><br><span class="line">            metadata.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);  </span><br><span class="line">            <span class="comment">// 文件的MIME，定义文件的类型及网页编码，决定浏览器将以什么形式、什么编码读取文件。如果用户没有指定则根据Key或文件名的扩展名生成，  </span></span><br><span class="line">            <span class="comment">// 如果没有扩展名则填默认值application/octet-stream  </span></span><br><span class="line">            metadata.setContentType(AliyunOssFileTypeEnum.getText(suffix));  </span><br><span class="line">            <span class="comment">// 上传文件 (上传文件流的形式)  </span></span><br><span class="line">            <span class="type">PutObjectResult</span> <span class="variable">putResult</span> <span class="operator">=</span> ossClient.putObject(bucketName, objectName, inputStream, metadata);  </span><br><span class="line">            <span class="comment">// 解析结果  </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">resultStr</span> <span class="operator">=</span> putResult.getETag();  </span><br><span class="line">            log.info(<span class="string">&quot;唯一MD5数字签名:&quot;</span> + resultStr);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (OSSException oe) &#123;  </span><br><span class="line">            <span class="comment">// oe.printStackTrace();  </span></span><br><span class="line">            log.error(<span class="string">&quot;上传阿里云OSS服务器异常.&quot;</span> + oe.getMessage(), oe);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException ce) &#123;  </span><br><span class="line">            <span class="comment">// ce.printStackTrace();  </span></span><br><span class="line">            log.error(<span class="string">&quot;阿里云OSS服务连接异常.&quot;</span> + ce.getMessage(), ce);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">            <span class="comment">// e.printStackTrace();  </span></span><br><span class="line">            log.error(<span class="string">&quot;文件流异常.&quot;</span> + e.getMessage(), e);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;https://&quot;</span> + ossProperties.getBucket() + <span class="string">&quot;.&quot;</span> + ossProperties.getEndpoint() + <span class="string">&quot;/&quot;</span> + objectName;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 根据objectName删除OSS服务器上的文件  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objectName     模拟文件夹名 如&quot;qj_nanjing/&quot; + Bucket下的文件的路径名+文件名 如：&quot;upload/cake.jpg&quot;  </span></span><br><span class="line"><span class="comment">     */</span>   </span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">deleteFile</span><span class="params">(String objectName)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">bucketName</span> <span class="operator">=</span> ossProperties.getBucket();  </span><br><span class="line">        ossClient.deleteObject(bucketName, objectName);  </span><br><span class="line">        log.info(<span class="string">&quot;删除&quot;</span> + bucketName + <span class="string">&quot;下的文件&quot;</span> + objectName + <span class="string">&quot;成功&quot;</span>);  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 根据url获取objectName  </span></span><br><span class="line"><span class="comment">     *     * <span class="doctag">@param</span> url url  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getObjectNameByUrl</span><span class="params">(String url)</span> &#123;  </span><br><span class="line"><span class="comment">//        url = url.replace(&quot;https://&quot; + ossProperties.getBucket() + &quot;.&quot; + ossProperties.getEndpoint() + &quot;/&quot;, &quot;&quot;);  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">firstIndex</span> <span class="operator">=</span> url.indexOf(<span class="string">&quot;/&quot;</span>);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">secondIndex</span> <span class="operator">=</span> url.indexOf(<span class="string">&quot;/&quot;</span>, firstIndex + <span class="number">1</span>);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">thirdIndex</span> <span class="operator">=</span> url.indexOf(<span class="string">&quot;/&quot;</span>, secondIndex + <span class="number">1</span>);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">suffix</span> <span class="operator">=</span> url.lastIndexOf(<span class="string">&quot;?&quot;</span>) &gt; <span class="number">0</span> ? url.lastIndexOf(<span class="string">&quot;?&quot;</span>) : url.length();  </span><br><span class="line">        url = url.substring(thirdIndex + <span class="number">1</span>, suffix);  </span><br><span class="line">        <span class="keyword">return</span> url;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取上传文件url (非公共读写时)  </span></span><br><span class="line"><span class="comment">     *     * <span class="doctag">@param</span> objectName 模拟文件夹名 如&quot;qj_nanjing/&quot; + Bucket下的文件的路径名+文件名 如：&quot;upload/cake.jpg&quot;  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> url  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUrl</span><span class="params">(String objectName)</span> &#123;  </span><br><span class="line">        <span class="comment">//设置URl过期时间为99年：3600L*1000*24*365*99  </span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">expiration</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="keyword">new</span> <span class="title class_">Date</span>().getTime() + <span class="number">3600L</span> * <span class="number">1000</span> * <span class="number">24</span> * <span class="number">365</span> * <span class="number">99</span>);  </span><br><span class="line">        <span class="type">GeneratePresignedUrlRequest</span> <span class="variable">generatePresignedUrlRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeneratePresignedUrlRequest</span>(ossProperties.getBucket(), objectName);  </span><br><span class="line">        generatePresignedUrlRequest.setExpiration(expiration);  </span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> ossClient.generatePresignedUrl(generatePresignedUrlRequest);  </span><br><span class="line">        <span class="keyword">return</span> url.toString();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Minio">Minio</h3><h4 id="Maven依赖-2">Maven依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--SPI--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置文件-2">配置文件</h4><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">minio:</span>  </span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">xxxxxxxxxxxxxxxxxxxxxx</span> <span class="comment">#MinIO服务所在地址  </span></span><br><span class="line">  <span class="attr">bucketName:</span> <span class="string">xxxxxxxxxxx</span> <span class="comment">#存储桶名称  </span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">xxxxxxxxxxxxxxxx</span> <span class="comment">#访问的key  </span></span><br><span class="line">  <span class="attr">secretKey:</span> <span class="string">xxxxxxxxxxxxxxxxxxx</span> <span class="comment">#访问的秘钥</span></span><br></pre></td></tr></table></figure><h4 id="代码-2">代码</h4><ul class="lvl-0"><li class="lvl-2"><p>MinioProp.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;minio&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioProp</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> String endpoint;  </span><br><span class="line">    <span class="keyword">private</span> String accessKey;  </span><br><span class="line">    <span class="keyword">private</span> String secretKey;  </span><br><span class="line">    <span class="keyword">private</span> String bucketName;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEndpoint</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> endpoint;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEndpoint</span><span class="params">(String endpoint)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.endpoint = endpoint;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAccessKey</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> accessKey;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAccessKey</span><span class="params">(String accessKey)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.accessKey = accessKey;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSecretKey</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> secretKey;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSecretKey</span><span class="params">(String secretKey)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.secretKey = secretKey;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getBucketName</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> bucketName;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBucketName</span><span class="params">(String bucket)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.bucketName = bucket;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>OSSFile.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OSSFile</span> &#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 文件名  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> String fileName;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 文件存储地址  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> String url;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 文件ObjectName  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">private</span> String objectName;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul class="lvl-0"><li class="lvl-2"><p>MinioUtil.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@EnableConfigurationProperties(MinioProp.class)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtil</span> &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> MinioProp prop;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 创建minioClient  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="meta">@PostConstruct</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createMinioClient</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> == minioClient) &#123;  </span><br><span class="line">                log.info(<span class="string">&quot;minioClient create start&quot;</span>);  </span><br><span class="line">                minioClient = MinioClient.builder().endpoint(prop.getEndpoint())  </span><br><span class="line">                        .credentials(prop.getAccessKey(), prop.getSecretKey())  </span><br><span class="line">                        .build();  </span><br><span class="line">                createBucket();  </span><br><span class="line">                log.info(<span class="string">&quot;minioClient create end&quot;</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;连接MinIO服务器异常：&quot;</span> + e);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 初始化Bucket  </span></span><br><span class="line"><span class="comment">     *     * <span class="doctag">@throws</span> Exception 异常  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">createBucket</span><span class="params">()</span>  </span><br><span class="line">            <span class="keyword">throws</span> IOException, InvalidKeyException, InvalidResponseException, InsufficientDataException, NoSuchAlgorithmException, ServerException, InternalException, XmlParserException, InvalidBucketNameException, ErrorResponseException, RegionConflictException &#123;  </span><br><span class="line">        <span class="keyword">if</span> (!minioClient.bucketExists(BucketExistsArgs.builder().bucket(prop.getBucketName()).build())) &#123;  </span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder().bucket(prop.getBucketName()).build());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 查看存储bucket是否存在  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean  </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">bucketExists</span><span class="params">(String bucketName)</span> &#123;  </span><br><span class="line">        Boolean found;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            found = minioClient.bucketExists(BucketExistsArgs.builder().bucket(bucketName).build());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> found;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 创建存储bucket  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (!bucketExists(bucketName)) &#123;  </span><br><span class="line">                minioClient.makeBucket(MakeBucketArgs.builder()  </span><br><span class="line">                        .bucket(bucketName)  </span><br><span class="line">                        .build());  </span><br><span class="line">                <span class="type">String</span> <span class="variable">policyJson</span> <span class="operator">=</span> <span class="string">&quot;&#123;\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\&quot;Version\&quot;: \&quot;&quot;</span>+<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-mm-dd&quot;</span>).format(System.currentTimeMillis())+<span class="string">&quot;\&quot;,\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\&quot;Statement\&quot;: [&#123;\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\&quot;Effect\&quot;: \&quot;Allow\&quot;,\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\&quot;Principal\&quot;: &#123;\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\t\&quot;AWS\&quot;: [\&quot;*\&quot;]\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t&#125;,\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\&quot;Action\&quot;: [\&quot;s3:GetBucketLocation\&quot;, \&quot;s3:ListBucket\&quot;, \&quot;s3:ListBucketMultipartUploads\&quot;],\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\&quot;Resource\&quot;: [\&quot;arn:aws:s3:::&quot;</span> + bucketName + <span class="string">&quot;\&quot;]\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t&#125;, &#123;\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\&quot;Effect\&quot;: \&quot;Allow\&quot;,\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\&quot;Principal\&quot;: &#123;\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\t\&quot;AWS\&quot;: [\&quot;*\&quot;]\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t&#125;,\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\&quot;Action\&quot;: [\&quot;s3:AbortMultipartUpload\&quot;, \&quot;s3:DeleteObject\&quot;, \&quot;s3:GetObject\&quot;, \&quot;s3:ListMultipartUploadParts\&quot;, \&quot;s3:PutObject\&quot;],\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t\t\&quot;Resource\&quot;: [\&quot;arn:aws:s3:::&quot;</span> + bucketName + <span class="string">&quot;/*\&quot;]\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;\t&#125;]\n&quot;</span> +  </span><br><span class="line">                        <span class="string">&quot;&#125;\n&quot;</span>;  </span><br><span class="line">                minioClient.setBucketPolicy(SetBucketPolicyArgs.builder().bucket(bucketName).config(policyJson).build());  </span><br><span class="line">                log.info(<span class="string">&quot;buckets：【&#123;&#125;】,创建[readwrite]策略成功！&quot;</span>, bucketName);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                log.info(<span class="string">&quot;minio bucket-&gt;&gt;&gt;【&#123;&#125;】already exists&quot;</span>, bucketName);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 删除存储bucket  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">removeBucket</span><span class="params">(String bucketName)</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            minioClient.removeBucket(RemoveBucketArgs.builder()  </span><br><span class="line">                    .bucket(bucketName)  </span><br><span class="line">                    .build());  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取全部bucket  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> List&lt;Bucket&gt; <span class="title function_">getAllBuckets</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            List&lt;Bucket&gt; buckets = minioClient.listBuckets();  </span><br><span class="line">            <span class="keyword">return</span> buckets;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 文件上传  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> file 文件  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> OSSFile <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();  </span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(originalFilename))&#123;  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 重命名  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> UUID.fastUUID() + originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));  </span><br><span class="line">        <span class="type">String</span> <span class="variable">objectName</span> <span class="operator">=</span> DateUtil.format(<span class="keyword">new</span> <span class="title class_">Date</span>(), <span class="string">&quot;yy-MM/dd&quot;</span>) + <span class="string">&quot;/&quot;</span> + fileName;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">PutObjectArgs</span> <span class="variable">objectArgs</span> <span class="operator">=</span> PutObjectArgs.builder().bucket(prop.getBucketName()).object(objectName)  </span><br><span class="line">                    .stream(file.getInputStream(), file.getSize(), -<span class="number">1</span>).contentType(file.getContentType()).build();  </span><br><span class="line">            <span class="comment">//文件名称相同会覆盖  </span></span><br><span class="line">            minioClient.putObject(objectArgs);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">OSSFile</span> <span class="variable">ossFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OSSFile</span>();  </span><br><span class="line">        ossFile.setFileName(originalFilename);  </span><br><span class="line">        ossFile.setObjectName(objectName);  </span><br><span class="line">        ossFile.setUrl(prop.getEndpoint() + <span class="string">&quot;/&quot;</span> + prop.getBucketName() + <span class="string">&quot;/&quot;</span> + objectName);  </span><br><span class="line">        <span class="keyword">return</span> ossFile;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 预览图片  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">preview</span><span class="params">(String fileName)</span>&#123;  </span><br><span class="line">        <span class="comment">// 查看文件地址  </span></span><br><span class="line">        <span class="type">GetPresignedObjectUrlArgs</span> <span class="variable">build</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetPresignedObjectUrlArgs</span>().builder().bucket(prop.getBucketName()).object(fileName).method(Method.GET).build();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> minioClient.getPresignedObjectUrl(build);  </span><br><span class="line">            <span class="keyword">return</span> url;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 文件下载  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName 文件名称  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> res response  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean  </span></span><br><span class="line"><span class="comment">     */</span>    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">download</span><span class="params">(String fileName, HttpServletResponse res)</span> &#123;  </span><br><span class="line">        <span class="type">GetObjectArgs</span> <span class="variable">objectArgs</span> <span class="operator">=</span> GetObjectArgs.builder().bucket(prop.getBucketName())  </span><br><span class="line">                .object(fileName).build();  </span><br><span class="line">        <span class="keyword">try</span> (<span class="type">InputStream</span> <span class="variable">response</span> <span class="operator">=</span> minioClient.getObject(objectArgs))&#123;  </span><br><span class="line">            <span class="type">byte</span>[] buf = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];  </span><br><span class="line">            <span class="type">int</span> len;  </span><br><span class="line">            <span class="keyword">try</span> (<span class="type">FastByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastByteArrayOutputStream</span>())&#123;  </span><br><span class="line">                <span class="keyword">while</span> ((len=response.read(buf))!=-<span class="number">1</span>)&#123;  </span><br><span class="line">                    os.write(buf,<span class="number">0</span>,len);  </span><br><span class="line">                &#125;  </span><br><span class="line">                os.flush();  </span><br><span class="line">                <span class="type">byte</span>[] bytes = os.toByteArray();  </span><br><span class="line">                res.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);  </span><br><span class="line">                <span class="comment">// 设置强制下载不打开  </span></span><br><span class="line">                <span class="comment">// res.setContentType(&quot;application/force-download&quot;);  </span></span><br><span class="line">                res.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;fileName=&quot;</span> + fileName);  </span><br><span class="line">                <span class="keyword">try</span> (<span class="type">ServletOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> res.getOutputStream())&#123;  </span><br><span class="line">                    stream.write(bytes);  </span><br><span class="line">                    stream.flush();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 查看文件对象  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存储bucket内文件对象信息  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> List&lt;Item&gt; <span class="title function_">listObjects</span><span class="params">()</span> &#123;  </span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(  </span><br><span class="line">                ListObjectsArgs.builder().bucket(prop.getBucketName()).build());  </span><br><span class="line">        List&lt;Item&gt; items = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;  </span><br><span class="line">                items.add(result.get());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> items;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 删除  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(String fileName)</span>&#123;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            minioClient.removeObject( RemoveObjectArgs.builder().bucket(prop.getBucketName()).object(fileName).build());  </span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="拓展">拓展</h4><p>Minio这个被写成了SPI加载到别的服务中，这边再加一下关于SPI的知识。<img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240530/Snipaste_2024-05-30_16-20-31.png"                      alt=""                ><br>如图resources文件夹下的META-INF文件夹下的spring.factories文件。如果要把MinioUtil这个方法加载到别的项目中，可以这么写。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.hzjzxx.minio.utils.MinioUtil</span><br></pre></td></tr></table></figure><p>关于SPI的知识：</p><blockquote><p>内链：[[面试-SPI]]<br>外链：<a class="link"   href="https://kiml.site/2024/05/30/100000015/" >SPI相关<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
项目中常用到文件上传的功能。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.30 初始记录（Minio，阿里云OSS）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Minio" scheme="https://kiml.github.io/tags/Minio/"/>
    
    <category term="Oss" scheme="https://kiml.github.io/tags/Oss/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第十天-20有效的括号、1047删除字符串中的所有相邻重复项、150逆波兰表达式求值</title>
    <link href="https://kiml.github.io/2024/05/30/100000013/"/>
    <id>https://kiml.github.io/2024/05/30/100000013/</id>
    <published>2024-05-30T02:00:23.000Z</published>
    <updated>2024-05-30T03:19:09.426Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：20AC，1047AC，150AC</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.30 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="20有效的括号">20有效的括号</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/valid-parentheses/description/" >https://leetcode.cn/problems/valid-parentheses/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE20</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        System.out.println(isValid(scanner.nextLine()));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;(&#x27;</span> || c == <span class="string">&#x27;[&#x27;</span> || c == <span class="string">&#x27;&#123;&#x27;</span>) &#123;  </span><br><span class="line">                stack.push(c);  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty()) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="type">Character</span> <span class="variable">pop</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">            <span class="keyword">if</span> ((c == <span class="string">&#x27;)&#x27;</span> &amp;&amp; pop != <span class="string">&#x27;(&#x27;</span> ) || (c == <span class="string">&#x27;]&#x27;</span> &amp;&amp; pop != <span class="string">&#x27;[&#x27;</span> ) || (c == <span class="string">&#x27;&#125;&#x27;</span> &amp;&amp; pop != <span class="string">&#x27;&#123;&#x27;</span> )) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> stack.isEmpty();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1047删除字符串中的所有相邻重复项">1047删除字符串中的所有相邻重复项</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/description/" >https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">    System.out.println(removeDuplicates(scanner.nextLine()));  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">removeDuplicates</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> c : s.toCharArray()) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (stack.isEmpty()) &#123;  </span><br><span class="line">            stack.push(c);  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (c == stack.peek()) &#123;  </span><br><span class="line">            stack.pop();  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            stack.push(c);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">str</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> stack.size();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++) &#123;  </span><br><span class="line">        str.insert(<span class="number">0</span>, stack.pop());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> str.toString();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="150逆波兰表达式求值">150逆波兰表达式求值</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/" >https://leetcode.cn/problems/evaluate-reverse-polish-notation/description/<i class="fas fa-external-link-alt"></i></a>)<br>可以直接根据题目中给的链接查看<a class="link"   href="https://baike.baidu.com/item/%E9%80%86%E6%B3%A2%E5%85%B0%E5%BC%8F/128437" >逆波兰表示法<i class="fas fa-external-link-alt"></i></a>的意思</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">evalRPN</span><span class="params">(String[] tokens)</span> &#123;  </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(tokens[<span class="number">0</span>]);  </span><br><span class="line">    <span class="keyword">for</span> (String token : tokens) &#123;  </span><br><span class="line">        <span class="keyword">switch</span> (token) &#123;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>: &#123;  </span><br><span class="line">                num = stack.pop() + stack.pop();  </span><br><span class="line">                stack.push(num);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>: &#123;  </span><br><span class="line">                <span class="type">Integer</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">                <span class="type">Integer</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">                num = num1 - num2;  </span><br><span class="line">                stack.push(num);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>: &#123;  </span><br><span class="line">                num = stack.pop() * stack.pop();  </span><br><span class="line">                stack.push(num);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>: &#123;  </span><br><span class="line">                <span class="type">Integer</span> <span class="variable">num2</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">                <span class="type">Integer</span> <span class="variable">num1</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">                num = num1 / num2;  </span><br><span class="line">                stack.push(num);  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">default</span>: &#123;  </span><br><span class="line">                stack.push(Integer.parseInt(token));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> num;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看解析</h1><h2 id="20有效的括号-2">20有效的括号</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0020.%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7.html" >https://programmercarl.com/0020.有效的括号.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="1047删除字符串中的所有相邻重复项-2">1047删除字符串中的所有相邻重复项</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/1047.%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E6%89%80%E6%9C%89%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9.html" >https://programmercarl.com/1047.删除字符串中的所有相邻重复项.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="150逆波兰表达式求值-2">150逆波兰表达式求值</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0150.%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC.html" >https://programmercarl.com/0150.逆波兰表达式求值.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：20AC，1047AC，150AC&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.30 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="栈" scheme="https://kiml.github.io/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第九天-232用栈实现队列、225用队列实现栈</title>
    <link href="https://kiml.github.io/2024/05/30/100000012/"/>
    <id>https://kiml.github.io/2024/05/30/100000012/</id>
    <published>2024-05-30T01:01:47.000Z</published>
    <updated>2024-05-30T02:18:46.525Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：都是直接看的解析，不是很难。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.30 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="232用栈实现队列">232用栈实现队列</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/implement-queue-using-stacks/description/" >https://leetcode.cn/problems/implement-queue-using-stacks/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE232</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">MyQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyQueue</span>();  </span><br><span class="line">        queue.push(<span class="number">1</span>);  </span><br><span class="line">        queue.push(<span class="number">2</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;queue.peek() = &quot;</span> + queue.peek());  </span><br><span class="line">        System.out.println(<span class="string">&quot;queue.pop() = &quot;</span> + queue.pop());  </span><br><span class="line">        System.out.println(<span class="string">&quot;queue.empty() = &quot;</span> + queue.empty());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyQueue</span> &#123;  </span><br><span class="line">        Stack&lt;Integer&gt; stackIn;  </span><br><span class="line">        Stack&lt;Integer&gt; stackOut;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyQueue</span><span class="params">()</span> &#123;  </span><br><span class="line">            stackIn = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">            stackOut = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;  </span><br><span class="line">            stackIn.push(x);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="comment">// 把in的内容复制到out  </span></span><br><span class="line">            in2out();  </span><br><span class="line">            <span class="keyword">return</span> stackOut.pop();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">in2out</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (stackOut.isEmpty()) &#123;  </span><br><span class="line">                <span class="keyword">while</span> (!stackIn.isEmpty()) &#123;  </span><br><span class="line">                    stackOut.push(stackIn.pop());  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment">         * 返回列表开头的数据  </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">peek</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="comment">// 把in的内容复制到out  </span></span><br><span class="line">            in2out();  </span><br><span class="line">            <span class="keyword">return</span> stackOut.peek();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> stackIn.empty() &amp;&amp; stackOut.empty();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="225用队列实现栈">225用队列实现栈</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/implement-queue-using-stacks/description/" >https://leetcode.cn/problems/implement-queue-using-stacks/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE225</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">MyStack</span> <span class="variable">myStack</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyStack</span>();  </span><br><span class="line">        myStack.push(<span class="number">1</span>);  </span><br><span class="line">        myStack.push(<span class="number">2</span>);  </span><br><span class="line">        System.out.println(<span class="string">&quot;myStack.top() = &quot;</span> + myStack.top());  </span><br><span class="line">        System.out.println(<span class="string">&quot;myStack.pop() = &quot;</span> + myStack.pop());  </span><br><span class="line">        System.out.println(<span class="string">&quot;myStack.empty() = &quot;</span> + myStack.empty());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;  </span><br><span class="line">        Queue&lt;Integer&gt; queue;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;  </span><br><span class="line">            queue = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(<span class="type">int</span> x)</span> &#123;  </span><br><span class="line">            queue.offer(x);  </span><br><span class="line">            <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> queue.size() - <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">while</span> (size != <span class="number">0</span>) &#123;  </span><br><span class="line">                size--;  </span><br><span class="line">                queue.offer(queue.poll());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">pop</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> queue.poll();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">top</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> queue.peek();  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment">         * 判断是否为空  </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">empty</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> queue.isEmpty();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看讲解</h1><h2 id="232用栈实现队列-2">232用栈实现队列</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97.html" >https://programmercarl.com/0232.用栈实现队列.html<i class="fas fa-external-link-alt"></i></a>)<br>思路：用栈模拟队列需要两个栈。一个栈作为入栈，一个栈作为出栈。如果出栈为空，将入栈中的元素压入出栈。<br><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240530/232.%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97%E7%89%88%E6%9C%AC2.gif"                      alt=""                ></p><h2 id="225用队列实现栈-2">225用队列实现栈</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0225.%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88.html" >https://programmercarl.com/0225.用队列实现栈.html<i class="fas fa-external-link-alt"></i></a>)<br>思路：用队列模拟栈，可以只用一个队列。每当有新元素入队列，将原有的旧元素重新入队列，这样新元素就变成栈顶元素。（<strong>一个队列在模拟栈弹出元素的时候只要将队列头部的元素（除了最后一个元素外） 重新添加到队列尾部，此时再去弹出元素就是栈的顺序了。</strong>）<br><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240530/Snipaste_2024-05-30_09-56-06.png"                      alt=""                ></p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：都是直接看的解析，不是很难。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.30 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="栈" scheme="https://kiml.github.io/tags/%E6%A0%88/"/>
    
    <category term="队列" scheme="https://kiml.github.io/tags/%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第八天-28实现 strStr() 、459重复的子字符串</title>
    <link href="https://kiml.github.io/2024/05/29/100000011/"/>
    <id>https://kiml.github.io/2024/05/29/100000011/</id>
    <published>2024-05-29T01:03:06.000Z</published>
    <updated>2024-06-01T02:42:48.548Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：28暴力（应为KMP）、459暴力（KMP不会）</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-05-29 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="28实现-strStr">28实现 strStr()</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/" >https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE28</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">haystack</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">needle</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        System.out.println(strStr(haystack, needle));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 思路：一个指针针对haystack遍历，一个指针针对needle遍历  </span></span><br><span class="line"><span class="comment">     * 当指针指过的路径相等，输出两者的差（即初始相等的指针位置）  </span></span><br><span class="line"><span class="comment">     * 当指向元素不同，haystack指针指向初始对比的下一个，needle指针重置  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">strStr</span><span class="params">(String haystack, String needle)</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; haystack.length(); i++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (j == needle.length() - <span class="number">1</span>) &#123;  </span><br><span class="line">                    <span class="keyword">return</span> i - j;  </span><br><span class="line">                &#125;  </span><br><span class="line">                j++;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                i = i - j;  </span><br><span class="line">                j = <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span>  -<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="459重复的子字符串">459重复的子字符串</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/repeated-substring-pattern/description/" >https://leetcode.cn/problems/repeated-substring-pattern/description/<i class="fas fa-external-link-alt"></i></a>)<br>（虽然讲了KMP应该就用KMP，但是不会）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暴力求解</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE459</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">nextLine</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        System.out.println(repeatedSubstringPattern(nextLine));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> s.length();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i * <span class="number">2</span> &lt;= n; i++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (n % i == <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> <span class="literal">true</span>;  </span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; n; j++) &#123;  </span><br><span class="line">                    <span class="keyword">if</span> (s.charAt(j) != s.charAt(j - i)) &#123;  </span><br><span class="line">                        match = <span class="literal">false</span>;  </span><br><span class="line">                        <span class="keyword">break</span>;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">if</span> (match) &#123;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看讲解</h1><h2 id="28实现-strStr-2">28实现 strStr()</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html" >https://programmercarl.com/0028.实现strStr.html<i class="fas fa-external-link-alt"></i></a>)<br>本题应该用KMP思路，这个算法主要用在字符串匹配上。KMP的经典思想就是:<strong>当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：使用KMP算法。  </span></span><br><span class="line"><span class="comment"> * 之前双指针移动，不相等haystack的指针返回到初始匹配位置的下一位（暴力求解）  </span></span><br><span class="line"><span class="comment"> * 现在使用KMP算法，不相等移动到next表中标记的位置。  </span></span><br><span class="line"><span class="comment"> * 所以现在的关键就在于next表的计算：  </span></span><br><span class="line"><span class="comment"> * 1.初始化  </span></span><br><span class="line"><span class="comment"> * 2.当前后缀不相等时的思路（回退）  </span></span><br><span class="line"><span class="comment"> * 3.当前后缀相等时的思路（继续后移）  </span></span><br><span class="line"><span class="comment"> * 内部相当于也进行了KMP</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">strStr1</span><span class="params">(String haystack, String needle)</span> &#123;  </span><br><span class="line">    <span class="comment">// 获取Next表  </span></span><br><span class="line">    <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[needle.length()];  </span><br><span class="line">    <span class="type">int</span>[] next = getNext(ints, needle);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (needle.length() == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; haystack.length(); i++) &#123;  </span><br><span class="line">        <span class="comment">// 不相等, j回退  </span></span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">0</span> &amp;&amp; haystack.charAt(i) != needle.charAt(j)) &#123;  </span><br><span class="line">            j = next[j - <span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 相等  </span></span><br><span class="line">        <span class="keyword">if</span> (haystack.charAt(i) == needle.charAt(j)) &#123;  </span><br><span class="line">            <span class="comment">// 完全匹配，返回下标  </span></span><br><span class="line">            <span class="keyword">if</span> (j == needle.length() - <span class="number">1</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> i - j;  </span><br><span class="line">            &#125;  </span><br><span class="line">            j++;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span>  -<span class="number">1</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 获取next表，例：  </span></span><br><span class="line"><span class="comment"> * a a b a a f  </span></span><br><span class="line"><span class="comment"> * 0 1 0 1 2 0 * * 1.初始化  </span></span><br><span class="line"><span class="comment"> * 2.当前后缀不相等时的思路（回退）  </span></span><br><span class="line"><span class="comment"> * 3.当前后缀相等时的思路（继续后移）  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> next 返回的next数组  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s 要求的字符串  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> next数组  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getNext(<span class="type">int</span>[] next, String s) &#123;  </span><br><span class="line">    <span class="comment">// 初始化 两个指针i和j，j指向前缀末尾位置(同时也是之前最长相等的前后缀长度)，i指向后缀末尾位置(随着字符串长度递增，递增)。  </span></span><br><span class="line">    <span class="comment">// 刚刚初始化时，字符串为a，所以j = 0  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    next[<span class="number">0</span>] = j;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 这里i从1开始，没有搞懂(因为初始位置一定为0吗)  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j)) &#123;  </span><br><span class="line">            j = next[j - <span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;  </span><br><span class="line">            j++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        next[i] = j;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> next;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="459重复的子字符串-2">459重复的子字符串</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0459.%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2.html" >https://programmercarl.com/0459.重复的子字符串.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * KMP思路  </span></span><br><span class="line"><span class="comment"> * 如果这个字符串是由重复子串组成的，那么字符串长度-最长相等前后缀就为重复子串的长度  </span></span><br><span class="line"><span class="comment"> * 反过来说，如果一个字符串的最长相等前后缀与长度的差值（即可能是重复子串长度的这个值）能被字符串长度整除，那么就说明这个字符串是由重复子串组成的  </span></span><br><span class="line"><span class="comment"> * 但是这个反过来说。需要证明。（虽然画了几种情况都是这样）  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * KMP复习：  </span></span><br><span class="line"><span class="comment"> * 1.初始化  </span></span><br><span class="line"><span class="comment"> * 2.不相等的情况  </span></span><br><span class="line"><span class="comment"> * 3.相等的情况  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">repeatedSubstringPattern1</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] next = getNext(s);  </span><br><span class="line">    <span class="comment">// 这里除了上面说的条件之外，还需要加上next[len - 1] != -1, 这说明字符串有最长相同的前后缀（就是字符串里的前缀子串和后缀子串相同的最长长度）  </span></span><br><span class="line">    <span class="keyword">return</span> next[s.length() - <span class="number">1</span>] != <span class="number">0</span> &amp;&amp; s.length() % (s.length() - next[s.length() - <span class="number">1</span>]) == <span class="number">0</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span>[] getNext(String s) &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span>[] next = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()];  </span><br><span class="line">    next[j] = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; s.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">while</span> (j != <span class="number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j)) &#123;  </span><br><span class="line">            j = next[j - <span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;  </span><br><span class="line">            j++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        next[i] = j;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> next;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：28暴力（应为KMP）、459暴力（KMP不会）&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-05-29 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="双指针" scheme="https://kiml.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="字符串" scheme="https://kiml.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="KMP" scheme="https://kiml.github.io/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第七天-344反转字符串、541反转字符串II、卡码网54替换数字、151翻转字符串里的单词、卡码网55右旋转字符串</title>
    <link href="https://kiml.github.io/2024/05/27/100000010/"/>
    <id>https://kiml.github.io/2024/05/27/100000010/</id>
    <published>2024-05-27T01:25:11.000Z</published>
    <updated>2024-06-01T03:10:55.304Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：都是可以写出来的。但是有些与参考种给出的解析思路不同。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.27 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="344反转字符串">344反转字符串</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/reverse-string/description/" >https://leetcode.cn/problems/reverse-string/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE344</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        reverseString(scanner.nextLine().toCharArray());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] s)</span> &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = s.length - <span class="number">1</span>; i &lt;= j; i++, j--) &#123;  </span><br><span class="line">            <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> s[i];  </span><br><span class="line">            s[i] = s[j];  </span><br><span class="line">            s[j] = temp;  </span><br><span class="line">        &#125;  </span><br><span class="line">        System.out.println(Arrays.toString(s));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="541反转字符串II">541反转字符串II</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/reverse-string-ii/description/" >https://leetcode.cn/problems/reverse-string-ii/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE541</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        System.out.println(reverseStr(scanner.nextLine(), Integer.parseInt(scanner.nextLine())));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 画图翻译了一下  </span></span><br><span class="line"><span class="comment">     * 大概意思就是奇数段反转  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverseStr</span><span class="params">(String s, <span class="type">int</span> k)</span> &#123;  </span><br><span class="line">        <span class="comment">// 判断能拆分成几段  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> s.length() / k;  </span><br><span class="line">        <span class="keyword">if</span> (s.length() % k != <span class="number">0</span>) &#123;  </span><br><span class="line">            size = size + <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">reverseStr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= size; i++) &#123;  </span><br><span class="line">            <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> s.substring((i - <span class="number">1</span>) * k, Math.min(i * k, s.length()));  </span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> != <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="type">char</span>[] chars = substring.toCharArray();  </span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">0</span>, m = chars.length - <span class="number">1</span>; n &lt;= m; n++, m--) &#123;  </span><br><span class="line">                    <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[n];  </span><br><span class="line">                    chars[n] = chars[m];  </span><br><span class="line">                    chars[m] = temp;  </span><br><span class="line">                &#125;  </span><br><span class="line">                reverseStr.append(chars);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                reverseStr.append(substring);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> reverseStr.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="卡码网54替换数字">卡码网54替换数字</h2><p>题目链接：(<a class="link"   href="https://kamacoder.com/problempage.php?pid=1064" >https://kamacoder.com/problempage.php?pid=1064<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CM54</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        System.out.println(replaceNumber(scanner.nextLine()));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceNumber</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : chars) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&#x27;0&#x27;</span> &lt;= c &amp;&amp; <span class="string">&#x27;9&#x27;</span> &gt;= c) &#123;  </span><br><span class="line">                stringBuilder.append(<span class="string">&quot;number&quot;</span>);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                stringBuilder.append(c);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="151翻转字符串里的单词">151翻转字符串里的单词</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/reverse-words-in-a-string/description/" >https://leetcode.cn/problems/reverse-words-in-a-string/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">    System.out.println(reverseWords(scanner.nextLine()));  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    String[] split = s.trim().split(<span class="string">&quot; &quot;</span>);  </span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> split.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">trim</span> <span class="operator">=</span> split[i].trim();  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(trim)) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        stringBuilder.append(trim).append(<span class="string">&quot; &quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> stringBuilder.toString().trim();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="卡码网55右旋转字符串">卡码网55右旋转字符串</h2><p>题目链接：(<a class="link"   href="https://kamacoder.com/problempage.php?pid=1065" >https://kamacoder.com/problempage.php?pid=1065<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CM55</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        System.out.println(rightString(k, s));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">rightString</span><span class="params">(<span class="type">int</span> k, String s)</span> &#123;  </span><br><span class="line">        <span class="comment">// 过界判断  </span></span><br><span class="line">        <span class="keyword">if</span> (k &gt;= s.length() || k &lt;= <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> s;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> s.substring(s.length() - k) + s.substring(<span class="number">0</span>, s.length() - k);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看讲解</h1><h2 id="344反转字符串-2">344反转字符串</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0344.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2.html" >https://programmercarl.com/0344.反转字符串.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="541反转字符串II-2">541反转字符串II</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0541.%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2II.html" >https://programmercarl.com/0541.反转字符串II.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="卡码网54替换数字-2">卡码网54替换数字</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/kamacoder/0054.%E6%9B%BF%E6%8D%A2%E6%95%B0%E5%AD%97.html" >https://programmercarl.com/kamacoder/0054.替换数字.html<i class="fas fa-external-link-alt"></i></a>)<br>根据讲解，这题本意是先扩充再分配。要用到双指针的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">replaceNumber</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>; <span class="comment">// 统计数字的个数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">sOldSize</span> <span class="operator">=</span> s.length();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(Character.isDigit(s.charAt(i)))&#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 扩充字符串s的大小，也就是每个空格替换成&quot;number&quot;之后的大小</span></span><br><span class="line">        <span class="type">char</span>[] newS = <span class="keyword">new</span> <span class="title class_">char</span>[s.length() + count * <span class="number">5</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sNewSize</span> <span class="operator">=</span> newS.length;</span><br><span class="line">        <span class="comment">// 将旧字符串的内容填入新数组</span></span><br><span class="line">        System.arraycopy(s.toCharArray(), <span class="number">0</span>, newS, <span class="number">0</span>, sOldSize);</span><br><span class="line">        <span class="comment">// 从后先前将空格替换为&quot;number&quot;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> sNewSize - <span class="number">1</span>, j = sOldSize - <span class="number">1</span>; j &lt; i; j--, i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!Character.isDigit(newS[j])) &#123;</span><br><span class="line">                newS[i] = newS[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                newS[i] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">2</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">3</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">4</span>] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">                newS[i - <span class="number">5</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">                i -= <span class="number">5</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(newS);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        System.out.println(replaceNumber(s));</span><br><span class="line">        scanner.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="151翻转字符串里的单词-2">151翻转字符串里的单词</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0151.%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D.html" >https://programmercarl.com/0151.翻转字符串里的单词.html<i class="fas fa-external-link-alt"></i></a>)<br>这题。。。Java不好像没有办法空间复杂度为O(n)。（面试的话，不太清楚会不会这么细，平时可能就直接API搞定了。。。一般机考也不会考这个吧😶‍🌫️）只能说思路很重要：</p><ul class="lvl-0"><li class="lvl-2"><p>移除多余空格（）</p></li><li class="lvl-2"><p>将整个字符串反转</p></li><li class="lvl-2"><p>将每个单词反转</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE151</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        System.out.println(reverseWords(scanner.nextLine()));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 本题考察点应该和上一题一样  </span></span><br><span class="line"><span class="comment">     * 步骤如下:  </span></span><br><span class="line"><span class="comment">     * 1.移除字符串中的空格  </span></span><br><span class="line"><span class="comment">     * 2.倒序  </span></span><br><span class="line"><span class="comment">     * 3.每个单词再反转  </span></span><br><span class="line"><span class="comment">     * 要求：不使用任何内置API  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">reverseWords</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">removeSpace</span> <span class="operator">=</span> removeSpace(s);  </span><br><span class="line">        System.out.println(removeSpace);  </span><br><span class="line">        <span class="keyword">return</span> reverseWord(removeSpace);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 单个单词倒置  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">reverseWord</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">        String[] list = s.split(<span class="string">&quot; &quot;</span>);  </span><br><span class="line">        <span class="keyword">if</span> (list.length &lt;= <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">        <span class="keyword">for</span> (String s1 : list) &#123;  </span><br><span class="line">            <span class="type">char</span>[] chars = s1.toCharArray();  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = chars.length - <span class="number">1</span>; i &lt;= j; i++, j--) &#123;  </span><br><span class="line">                <span class="type">char</span> <span class="variable">temp</span> <span class="operator">=</span> chars[i];  </span><br><span class="line">                chars[i] = chars[j];  </span><br><span class="line">                chars[j] = temp;  </span><br><span class="line">            &#125;  </span><br><span class="line">            stringBuilder.append(chars).append(<span class="string">&quot; &quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> stringBuilder.substring(<span class="number">0</span>, stringBuilder.length() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 去除字符串中的多余空格  </span></span><br><span class="line"><span class="comment">     * 并进行倒序  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String <span class="title function_">removeSpace</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();  </span><br><span class="line">        <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> s.length() - <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">while</span> (s.charAt(start) == <span class="string">&#x27; &#x27;</span>) &#123;  </span><br><span class="line">            start++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (s.charAt(end) == <span class="string">&#x27; &#x27;</span>) &#123;  </span><br><span class="line">            end--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> end; i &gt;= start; i--) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (chars[i] == <span class="string">&#x27; &#x27;</span> &amp;&amp; chars[i - <span class="number">1</span>] == <span class="string">&#x27; &#x27;</span>) &#123;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            stringBuilder.append(chars[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> stringBuilder.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="卡码网55右旋转字符串-2">卡码网55右旋转字符串</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/kama55.%E5%8F%B3%E6%97%8B%E5%AD%97%E7%AC%A6%E4%B8%B2.html" >https://programmercarl.com/kama55.右旋字符串.html<i class="fas fa-external-link-alt"></i></a>)<br>这题也是。。。反正直接用API了，看了说《剑指Offer》有差不多的题目。没有再写一遍，直接抄了解析中的写法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(in.nextLine());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> in.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> s.length();  <span class="comment">//获取字符串长度</span></span><br><span class="line">        <span class="type">char</span>[] chars = s.toCharArray();</span><br><span class="line">        reverseString(chars, <span class="number">0</span>, len - <span class="number">1</span>);  <span class="comment">//反转整个字符串</span></span><br><span class="line">        reverseString(chars, <span class="number">0</span>, n - <span class="number">1</span>);  <span class="comment">//反转前一段字符串，此时的字符串首尾尾是0,n - 1</span></span><br><span class="line">        reverseString(chars, n, len - <span class="number">1</span>);  <span class="comment">//反转后一段字符串，此时的字符串首尾尾是n,len - 1</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(chars);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">reverseString</span><span class="params">(<span class="type">char</span>[] ch, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;</span><br><span class="line">        <span class="comment">//异或法反转字符串，参照题目 344.反转字符串的解释</span></span><br><span class="line">        <span class="keyword">while</span> (start &lt; end) &#123;</span><br><span class="line">            ch[start] ^= ch[end];</span><br><span class="line">            ch[end] ^= ch[start];</span><br><span class="line">            ch[start] ^= ch[end];</span><br><span class="line">            start++;</span><br><span class="line">            end--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：都是可以写出来的。但是有些与参考种给出的解析思路不同。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.27 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="双指针" scheme="https://kiml.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="字符串" scheme="https://kiml.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="反转" scheme="https://kiml.github.io/tags/%E5%8F%8D%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第六天-454四数相加II、383赎金信、15三数之和、18四数之和</title>
    <link href="https://kiml.github.io/2024/05/24/100000009/"/>
    <id>https://kiml.github.io/2024/05/24/100000009/</id>
    <published>2024-05-24T07:04:00.000Z</published>
    <updated>2024-05-24T12:44:14.699Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：454和383可以AC，15超时，18根据15做出，还可以进一步优化</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.24 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="454四数相加II">454四数相加II</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/4sum-ii/" >https://leetcode.cn/problems/4sum-ii/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE454</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">int</span>[] nums1 = Arrays.stream(scanner.nextLine().split(<span class="string">&quot;,&quot;</span>)).filter(Objects::nonNull).mapToInt(Integer::parseInt).toArray();  </span><br><span class="line">        <span class="type">int</span>[] nums2 = Arrays.stream(scanner.nextLine().split(<span class="string">&quot;,&quot;</span>)).filter(Objects::nonNull).mapToInt(Integer::parseInt).toArray();  </span><br><span class="line">        <span class="type">int</span>[] nums3 = Arrays.stream(scanner.nextLine().split(<span class="string">&quot;,&quot;</span>)).filter(Objects::nonNull).mapToInt(Integer::parseInt).toArray();  </span><br><span class="line">        <span class="type">int</span>[] nums4 = Arrays.stream(scanner.nextLine().split(<span class="string">&quot;,&quot;</span>)).filter(Objects::nonNull).mapToInt(Integer::parseInt).toArray();  </span><br><span class="line">        System.out.println(fourSumCount(nums1, nums2, nums3, nums4));  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 和昨天的最后一题差不多</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fourSumCount</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2, <span class="type">int</span>[] nums3, <span class="type">int</span>[] nums4)</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> k : nums1) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i : nums2) &#123;  </span><br><span class="line">                <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> k + i;  </span><br><span class="line">                map.put(sum, map.getOrDefault(sum, <span class="number">0</span>) + <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums3) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j : nums4) &#123;  </span><br><span class="line">                res += map.getOrDefault(-i - j, <span class="number">0</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> res;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="383赎金信">383赎金信</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/ransom-note/submissions/534463469/" >https://leetcode.cn/problems/ransom-note/submissions/534463469/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE383</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">ransomNote</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">magazine</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        System.out.println(canConstruct(ransomNote, magazine));  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 和242一样的思路</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> &#123;  </span><br><span class="line">        <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];  </span><br><span class="line">        <span class="comment">// 遍历存储数量  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; magazine.length(); i++) &#123;  </span><br><span class="line">            ints[magazine.charAt(i) - <span class="number">97</span>]++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 遍历扣除数量  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ransomNote.length(); i++) &#123;  </span><br><span class="line">            ints[ransomNote.charAt(i) - <span class="number">97</span>]--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : ints) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15三数之和">15三数之和</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/3sum/description/" >https://leetcode.cn/problems/3sum/description/<i class="fas fa-external-link-alt"></i></a>)<br>暴力解法，但是这样超时了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="comment">// 判断是否重复  </span></span><br><span class="line">    HashMap&lt;String, List&lt;Integer&gt;&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> j + <span class="number">1</span>; k &lt; nums.length; k++) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (nums[i] + nums[j] + nums[k] == <span class="number">0</span>) &#123;  </span><br><span class="line">                    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">                    list.add(nums[i]);  </span><br><span class="line">                    list.add(nums[j]);  </span><br><span class="line">                    list.add(nums[k]);  </span><br><span class="line">                    list.sort(Integer::compareTo);  </span><br><span class="line">                    map.put(list.stream().map(integer -&gt; integer + <span class="string">&quot;&quot;</span>).collect(Collectors.joining(<span class="string">&quot;,&quot;</span>)), list);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;Integer&gt;&gt; stringListEntry : map.entrySet()) &#123;  </span><br><span class="line">        list.add(stringListEntry.getValue());  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> list;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看了部分解析改用双指针，可以通过，但是比较慢。而且费时</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    nums = Arrays.stream(nums).sorted().toArray();  </span><br><span class="line">    ArrayList&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// 递增序列，前三位和大于0，直接返回  </span></span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] + nums[<span class="number">1</span>] + nums[<span class="number">2</span>] &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> list;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">while</span> (i &lt; j &amp;&amp; j &lt; k) &#123;  </span><br><span class="line">        System.out.println(i + <span class="string">&quot; &quot;</span> + j + <span class="string">&quot; &quot;</span> + k);  </span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[j] + nums[k];  </span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="number">0</span>) &#123;  </span><br><span class="line">            list.add(Arrays.asList(nums[i], nums[j], nums[k]));  </span><br><span class="line">            j++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            j++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            k--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (j &gt; i + <span class="number">1</span> &amp;&amp; j &lt;= nums.length - <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;  </span><br><span class="line">            j++;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">while</span> (k &gt; j &amp;&amp; k != nums.length - <span class="number">1</span> &amp;&amp; nums[k] == nums[k + <span class="number">1</span>]) &#123;  </span><br><span class="line">            k--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (j &gt;= k) &#123;  </span><br><span class="line">            i = i + <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">while</span> (i != <span class="number">0</span> &amp;&amp; i &lt;= nums.length - <span class="number">1</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">                i++;  </span><br><span class="line">            &#125;  </span><br><span class="line">            j = i + <span class="number">1</span>;  </span><br><span class="line">            k = nums.length - <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> list;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18四数之和">18四数之和</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/4sum/description/" >https://leetcode.cn/problems/4sum/description/<i class="fas fa-external-link-alt"></i></a>)<br>看到题目，就觉得是15的进阶版，按照上一题的思路写了一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">    Arrays.sort(nums);  </span><br><span class="line">  </span><br><span class="line">    ArrayList&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (i != <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j != i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;  </span><br><span class="line">                <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>) nums[i] + (<span class="type">long</span>) nums[j] + (<span class="type">long</span>) nums[left] + (<span class="type">long</span>) nums[right];  </span><br><span class="line">                <span class="keyword">if</span> (sum &lt; target) &#123;  </span><br><span class="line">                    left++;  </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;  </span><br><span class="line">                    right--;  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                    list.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));  </span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;  </span><br><span class="line">                        left++;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;  </span><br><span class="line">                        right--;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    left++;  </span><br><span class="line">                    right--;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> list;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看讲解</h1><h2 id="454四数相加II-2">454四数相加II</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0454.%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II.html" >https://programmercarl.com/0454.四数相加II.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="383赎金信-2">383赎金信</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0383.%E8%B5%8E%E9%87%91%E4%BF%A1.html" >https://programmercarl.com/0383.赎金信.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="15三数之和-2">15三数之和</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0015.%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C.html" >https://programmercarl.com/0015.三数之和.html<i class="fas fa-external-link-alt"></i></a>)<br>确实用for循环更好理解。题解的思路更加清晰，而且更快。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">threeSum</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    Arrays.sort(nums);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 排序之后如果第一个元素已经大于零，那么无论如何组合都不可能凑成三元组，直接返回结果就可以了  </span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> result;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">/**  </span></span><br><span class="line"><span class="comment">         * 只能是与前一个比较进行去重  </span></span><br><span class="line"><span class="comment">         */</span>  </span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> i + <span class="number">1</span>;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;  </span><br><span class="line">        <span class="keyword">while</span> (right &gt; left) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> nums[i] + nums[left] + nums[right];  </span><br><span class="line">            <span class="keyword">if</span> (sum &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">                right--;  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                left++;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                result.add(Arrays.asList(nums[i], nums[left], nums[right]));  </span><br><span class="line">                <span class="comment">/**  </span></span><br><span class="line"><span class="comment">                 * 去重逻辑应该放在找到一个三元组之后  </span></span><br><span class="line"><span class="comment">                 * 否则获取不到结果集  </span></span><br><span class="line"><span class="comment">                 */</span>  </span><br><span class="line">                <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;  </span><br><span class="line">                    right--;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">while</span> (right &gt; left &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;  </span><br><span class="line">                    left++;  </span><br><span class="line">                &#125;  </span><br><span class="line">  </span><br><span class="line">                right--;  </span><br><span class="line">                left++;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18四数之和-2">18四数之和</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0018.%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C.html" >https://programmercarl.com/0018.四数之和.html<i class="fas fa-external-link-alt"></i></a>)<br>看了解析。加上剪枝操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">fourSum</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">    Arrays.sort(nums);  </span><br><span class="line">  </span><br><span class="line">    ArrayList&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// nums[i] &gt; target 直接返回, 剪枝操作  </span></span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span> &amp;&amp; nums[i] &gt; target) &#123;  </span><br><span class="line">            <span class="keyword">return</span> list;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; nums.length; j++) &#123; </span><br><span class="line">        <span class="comment">// 二级剪枝</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] + nums[j] &gt; <span class="number">0</span> &amp;&amp; nums[i] + nums[j] &gt; target) &#123;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (j != i + <span class="number">1</span> &amp;&amp; nums[j] == nums[j - <span class="number">1</span>]) &#123;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> j + <span class="number">1</span>;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> nums.length - <span class="number">1</span>;  </span><br><span class="line">            <span class="keyword">while</span> (left &lt; right) &#123;  </span><br><span class="line">                <span class="type">long</span> <span class="variable">sum</span> <span class="operator">=</span> (<span class="type">long</span>) nums[i] + (<span class="type">long</span>) nums[j] + (<span class="type">long</span>) nums[left] + (<span class="type">long</span>) nums[right];  </span><br><span class="line">                <span class="keyword">if</span> (sum &lt; target) &#123;  </span><br><span class="line">                    left++;  </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (sum &gt; target) &#123;  </span><br><span class="line">                    right--;  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                    list.add(Arrays.asList(nums[i], nums[j], nums[left], nums[right]));  </span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[left] == nums[left + <span class="number">1</span>]) &#123;  </span><br><span class="line">                        left++;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    <span class="keyword">while</span> (left &lt; right &amp;&amp; nums[right] == nums[right - <span class="number">1</span>]) &#123;  </span><br><span class="line">                        right--;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    left++;  </span><br><span class="line">                    right--;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> list;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：454和383可以AC，15超时，18根据15做出，还可以进一步优化&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.24 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="双指针" scheme="https://kiml.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="哈希表" scheme="https://kiml.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>【代码模板】阿里云接口实现短信发送</title>
    <link href="https://kiml.github.io/2024/05/24/100000007/"/>
    <id>https://kiml.github.io/2024/05/24/100000007/</id>
    <published>2024-05-24T03:26:12.000Z</published>
    <updated>2024-06-01T02:43:13.820Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>阿里云接口实现短信发送。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.24 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>依赖</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--sms验证服务--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alicloud-sms<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>代码</h1><ol><li class="lvl-3"><p><code>Service</code>中要添加的代码</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span>  </span><br><span class="line"><span class="keyword">public</span> Boolean <span class="title function_">sendCode</span><span class="params">(String phone)</span> &#123;  </span><br><span class="line">    <span class="comment">//非空校验  </span></span><br><span class="line">    <span class="keyword">if</span> (Strings.isNullOrEmpty(phone)) &#123;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LogicException</span>(<span class="string">&quot;手机号为空&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">StringBuilder</span> <span class="variable">sbCode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();  </span><br><span class="line">    <span class="comment">// 6位随机密码</span></span><br><span class="line">    Stream.generate(() -&gt; <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">10</span>))  </span><br><span class="line">            .limit(<span class="number">6</span>)  </span><br><span class="line">            .forEach(sbCode::append);  </span><br><span class="line">    <span class="comment">//将验证码放入redis, 5分钟过期  </span></span><br><span class="line">    redisTemplate.opsForValue().set(phone, sbCode.toString(), Duration.ofMinutes(<span class="number">5</span>));  </span><br><span class="line">    log.info(<span class="string">&quot;短信验证码：&quot;</span> + sbCode.toString());  </span><br><span class="line">    <span class="keyword">return</span> smsSender.sendMsg(phone, sbCode.toString());  </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p><code>SmsConfig.java</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="meta">@RefreshScope</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsConfig</span> &#123;  </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sms.operator.signName&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String signName;  </span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sms.operator.templateCode&#125;&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String templateCode;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSignName</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> signName;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTemplateCode</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> templateCode;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>配置文件中添加</p></li></ol><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sms:</span></span><br><span class="line">  <span class="attr">operator:</span></span><br><span class="line">    <span class="attr">signName:</span> <span class="string">你的signName</span></span><br><span class="line">    <span class="attr">templateCode:</span> <span class="string">你的templateCode</span>  </span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p><code>SmsSender.java</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmsSender</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> SmsConfig smsConfig;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> ISmsService smsService;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 发送验证码短信  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> telephone 手机号  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code     手机验证码  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sendMsg</span><span class="params">(String telephone, String code)</span> &#123;  </span><br><span class="line">        <span class="type">SendSmsRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SendSmsRequest</span>();  </span><br><span class="line">  </span><br><span class="line">        request.setPhoneNumbers(telephone);  </span><br><span class="line">        request.setSignName(smsConfig.getSignName());  </span><br><span class="line">        request.setTemplateCode(smsConfig.getTemplateCode());  </span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();  </span><br><span class="line">        <span class="type">JsonNode</span> <span class="variable">rootNode</span> <span class="operator">=</span> mapper.createObjectNode();  </span><br><span class="line">        <span class="comment">// 存入验证码  </span></span><br><span class="line">        ((ObjectNode) rootNode).put(<span class="string">&quot;code&quot;</span>, code);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            request.setTemplateParam(mapper.writeValueAsString(rootNode));  </span><br><span class="line">            <span class="type">val</span> <span class="variable">sendSmsResponse</span> <span class="operator">=</span> smsService.sendSmsRequest(request);  </span><br><span class="line">            log.info(<span class="string">&quot;短信发送接收：&quot;</span> + JSONUtil.toJsonPrettyStr(sendSmsResponse));  </span><br><span class="line">            <span class="keyword">if</span> (sendSmsResponse.getCode() != <span class="literal">null</span> &amp;&amp; <span class="string">&quot;OK&quot;</span>.equals(sendSmsResponse.getCode())) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LogicException</span>(<span class="string">&quot;验证码发送失败：&quot;</span> + sendSmsResponse.getMessage());  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;send sms error.&quot;</span> + e.getMessage());  </span><br><span class="line">            <span class="type">val</span> <span class="variable">operLog</span> <span class="operator">=</span> OperLog.builder().title(<span class="string">&quot;发送验证码&quot;</span>)  </span><br><span class="line">                    .businessType(BusinessType.OTHER.ordinal())  </span><br><span class="line">                    .operParam(JSONUtil.toJsonPrettyStr(request))  </span><br><span class="line">                    .status(BusinessStatus.FAIL.ordinal())  </span><br><span class="line">                    .errorMsg(e.getMessage())  </span><br><span class="line">                    .build();  </span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordOper(operLog));  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">LogicException</span>(<span class="string">&quot;验证码发送失败&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
阿里云接口实现短信发送。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.24 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="代码模板" scheme="https://kiml.github.io/tags/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第五天-242有效的字母异位词、349两个数组的交集、202快乐数、1两数之和</title>
    <link href="https://kiml.github.io/2024/05/23/100000006/"/>
    <id>https://kiml.github.io/2024/05/23/100000006/</id>
    <published>2024-05-23T07:55:10.000Z</published>
    <updated>2024-05-23T10:58:27.253Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：全部可以AC。看了解析之后，242、202可再优化。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.23 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="242有效的字母异位词">242有效的字母异位词</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/valid-anagram/description/" >https://leetcode.cn/problems/valid-anagram/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE242</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">t</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        System.out.println(isAnagram(s, t));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 思路：  </span></span><br><span class="line"><span class="comment">     * 1.用map接收每个字符出现的次数  </span></span><br><span class="line"><span class="comment">     * 2.比较次数是否相同  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnagram</span><span class="params">(String s, String t)</span> &#123;  </span><br><span class="line">        <span class="type">char</span>[] charsS = s.toCharArray();  </span><br><span class="line">        <span class="type">char</span>[] charsT = t.toCharArray();  </span><br><span class="line">  </span><br><span class="line">        HashMap&lt;String, Integer&gt; numMapS = getNumMap(charsS);  </span><br><span class="line">        HashMap&lt;String, Integer&gt; numMapT = getNumMap(charsT);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (numMapS.size() != numMapT.size()) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">for</span> (String key : numMapS.keySet()) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (!numMapS.get(key).equals(numMapT.get(key))) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 获取每个字符的数量  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> charsS 字符串  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 每个字符的数量  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, Integer&gt; <span class="title function_">getNumMap</span><span class="params">(<span class="type">char</span>[] charsS)</span> &#123;  </span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : charsS) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(String.valueOf(c))) &#123;  </span><br><span class="line">                map.put(String.valueOf(c) , map.get(String.valueOf(c)) + <span class="number">1</span>);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                map.put(String.valueOf(c), <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> map;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="349两个数组的交集">349两个数组的交集</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/intersection-of-two-arrays/description/" >https://leetcode.cn/problems/intersection-of-two-arrays/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE349</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="type">int</span>[] nums1 = Arrays.stream(scanner.nextLine().split(<span class="string">&quot;,&quot;</span>)).filter(Objects::nonNull).mapToInt(Integer::parseInt).toArray();</span><br><span class="line">        <span class="type">int</span>[] nums2 = Arrays.stream(scanner.nextLine().split(<span class="string">&quot;,&quot;</span>)).filter(Objects::nonNull).mapToInt(Integer::parseInt).toArray();</span><br><span class="line">        <span class="type">int</span>[] intersection = intersection(nums1, nums2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] intersection(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        HashSet&lt;Integer&gt; intersection = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums1) &#123;</span><br><span class="line">            set.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i : nums2) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(i)) &#123;</span><br><span class="line">                intersection.add(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> intersection.stream().filter(Objects::nonNull).mapToInt(i -&gt; i).toArray();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="202快乐数">202快乐数</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/happy-number/description/" >https://leetcode.cn/problems/happy-number/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE202</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        System.out.println(isHappy(Integer.parseInt(s)));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 思路：放到set中，重复或者为1，跳出循环  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否是快乐数  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isHappy</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">        HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> n + <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        set.add(n);  </span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; num.length(); i++) &#123;  </span><br><span class="line">                sum += Math.pow(Integer.parseInt(num.charAt(i) + <span class="string">&quot;&quot;</span>), <span class="number">2</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (sum == <span class="number">1</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (set.contains(sum)) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            num = sum + <span class="string">&quot;&quot;</span>;  </span><br><span class="line">            set.add(sum);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1两数之和">1两数之和</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/two-sum/" >https://leetcode.cn/problems/two-sum/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE1</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">int</span>[] nums = Arrays.stream(scanner.nextLine().split(<span class="string">&quot;,&quot;</span>)).filter(Objects::nonNull).mapToInt(Integer::parseInt).toArray();  </span><br><span class="line">        <span class="type">int</span> <span class="variable">target</span> <span class="operator">=</span> Integer.parseInt(scanner.next());  </span><br><span class="line">        twoSum(nums, target);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 暴力解法肯定是循环两遍  </span></span><br><span class="line"><span class="comment">     * 但是这题放在哈希表专题里，就应该哈希表也能解决  </span></span><br><span class="line"><span class="comment">     * 用值为key，下标为value放入map  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums, <span class="type">int</span> target) &#123;  </span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(target - nums[i])) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(target - nums[i]), i&#125;;  </span><br><span class="line">            &#125;  </span><br><span class="line">            map.put(nums[i], i);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看讲解</h1><h2 id="242有效的字母异位词-2">242有效的字母异位词</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0242.%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D.html" >https://programmercarl.com/0242.有效的字母异位词.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 优化：  </span></span><br><span class="line"><span class="comment"> * 改为定义数组去接收数值（其实和map是一样的思想，但是这样代码量更少）  </span></span><br><span class="line"><span class="comment"> * 改为第二次遍历，在原数组上直接--（空间用得更少了）  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isAnagram1</span><span class="params">(String s, String t)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] record = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;  </span><br><span class="line">        record[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; t.length(); i++) &#123;  </span><br><span class="line">        record[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> count : record) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (count != <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="349两个数组的交集-2">349两个数组的交集</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0349.%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86.html" >https://programmercarl.com/0349.两个数组的交集.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="202快乐数-2">202快乐数</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0202.%E5%BF%AB%E4%B9%90%E6%95%B0.html" >https://programmercarl.com/0202.快乐数.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以再优化，一个数各个位数平方求和</span></span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> n % <span class="number">10</span>;  </span><br><span class="line">    sum += temp * temp;  </span><br><span class="line">    n = n / <span class="number">10</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1两数之和-2">1两数之和</h2><p>题目链接/文章讲解/视频讲解：(<a class="link"   href="https://programmercarl.com/0001.%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C.html" >https://programmercarl.com/0001.两数之和.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：全部可以AC。看了解析之后，242、202可再优化。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.23 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="哈希表" scheme="https://kiml.github.io/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>RestTemplate使用GET请求，返回中文乱码</title>
    <link href="https://kiml.github.io/2024/05/23/100000004/"/>
    <id>https://kiml.github.io/2024/05/23/100000004/</id>
    <published>2024-05-23T03:35:55.000Z</published>
    <updated>2024-05-23T06:46:43.190Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.23 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>问题</h1><p>测试 RestTemplate 的 Get 请求，返回中文乱码。</p><h1>原因</h1><p>当 RestTemplate 默认使用 String 存储 body 内容时默认使用 ISO_8859_1 字符集。</p><h1>解决</h1><p>配置 StringHttpMessageConverter 消息转换器，使用 utf-8 字符集。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span>  </span><br><span class="line"><span class="keyword">public</span> RestTemplate <span class="title function_">restTemplate</span><span class="params">()</span> &#123;  </span><br><span class="line">    <span class="type">RestTemplate</span> <span class="variable">restTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RestTemplate</span>(<span class="keyword">new</span> <span class="title class_">OkHttp3ClientHttpRequestFactory</span>());  </span><br><span class="line">    <span class="comment">//消息转换器列表  </span></span><br><span class="line">    List&lt;HttpMessageConverter&lt;?&gt;&gt; messageConverters = restTemplate.getMessageConverters();  </span><br><span class="line">    <span class="comment">//配置消息转换器StringHttpMessageConverter，并设置utf‐8  </span></span><br><span class="line">    messageConverters.set(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">StringHttpMessageConverter</span>(StandardCharsets.UTF_8));  </span><br><span class="line">    <span class="keyword">return</span> restTemplate;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.23 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="bug记录" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/"/>
    
    <category term="2024" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/2024/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="BUG" scheme="https://kiml.github.io/tags/BUG/"/>
    
    <category term="RestTemplate" scheme="https://kiml.github.io/tags/RestTemplate/"/>
    
  </entry>
  
  <entry>
    <title>聚合支付-功能实现</title>
    <link href="https://kiml.github.io/2024/05/23/100000008/"/>
    <id>https://kiml.github.io/2024/05/23/100000008/</id>
    <published>2024-05-23T01:59:53.000Z</published>
    <updated>2024-06-01T03:35:01.479Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>第一部分-商户注册和资质申请</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24.05.23 初始记录（商户注册&amp;资质申请）</span><br><span class="line">24.05.29 获取短信验证码</span><br><span class="line">24.05.30 文件上传</span><br></pre></td></tr></table></figure><span id="more"></span><h1>商户注册&amp;资质申请</h1><h2 id="系统交互流程">系统交互流程</h2><p><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240523/Snipaste_2024-05-23_09-58-03.png"                      alt=""                ><br>商户注册的流程由商户平台应用、商户服务、SaaS平台、验证码服务四个微服务之间进行交互完成，各微服务的职责介绍如下：<br>1）商户平台应用：此应用主要为商户提供业务功能，包括：商户资质申请、员工管理、门店管理等功能。<br>2）商户服务： 提供商户管理的相关服务接口，供其它微服务调用，主要为商户平台应用提供接口服务，功能包括：商户基本信息管理、资质申请、商户应用管理、渠道参数配置、商户员工信息管理、商户门店管理等。<br>3）SaaS平台：闪聚支付项目是一个SaaS平台 ，所谓SaaS平台即多个用户租用平台的业务功能，这样用户即可省去软件系统开发的成本，每个商户就是一个租户，所以又称为多租户系统。 SaaS平台提供租户管理、账号管理、权限管理、资源管理、套餐管理、系统认证授权等功业务功能。在上图商户注册的流程中，商户注册的账号等信息需要写入SaaS平台，由SaaS平台统一管理账号，分配权限，商户统一通过SaaS平台登录闪聚支付。<br>4）验证码服务：提供获取短信验证码、校验验证码的接口。 商户使用手机号进行注册，平台通过校验手机验证码来确认是否本人在注册。<br><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240529/Snipaste_2024-05-29_17-04-38.png"                      alt=""                ></p><h2 id="获取短信验证码">获取短信验证码</h2><p>短信验证码为一个开源的服务，可单独开启使用。开源git地址：(<a class="link"   href="https://github.com/fightingape/sailing" >https://github.com/fightingape/sailing<i class="fas fa-external-link-alt"></i></a>)</p><blockquote><p>大致看了一下这个开源项目是根据传入的业务名称，获取配置好的code长度和Service实现。后续应该还可以加入别的实现（比如阿里云的短信服务等）</p><p>其中生成验证信息这个方法。<br>1.根据业务名称+随机UUID生成key存入redis。这个key会返回给服务请求方。<br>2.根据配置好的Map获取名称对应的len即code码长度，如果传入不存在的name，会直接报错。<br>3.验证服务就是根据返回给服务请求方的key，查询Redis缓存是否存在，不存在返回false，即验证码错误。</p></blockquote><p>本项目中没有使用，只是简单控制台打印了一下。也可以直接在这个服务里存入redis（因为要申请开通阿里云短信服务有点麻烦，又要多部署一个服务，而且这个功能比较简单不打算花时间开通了）。</p><p>之前有写过阿里云的短信，关联文章：</p><blockquote><p>内链：[[【代码模板】阿里云接口实现短信发送]]<br>外链：<a class="link"   href="https://kiml.site/2024/05/24/100000007/" >【代码模板】阿里云接口实现短信发送<i class="fas fa-external-link-alt"></i></a></p></blockquote><h2 id="文件上传">文件上传</h2><p>资质申请的流程中涉及到了文件上传的功能。之前已经写过使用Minio作为文件服务器和用阿里云OSS作为文件存储两种方式。这里的上传直接把七牛云换成了Minio。顺便整理了一下之前写过的两种方式。文件上传：</p><blockquote><p>内链：[[【代码模板】文件存储]]<br>外链：<a class="link"   href="https://kiml.site/2024/05/30/100000014/" >【代码模板】文件存储<i class="fas fa-external-link-alt"></i></a></p></blockquote><h1>支付参数配置</h1><blockquote><p>这个部分是项目的核心，之前做别的项目的时候，接触了微信支付和支付宝支付。就和这个项目中说的一样，用户只能先选择支付类型。再调用对应的接口获取支付二维码。而通过聚合支付这个平台，可以只生成一个链接，根据用户扫码，跳转不同的支付。</p></blockquote><p><strong>商户应该配置哪些第三方支付渠道的参数</strong><br>服务类型是闪聚支付平台为商户提供的聚合支付服务通道，共分为线上和线下两大类：</p><p>线上支付服务通道：</p><ol><li class="lvl-3"><p>手机APP支付</p></li><li class="lvl-3"><p>PC网页支付</p></li><li class="lvl-3"><p>手机网页支付</p></li><li class="lvl-3"><p>小程序支付线下支付服务通道：</p></li><li class="lvl-3"><p>收款码支付(C扫B)：即商户出示付款码，用户扫收款码完成支付。</p></li><li class="lvl-3"><p>B扫C：即顾客出示付款码，商户扫描付款码。</p></li></ol><h2 id="系统交互流程-2">系统交互流程</h2><ul class="lvl-0"><li class="lvl-2"><p>商户应用创建流程<br><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240530/Snipaste_2024-05-30_21-35-45.png"                      alt=""                ></p></li><li class="lvl-2"><p>商户渠道参数配置交互流程<img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240530/Snipaste_2024-05-30_21-53-28.png"                      alt=""                ><br>交易服务职责：提供支付渠道参数配置、订单、发起支付、转账、退款等功能。</p></li></ul><h1>对接SAAS</h1><h2 id="系统交互流程-3">系统交互流程</h2><p>商户注册时与SAAS的交互流程已经在商户注册模块给出。</p><h2 id="分布式认证需求">分布式认证需求</h2><ol><li class="lvl-3"><p>统一认证授权分布式系统的每个服务（系统）都会有认证、授权的需求，如果每个服务都实现一套认证授权逻辑会非常冗余，考虑分布式系统共享性的特点，需要由独立的认证服务来处理系统认证授权的请求。如下图，闪聚支付平台包括：商户平台应用、运营平台应用、门户应用，每个应用都需要身份认证，闪聚支付平台统一由UAA认证服务完成认证。<br><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240531/Snipaste_2024-05-31_17-47-47.png"                      alt=""                ></p></li><li class="lvl-3"><p>开放认证体系考虑分布式系统开放性的特点，UAA认证服务不仅服务于平台自身，并且对第三方系统也要提供认证，平台应提供扩展和开放的认证机制，以开放API的方式供第三方应用接入，一方应用（内部系统服务）和三方应用（第三方应用）均采用统一机制接入。</p></li></ol><h1>BUG记录</h1><h2 id="RestTemplate使用GET请求，返回中文乱码">RestTemplate使用GET请求，返回中文乱码</h2><blockquote><p>内链：[[RestTemplate使用GET请求，返回中文乱码]]<br>外链：<a class="link"   href="https://kiml.site/2024/05/23/100000004/" >RestTemplate使用GET请求，返回中文乱码<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
第一部分-商户注册和资质申请&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.23 初始记录（商户注册&amp;amp;资质申请）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24.05.29 获取短信验证码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24.05.30 文件上传&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="聚合支付" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E8%81%9A%E5%90%88%E6%94%AF%E4%BB%98/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>优化 Hexo 网站的永久链接格式</title>
    <link href="https://kiml.github.io/2024/05/22/100000002/"/>
    <id>https://kiml.github.io/2024/05/22/100000002/</id>
    <published>2024-05-22T02:34:33.000Z</published>
    <updated>2024-05-23T06:57:04.990Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>浏览之前引用的文章地址，突然发现，地址全部变成了404。后来发现每次发布，地址链接都会改变。所以记录一下，怎么处理这个问题。</p></li><li class="lvl-2"><p>参考文章</p></li></ul><blockquote><p><a class="link"   href="https://blog.dejavu.moe/posts/hexo-permalinks/" >优化 Hexo 网站的永久链接格式<i class="fas fa-external-link-alt"></i></a></p></blockquote><ul class="lvl-0"><li class="lvl-2">更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.22 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><p>打开Hexo配置文件可以看到原先的配置处为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">https://kiml.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:hash.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br></pre></td></tr></table></figure><p>照理说这样配置也是没有问题的，由于hash值的计算与文章标题有关，可能是因为这样，重新发布后，有部分页面会直接变成404的状态。</p><h2 id="优化">优化</h2><h3 id="安装插件">安装插件</h3><p>在 Hexo 根目录打开终端安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用npm安装插件</span></span><br><span class="line">npm install hexo-abbrlink2 --save</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用yarn安装插件</span></span><br><span class="line">yarn add hexo-abbrlink2</span><br></pre></td></tr></table></figure><h3 id="修改配置">修改配置</h3><p>修改 Hexo 的配置文件的 <code>permalink</code> 字段。<strong>好像abbrlink的值月份内是有可能重复的？不加day有部分文章生成的链接是相同的不知道怎么回事</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permalink: :year/:month/:day/:abbrlink/</span><br></pre></td></tr></table></figure><p>插件配置默认为0，这里设置成100000000，添加到配置文件处</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">start:</span> <span class="number">100</span> <span class="comment"># 启起始文章id，默认为0 ，可以自定义，比如100</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
浏览之前引用的文章地址，突然发现，地址全部变成了404。后来发现每次发布，地址链接都会改变。所以记录一下，怎么处理这个问题。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;参考文章&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://blog.dejavu.moe/posts/hexo-permalinks/&quot; &gt;优化 Hexo 网站的永久链接格式&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;更新&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.22 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="博客" scheme="https://kiml.github.io/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
  </entry>
  
  <entry>
    <title>聚合支付-环境搭建</title>
    <link href="https://kiml.github.io/2024/05/16/100000004/"/>
    <id>https://kiml.github.io/2024/05/16/100000004/</id>
    <published>2024-05-16T09:09:54.000Z</published>
    <updated>2024-05-22T08:39:37.825Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>环境搭建先是在windows本机上，后面听说在windows上可以下载docker，所以会补充windows上的docker内的环境安装。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.16 初始记录（windows系统的环境安装）</span><br></pre></td></tr></table></figure><span id="more"></span><h1>服务端搭建</h1><h2 id="开发环境">开发环境</h2><p>Java 1.8 这个网上教程很多，就不赘述了。<br>Maven 使用本地仓库，可配置下载镜像路径。</p><h2 id="Nacos服务发现与配置中心">Nacos服务发现与配置中心</h2><p>微服务开发需要构建服务发现中心、配置中心，本项目采用Nacos来实现。可以直接导入项目nacos文件夹下面的配置文件。注意需要新建命名空间，并修改配置文件中的命名空间变量。</p><h2 id="Mybatis-Plus">Mybatis Plus</h2><p>本项目数据库使用 mysql-community-5.7，请自行安装MySQL数据库。本项目持久层采用Mybatis Plus作为技术构架，Mybatis Plus是在Mybatis基础上作了很好的封装，方便系统开 发。</p><h2 id="导入项目SQL">导入项目SQL</h2><p>使用客户端连接MySQL，执行项目sql文件夹下面的<code>shanjupay-init.sql</code>文件。数据库清单如下：</p><table><thead><tr><th>数据库名称</th><th>数据内容</th></tr></thead><tbody><tr><td>shanjupay_merchant_service</td><td>用户中心数据</td></tr><tr><td>shanjupay_transaction</td><td>交易服务数据库</td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="搭建项目服务">搭建项目服务</h2><table><thead><tr><th>服务名</th><th>职责</th><th></th></tr></thead><tbody><tr><td>商户平台应用(shanjupay-merchant-application)</td><td>为前端提供商户管理功能</td><td></td></tr><tr><td>商户服务API(shanjupay-merchant-api)</td><td>实现商户服务提供的接口</td><td></td></tr><tr><td>商户服务(shanjupay-merchant-service)</td><td>实现商户服务的所有接口</td><td></td></tr><tr><td>工程在架构中的位置如下：</td><td></td><td></td></tr><tr><td><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240521/Snipaste_2024-05-21_14-35-21.png"                      alt=""                ></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
环境搭建先是在windows本机上，后面听说在windows上可以下载docker，所以会补充windows上的docker内的环境安装。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.16 初始记录（windows系统的环境安装）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="聚合支付" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E8%81%9A%E5%90%88%E6%94%AF%E4%BB%98/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四天-24两两交换链表中的节点、19删除链表的倒数第N个节点、面试题02.07.链表相交、142环形链表II</title>
    <link href="https://kiml.github.io/2024/05/16/100000005/"/>
    <id>https://kiml.github.io/2024/05/16/100000005/</id>
    <published>2024-05-16T07:41:07.000Z</published>
    <updated>2024-06-01T02:56:09.531Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：24需要看部分题解才能AC，19直接看的题解解题，面试题02.07可以AC（但是还有一种解法，完全想不到），142不会（第一次做真的有人能有思路吗🥲）</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24.05.16 初始记录</span><br><span class="line">24.05.22 后两题的完成</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="24两两交换链表中的节点">24两两交换链表中的节点</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/swap-nodes-in-pairs/description/" >https://leetcode.cn/problems/swap-nodes-in-pairs/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一遍完全没有看题解的写法，不能通过</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LE707.ListNode <span class="title function_">swapPairs</span><span class="params">(LE707.ListNode head)</span> &#123;  </span><br><span class="line">    <span class="keyword">while</span> (head.next != <span class="literal">null</span>) &#123;  </span><br><span class="line">        LE707.<span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> head.next.next;  </span><br><span class="line">        head.next.next = head;  </span><br><span class="line">        head.next = temp;  </span><br><span class="line">        head = head.next.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> head;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二遍看了部分文字题解</span></span><br><span class="line"><span class="comment">// 发现少了头节点，即前一个节点的后节点的指向那一步</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LE707.ListNode <span class="title function_">swapPairs</span><span class="params">(LE707.ListNode head)</span> &#123;  </span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">dumyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LE707</span>.ListNode(-<span class="number">1</span>);  </span><br><span class="line">    dumyHead.next = head;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 记录当前节点的位置，便于循环  </span></span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> dumyHead;  </span><br><span class="line">    <span class="keyword">while</span> (cur.next != <span class="literal">null</span> &amp;&amp; cur.next.next != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="comment">// 记录原来，后一个节点需要指向的节点  </span></span><br><span class="line">        LE707.<span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next.next.next;  </span><br><span class="line">        LE707.<span class="type">ListNode</span> <span class="variable">node2</span> <span class="operator">=</span> cur.next.next;  </span><br><span class="line">        LE707.<span class="type">ListNode</span> <span class="variable">node1</span> <span class="operator">=</span> cur.next;  </span><br><span class="line"></span><br><span class="line">        cur.next = node2;  </span><br><span class="line">        cur.next.next = node1;  </span><br><span class="line">        cur.next.next.next = temp;  </span><br><span class="line">        cur = node1;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> dumyHead.next;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="19删除链表的倒数第N个节点">19删除链表的倒数第N个节点</h2><p>题目链接：<a class="link"   href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/" >https://leetcode.cn/problems/remove-nth-node-from-end-of-list/description/<i class="fas fa-external-link-alt"></i></a><br>这道题直接看的解析。</p><h2 id="面试题02-07链表相交">面试题02.07链表相交</h2><p>题目链接：<a class="link"   href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/" >https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/description/<i class="fas fa-external-link-alt"></i></a><br>提交是可以的，但是本地跑不行，看了一下可能是本地测试的add方法，每次都是新建一个对象，两个链表中的对象地址是不一致的，导致<code>tempA == tempB</code>这一步始终判断失败。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：最后都会合成到一个链  </span></span><br><span class="line"><span class="comment"> * 可以把两个链按末尾对其，即较长链的指针起始与短链对齐  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headA headA  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> headB headB  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 相交部分  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LE707.ListNode <span class="title function_">getIntersectionNode</span><span class="params">(LE707.ListNode headA, LE707.ListNode headB)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">intersectVal</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">skipA</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">skipB</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">tempA</span> <span class="operator">=</span> headA;  </span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">tempB</span> <span class="operator">=</span> headB;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sizeA</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (tempA != <span class="literal">null</span>) &#123;  </span><br><span class="line">        sizeA++;  </span><br><span class="line">        tempA = tempA.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sizeB</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">while</span> (tempB != <span class="literal">null</span>) &#123;  </span><br><span class="line">        sizeB++;  </span><br><span class="line">        tempB = tempB.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (sizeA == <span class="number">0</span> || sizeB == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    tempA = headA;  </span><br><span class="line">    tempB = headB;  </span><br><span class="line">    <span class="comment">// 尾端对其  </span></span><br><span class="line">    <span class="keyword">if</span> (sizeA &gt;= sizeB) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; (sizeA - sizeB); i++) &#123;  </span><br><span class="line">            tempA = tempA.next;  </span><br><span class="line">            skipA++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; (sizeB - sizeA); i++) &#123;  </span><br><span class="line">            tempB = tempB.next;  </span><br><span class="line">            skipB++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 不相同，指针后移  </span></span><br><span class="line">    <span class="keyword">while</span> (tempA != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (tempA == tempB) &#123;  </span><br><span class="line">            intersectVal = tempA.val;  </span><br><span class="line">            <span class="keyword">return</span> tempA;  </span><br><span class="line">        &#125;  </span><br><span class="line">        tempA = tempA.next;  </span><br><span class="line">        tempB = tempB.next;  </span><br><span class="line">        skipA++;  </span><br><span class="line">        skipB++;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142环形链表II">142环形链表II</h2><p>题目链接：<a class="link"   href="https://leetcode.cn/problems/linked-list-cycle-ii/description/" >https://leetcode.cn/problems/linked-list-cycle-ii/description/<i class="fas fa-external-link-alt"></i></a><br>不会，直接看的解析。</p><h1>看讲解</h1><h2 id="24两两交换链表中的节点-2">24两两交换链表中的节点</h2><p>题目链接/文章讲解/视频讲解：：<a class="link"   href="https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html" >https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html<i class="fas fa-external-link-alt"></i></a><br>这题看题解图会比较容易：<img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240521/Snipaste_2024-05-21_10-58-53.png"                      alt=""                ><br>看完根据这个图，总算是写出来了。也还有别的方法（递归）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">swapPairs</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="comment">// base case 退出提交</span></span><br><span class="line">        <span class="keyword">if</span>(head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) <span class="keyword">return</span> head;</span><br><span class="line">        <span class="comment">// 获取当前节点的下一个节点</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">next</span> <span class="operator">=</span> head.next;</span><br><span class="line">        <span class="comment">// 进行递归</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">newNode</span> <span class="operator">=</span> swapPairs(next.next);</span><br><span class="line">        <span class="comment">// 这里进行交换</span></span><br><span class="line">        next.next = head;</span><br><span class="line">        head.next = newNode;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注：将步骤二三互换，可以不定义temp节点。</p><h2 id="19删除链表的倒数第N个节点-2">19删除链表的倒数第N个节点</h2><p>题目链接/文章讲解/视频讲解：<a class="link"   href="https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html" >https://programmercarl.com/0019.%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9.html<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 第一想法是获取长度，然后长度-n得到节点位置。因为节点这个初始化操作之前是写了size的  </span></span><br><span class="line"><span class="comment"> * 但是题目中是没有这个初始化操作的。  </span></span><br><span class="line"><span class="comment"> * 直接看的解析，说是用快慢双指针的方式。  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LE707.ListNode <span class="title function_">removeNthFromEnd</span><span class="params">(LE707.ListNode head, <span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="comment">// 添加一个虚拟头节点  </span></span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">dumyHead</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LE707</span>.ListNode(-<span class="number">1</span>);  </span><br><span class="line">    dumyHead.next = head;  </span><br><span class="line">  </span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> dumyHead;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;  </span><br><span class="line">        fast = fast.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> dumyHead;  </span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;  </span><br><span class="line">        fast = fast.next;  </span><br><span class="line">        slow = slow.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 此时慢指针指向的为要删除节点的前一个节点  </span></span><br><span class="line">    slow.next = slow.next.next;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dumyHead.next;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>步骤一：先移动快指针，快指针移动的位置与n相同。步骤二：同时移动快慢指针，当快指针下一节点的位置为0时，此时慢指针指向的位置为要删除的节点的前一节点。步骤三：删除指定节点。注：为了避免多处理头节点的情况，添加虚拟头节点。</p><h2 id="面试题02-07链表相交-2">面试题02.07链表相交</h2><p>题目链接/文章讲解：<a class="link"   href="https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html" >https://programmercarl.com/%E9%9D%A2%E8%AF%95%E9%A2%9802.07.%E9%93%BE%E8%A1%A8%E7%9B%B8%E4%BA%A4.html<i class="fas fa-external-link-alt"></i></a><br>除了初步题解那种解法，还有一种，但是不是很能看懂理解，可以说第一次完全想不到，下面是解法和图解：<br><a class="link"   href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/solutions/1190240/mian-shi-ti-0207-lian-biao-xiang-jiao-sh-b8hn/" >https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/solutions/1190240/mian-shi-ti-0207-lian-biao-xiang-jiao-sh-b8hn/<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 合并链表实现移动</span></span><br><span class="line"><span class="keyword">public</span> ListNode <span class="title function_">getIntersectionNode</span><span class="params">(ListNode headA, ListNode headB)</span> &#123;</span><br><span class="line"><span class="comment">// p1 指向 A 链表头结点，p2 指向 B 链表头结点</span></span><br><span class="line"><span class="type">ListNode</span> <span class="variable">p1</span> <span class="operator">=</span> headA, p2 = headB;</span><br><span class="line"><span class="keyword">while</span> (p1 != p2) &#123;</span><br><span class="line"><span class="comment">// p1 走一步，如果走到 A 链表末尾，转到 B 链表</span></span><br><span class="line"><span class="keyword">if</span> (p1 == <span class="literal">null</span>) p1 = headB;</span><br><span class="line"><span class="keyword">else</span>            p1 = p1.next;</span><br><span class="line"><span class="comment">// p2 走一步，如果走到 B 链表末尾，转到 A 链表</span></span><br><span class="line"><span class="keyword">if</span> (p2 == <span class="literal">null</span>) p2 = headA;</span><br><span class="line"><span class="keyword">else</span>            p2 = p2.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="142环形链表II-2">142环形链表II</h2><p>题目链接/文章讲解/视频讲解：<a class="link"   href="https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html" >https://programmercarl.com/0142.%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II.html<i class="fas fa-external-link-alt"></i></a><br><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240522/Snipaste_2024-05-22_15-08-45.png"                      alt=""                ><br><strong>题解思路</strong>：</p><ol><li class="lvl-3"><p>如何判断链表是否有环：首先这题使用快慢指针解法。如果无环，那么快指针到最后也不会与慢指针相遇；如果可以相遇，则说明有环。</p></li><li class="lvl-3"><p>快指针一定先进入环形，慢指针后进入环形。当慢指针进入环形时，就变成了追击问题，由快追击慢。因为指定快指针速度为2个节点，慢指针为1个节点，相对速度为1个节点，因此快慢一定会在环内相遇。</p></li><li class="lvl-3"><p>如图所示：假设相遇在点P，入口在start，三段路径分别如图所示，则此时A的行走路径为：<code>x + n(y + z) + y</code>，B的行走路径为<code>x + y</code></p></li><li class="lvl-3"><p>又因为快指针速度为满指针的两倍，所以<code>x + n(y + z) + y = 2(x + y)</code>，得出<code>x = n(y + z) - y</code>，等式变形为<code>x = (n - 1)(y + z) + z</code>，又<code>n &gt;= 1</code>。可以简化为，在相遇处，出发处各设一个指针，一起移动，两个指针一定会相遇。相遇处即为<code>start</code>。</p></li></ol><p><strong>疑难点</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Q：为什么B的路径一定在一圈以内？</span><br></pre></td></tr></table></figure><p>A：关键在<strong>当慢指针进入环形时，就变成了追击问题</strong>。也就是说，快指针的追击路线一定小于一圈，即追击时间一定不够慢指针跑满一圈。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Q：快慢指针一定会在环内相遇？</span><br></pre></td></tr></table></figure><p>A：因为指定快指针速度为2个节点，慢指针为1个节点，相对速度为1个节点，因此快慢一定会在环内相遇。（如果快指针的速度为3，那就可能会跳过了）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> LE707.ListNode <span class="title function_">detectCycle</span><span class="params">(LE707.ListNode head)</span> &#123;  </span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">fast</span> <span class="operator">=</span> head;  </span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">slow</span> <span class="operator">=</span> head;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">while</span> (fast!= <span class="literal">null</span>  &amp;&amp; fast.next != <span class="literal">null</span>) &#123;  </span><br><span class="line">        fast = fast.next.next;  </span><br><span class="line">        slow = slow.next;  </span><br><span class="line">        <span class="comment">// 找到相遇点  </span></span><br><span class="line">        <span class="keyword">if</span> (slow == fast) &#123;  </span><br><span class="line">            LE707.<span class="type">ListNode</span> <span class="variable">index1</span> <span class="operator">=</span> head;  </span><br><span class="line">            LE707.<span class="type">ListNode</span> <span class="variable">index2</span> <span class="operator">=</span> fast;  </span><br><span class="line">            <span class="keyword">while</span> (index1 != index2) &#123;  </span><br><span class="line">                index1 = index1.next;  </span><br><span class="line">                index2 = index2.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">return</span> index1;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：24需要看部分题解才能AC，19直接看的题解解题，面试题02.07可以AC（但是还有一种解法，完全想不到），142不会（第一次做真的有人能有思路吗🥲）&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.16 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24.05.22 后两题的完成&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="双指针" scheme="https://kiml.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="链表" scheme="https://kiml.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="虚拟头节点" scheme="https://kiml.github.io/tags/%E8%99%9A%E6%8B%9F%E5%A4%B4%E8%8A%82%E7%82%B9/"/>
    
    <category term="环形链表" scheme="https://kiml.github.io/tags/%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>聚合支付-项目介绍</title>
    <link href="https://kiml.github.io/2024/05/15/100000004/"/>
    <id>https://kiml.github.io/2024/05/15/100000004/</id>
    <published>2024-05-15T08:16:29.000Z</published>
    <updated>2024-05-23T02:20:34.349Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>之前的项目已经接触了支付宝、微信、银联三种支付方式了。正好辞职把这个项目写一遍，看了技术栈有一些是没有接触过的，应该能学到很多。</p><p>项目git地址：<a class="link"   href="https://gitee.com/kiml_rgb/shanjupay.git" >https://gitee.com/kiml_rgb/shanjupay.git<i class="fas fa-external-link-alt"></i></a></p><p>前端项目地址：<a class="link"   href="https://gitee.com/kiml_rgb/shanjupay_web" >https://gitee.com/kiml_rgb/shanjupay_web<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24.05.16 初始记录（抄了一些项目描述）</span><br></pre></td></tr></table></figure><span id="more"></span><h1>项目概述</h1><p>聚合支付目前主要的做法就是线上聚合收银台(开放API)，线下C2B一码多付、线下B2C商家扫码。平台应以SaaS服务形式提供给各商户订单管理、门店管理、财务数据统计等基础服务，闪聚支付还以支付为入口，通过广告、营销、金融等服务，构建一个移动支付的全生态系统。</p><h1>功能模块</h1><p>平台主要包括三个模块：官网&amp;开放平台、商户平台、运营平台，详细功能如下：<br><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240515/Snipaste_2024-05-15_16-28-50.png"                      alt=""                ></p><table><thead><tr><th>功能模块名称</th><th>功能说明</th></tr></thead><tbody><tr><td>官网&amp;开放平台</td><td>产品展示、功能介绍、帮助中心和开发者中心</td></tr><tr><td>商户平台-首页</td><td>提供商户注册、登录、基本信息查看、数据看板</td></tr><tr><td>商户平台-账户管理</td><td>提供商户企业资质认证、企业信息查看和套餐购买</td></tr><tr><td>商户平台-支付管理</td><td>为商户提供应用创建、渠道参数配置、交易总览和开启支付(生成二维码)等</td></tr><tr><td>商户平台-门店管理</td><td>为商户提供新增门店、店长分配、门店导入等</td></tr><tr><td>商户平台-员工管理</td><td>为商户提供新增员工、定义角色、分配角色等</td></tr><tr><td>商户平台-优惠管理</td><td>为商户提供优惠券管理、活动统计等</td></tr><tr><td>运营平台-商户管理</td><td>对商户进行检索、审核和订单统计</td></tr><tr><td>运营平台-优惠管理</td><td>为商户设置优惠策略和优惠券发送</td></tr><tr><td>运营平台-管理员管理</td><td>运营平台-管理员管理</td></tr></tbody></table><h1>业务主体流程</h1><p><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240516/Snipaste_2024-05-16_08-25-34.png"                      alt=""                ></p><h1>项目技术架构</h1><h2 id="技术架构">技术架构</h2><p><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240515/Snipaste_2024-05-15_17-47-45.png"                      alt=""                ></p><h2 id="技术栈">技术栈</h2><p><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240515/Snipaste_2024-05-15_18-09-38.png"                      alt=""                ><br>重点了解微服务技术栈：服务端基于Spring Boot构建，采用Spring Cloud Alibaba微服务架构。</p><ol><li class="lvl-3"><p>基础设施业务数据持久化采用MySQL，数据缓存采用Redis，采用RocketMQ的事务消息机制完成部分场景下的分布式事务控制，采用第三方云平台完成文件上传与分布式存储。</p></li><li class="lvl-3"><p>组件系统微服务基于SpringBoot开发，数据库连接池采用Druid，POJO构建采用Lombok，日志系统采用Log4j2， Guava工具类库，Mybatis Plus持久层接口实现，Sharding-jdbc分库分表组件，Swagger接口规范组件，XXL-job 分布式任务调度组件，Sentinel限流组件等。</p></li><li class="lvl-3"><p>接入 Zuul网关完成客户端认证、路由转发等功能，Dubbo RPC完成微服务远程调用，JWT提供前后端令牌管理方案。</p></li><li class="lvl-3"><p>视图平台支持H5、PC等各种前端。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
之前的项目已经接触了支付宝、微信、银联三种支付方式了。正好辞职把这个项目写一遍，看了技术栈有一些是没有接触过的，应该能学到很多。&lt;/p&gt;
&lt;p&gt;项目git地址：&lt;a class=&quot;link&quot;   href=&quot;https://gitee.com/kiml_rgb/shanjupay.git&quot; &gt;https://gitee.com/kiml_rgb/shanjupay.git&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;前端项目地址：&lt;a class=&quot;link&quot;   href=&quot;https://gitee.com/kiml_rgb/shanjupay_web&quot; &gt;https://gitee.com/kiml_rgb/shanjupay_web&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.05.16 初始记录（抄了一些项目描述）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="聚合支付" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E8%81%9A%E5%90%88%E6%94%AF%E4%BB%98/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三天-203移除链表元素、707设计链表、206反转链表</title>
    <link href="https://kiml.github.io/2024/04/24/100000005/"/>
    <id>https://kiml.github.io/2024/04/24/100000005/</id>
    <published>2024-04-24T13:37:00.000Z</published>
    <updated>2024-06-01T02:56:24.226Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：链表定义有点不会，基本上是都是看了一半图解后写出来的，而且耗时比较长，可能二刷会好一点吧。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24.04.24 初始记录</span><br><span class="line">24.05.15 完成题目</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="203移除链表元素">203移除链表元素</h2><p>题目链接：<a class="link"   href="https://leetcode.cn/problems/remove-linked-list-elements/description/" >https://leetcode.cn/problems/remove-linked-list-elements/description/<i class="fas fa-external-link-alt"></i></a><br>刚开始看到有点懵，习惯了写输入输出，这里不知道怎么输入了。链表这块需要先初始化链表。没有写出来后面是查看了解析。在具体方法那里，一直尝试只用一个链表做操作，但是运行总是得不到想要的结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE203</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> scanner.nextLine();  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(s.trim())) &#123;  </span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">LinkedList</span>());  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        List&lt;Integer&gt; head = Arrays.stream(s.split(<span class="string">&quot;,&quot;</span>)).map(Integer::parseInt).collect(Collectors.toList());  </span><br><span class="line">        <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> Integer.parseInt(scanner.nextLine());  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 初始化链表  </span></span><br><span class="line">        <span class="type">LinkedList</span> <span class="variable">linkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();  </span><br><span class="line">        <span class="keyword">for</span> (Integer integer : head) &#123;  </span><br><span class="line">            linkedList.add(integer);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">listNode</span> <span class="operator">=</span> removeElements(linkedList.head, val);  </span><br><span class="line">        System.out.println(listNode);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 一开始只能写成这个样子</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;  </span><br><span class="line"><span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.val == val) &#123;  </span><br><span class="line">    head = head.next;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;  </span><br><span class="line">    <span class="keyword">return</span> head;  </span><br><span class="line">&#125;</span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 链表的定义  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;  </span><br><span class="line">        <span class="type">int</span> val;  </span><br><span class="line">        ListNode next;  </span><br><span class="line">  </span><br><span class="line">        ListNode() &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        ListNode(<span class="type">int</span> val) &#123;  </span><br><span class="line">            <span class="built_in">this</span>.val = val;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        ListNode(<span class="type">int</span> val, ListNode next) &#123;  </span><br><span class="line">            <span class="built_in">this</span>.val = val;  </span><br><span class="line">            <span class="built_in">this</span>.next = next;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">LinkedList</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> ListNode head;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> ListNode <span class="title function_">getHead</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> head;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHead</span><span class="params">(ListNode head)</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.head = head;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> ListNode <span class="title function_">getCurrent</span><span class="params">()</span> &#123;  </span><br><span class="line">            <span class="keyword">return</span> current;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrent</span><span class="params">(ListNode current)</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.current = current;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">private</span> ListNode current;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> val)</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;  </span><br><span class="line">                head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);  </span><br><span class="line">                current = head;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                current.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);  </span><br><span class="line">                current = current.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="707设计链表">707设计链表</h2><p>题目链接：<a class="link"   href="https://leetcode.cn/problems/design-linked-list/description/" >https://leetcode.cn/problems/design-linked-list/description/<i class="fas fa-external-link-alt"></i></a></p><p>修修改改了很久才通过，要考虑头节点，尾节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE707</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">MyLinkedList</span> <span class="variable">myLinkedList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyLinkedList</span>();  </span><br><span class="line">        myLinkedList.addAtHead(<span class="number">1</span>);  </span><br><span class="line">        myLinkedList.addAtTail(<span class="number">3</span>);  </span><br><span class="line">        <span class="comment">// 链表变为 1-&gt;2-&gt;3        myLinkedList.addAtIndex(1, 2);  </span></span><br><span class="line">        <span class="comment">// 返回 2        myLinkedList.get(1);  </span></span><br><span class="line">        <span class="comment">// 现在，链表变为 1-&gt;3        myLinkedList.deleteAtIndex(1);  </span></span><br><span class="line">        <span class="comment">// 返回 3        myLinkedList.get(1);  </span></span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> val;  </span><br><span class="line">        <span class="keyword">private</span> ListNode next;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">()</span> &#123;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">ListNode</span><span class="params">(<span class="type">int</span> val)</span> &#123;  </span><br><span class="line">            <span class="built_in">this</span>.val = val;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;  </span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> size;  </span><br><span class="line">        <span class="keyword">private</span> ListNode head;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;  </span><br><span class="line">            size = <span class="number">0</span>;  </span><br><span class="line">            head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (index &lt;= -<span class="number">1</span> || index &gt;= size) &#123;  </span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">indexNode</span> <span class="operator">=</span> head;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;  </span><br><span class="line">                indexNode = indexNode.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">return</span> indexNode.val;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;  </span><br><span class="line">                size++;  </span><br><span class="line">                head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);  </span><br><span class="line">                <span class="keyword">return</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            addAtIndex(<span class="number">0</span>, val);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;  </span><br><span class="line">            addAtIndex(size, val);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (index &gt; size) &#123;  </span><br><span class="line">                <span class="keyword">return</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                index = <span class="number">0</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;  </span><br><span class="line">            <span class="comment">// 找到前一个节点的位置  </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i++) &#123;  </span><br><span class="line">                pre = pre.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">listNode</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);  </span><br><span class="line">            <span class="comment">// 如果插入节点为头节点  </span></span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;  </span><br><span class="line">                listNode.next = pre;  </span><br><span class="line">                head = listNode;  </span><br><span class="line">                <span class="comment">// 长度++  </span></span><br><span class="line">                size++;  </span><br><span class="line">                <span class="keyword">return</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">// 如果插入位置正好是尾节点 直接前节点指向这个节点 然后return  </span></span><br><span class="line">            <span class="keyword">if</span> (index == size) &#123;  </span><br><span class="line">                pre.next = listNode;  </span><br><span class="line">                <span class="comment">// 长度++  </span></span><br><span class="line">                size++;  </span><br><span class="line">                <span class="keyword">return</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 否则  </span></span><br><span class="line">            <span class="comment">// 先把当前节点的后指针指向前节点的next  </span></span><br><span class="line">            listNode.next = pre.next;  </span><br><span class="line">            <span class="comment">// 再把前节点的后指针指向当前节点  </span></span><br><span class="line">            pre.next = listNode;  </span><br><span class="line">            <span class="comment">// 长度++  </span></span><br><span class="line">            size++;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;  </span><br><span class="line">            <span class="keyword">if</span> (index &gt;= size || index &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index - <span class="number">1</span>; i++) &#123;  </span><br><span class="line">                pre = pre.next;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">// 如果删除节点为头节点  </span></span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;  </span><br><span class="line">                head = head.next;  </span><br><span class="line">                size--;  </span><br><span class="line">                <span class="keyword">return</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">// 如果删除位置正好是尾节点 直接前节点指向null 然后return  </span></span><br><span class="line">            <span class="keyword">if</span> (index + <span class="number">1</span> == size) &#123;  </span><br><span class="line">                pre.next = <span class="literal">null</span>;  </span><br><span class="line">                <span class="comment">// 长度++  </span></span><br><span class="line">                size--;  </span><br><span class="line">                <span class="keyword">return</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="comment">// 改变当前节点的前节点的后指针，指向下一个节点  </span></span><br><span class="line">            pre.next = pre.next.next;  </span><br><span class="line">            <span class="comment">// 长度--  </span></span><br><span class="line">            size--;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="206反转链表">206反转链表</h2><p>题目链接：<a class="link"   href="https://leetcode.cn/problems/reverse-linked-list/description/" >https://leetcode.cn/problems/reverse-linked-list/description/<i class="fas fa-external-link-alt"></i></a><br>偷偷看了下视频图解，按这个思路写的代码：还是比较简单的<br><img                       lazyload                     alt="image"                     data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240515/206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.gif"                      alt=""                ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> LE707.ListNode <span class="title function_">reverseList</span><span class="params">(LE707.ListNode head)</span> &#123;  </span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">    LE707.<span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head;  </span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;  </span><br><span class="line">        LE707.<span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> cur.next;  </span><br><span class="line">        cur.next = pre;  </span><br><span class="line">        pre = cur;  </span><br><span class="line">        cur = temp;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> pre;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看讲解</h1><h2 id="203移除链表元素-2">203移除链表元素</h2><p>题目链接/文章讲解/视频讲解：：<a class="link"   href="https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html" >https://programmercarl.com/0203.%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0.html<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一开始没有搞懂，前面一个循环是用来干什么的。</span></span><br><span class="line"><span class="comment">// 但是去除前面一步，执行[7,7,7,7] 7 这个用例会多出一个7</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ListNode <span class="title function_">removeElements</span><span class="params">(ListNode head, <span class="type">int</span> val)</span> &#123;  </span><br><span class="line">    <span class="keyword">while</span> (head != <span class="literal">null</span> &amp;&amp; head.val == val) &#123;  </span><br><span class="line">        head = head.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> head;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">pre</span> <span class="operator">=</span> head;  </span><br><span class="line">    <span class="type">ListNode</span> <span class="variable">cur</span> <span class="operator">=</span> head.next;  </span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (cur.val == val) &#123;  </span><br><span class="line">            pre.next = cur.next;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            pre = cur;  </span><br><span class="line">        &#125;  </span><br><span class="line">        cur = cur.next;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> head;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个题共有三种题解法：</p><ol><li class="lvl-3"><p>第一种：添加虚节点。在原先的链表前，添加一个虚拟节点，用于处理可能被删除的头节点。因为删除可能涉及到头节点，所以在方法二中，第一个循环把头节点可能需要删除的情况直接处理掉。</p></li><li class="lvl-3"><p>第二种：不添加虚节点。用一个循环处理可能会被删除的头节点。</p></li><li class="lvl-3"><p>第三种：不加虚节点，同时不添加pre节点。加上判断删除节点是否是尾节点。</p></li></ol><h2 id="707设计链表-2">707设计链表</h2><p>题目链接/文章讲解/视频讲解：<a class="link"   href="https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html" >https://programmercarl.com/0707.%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8.html<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//单链表</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ListNode</span> &#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode()&#123;&#125;</span><br><span class="line">    ListNode(<span class="type">int</span> val) &#123;</span><br><span class="line">        <span class="built_in">this</span>.val=val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyLinkedList</span> &#123;</span><br><span class="line">    <span class="comment">//size存储链表元素的个数</span></span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="comment">//虚拟头结点</span></span><br><span class="line">    ListNode head;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化链表</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyLinkedList</span><span class="params">()</span> &#123;</span><br><span class="line">        size = <span class="number">0</span>;</span><br><span class="line">        head = <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取第index个节点的数值，注意index是从0开始的，第0个节点就是头结点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="comment">//如果index非法，返回-1</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">currentNode</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="comment">//包含一个虚拟头节点，所以查找第 index+1 个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= index; i++) &#123;</span><br><span class="line">            currentNode = currentNode.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> currentNode.val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在链表最前面插入一个节点，等价于在第0个元素前添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtHead</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(<span class="number">0</span>, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在链表的最后插入一个节点，等价于在(末尾+1)个元素前添加</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtTail</span><span class="params">(<span class="type">int</span> val)</span> &#123;</span><br><span class="line">        addAtIndex(size, val);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在第 index 个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。</span></span><br><span class="line">    <span class="comment">// 如果 index 等于链表的长度，则说明是新插入的节点为链表的尾结点</span></span><br><span class="line">    <span class="comment">// 如果 index 大于链表的长度，则返回空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addAtIndex</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt; size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size++;</span><br><span class="line">        <span class="comment">//找到要插入节点的前驱</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">toAdd</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(val);</span><br><span class="line">        toAdd.next = pred.next;</span><br><span class="line">        pred.next = toAdd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除第index个节点</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAtIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">0</span> || index &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        size--;</span><br><span class="line">        <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">            head = head.next;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">pred</span> <span class="operator">=</span> head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; index ; i++) &#123;</span><br><span class="line">            pred = pred.next;</span><br><span class="line">        &#125;</span><br><span class="line">        pred.next = pred.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考中是直接设置了虚拟头节点解决的，代码会更加简洁。还有一种双向链表的方法，没有仔细研究。</p><h2 id="206反转链表-2">206反转链表</h2><p>题目链接/文章讲解/视频讲解：<a class="link"   href="https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html" >https://programmercarl.com/0206.%E7%BF%BB%E8%BD%AC%E9%93%BE%E8%A1%A8.html<i class="fas fa-external-link-alt"></i></a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">reverseList</span><span class="params">(ListNode head)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="literal">null</span>, head);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ListNode <span class="title function_">reverse</span><span class="params">(ListNode prev, ListNode cur)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> prev;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        temp = cur.next;<span class="comment">// 先保存下一个节点</span></span><br><span class="line">        cur.next = prev;<span class="comment">// 反转</span></span><br><span class="line">        <span class="comment">// 更新prev、cur位置</span></span><br><span class="line">        <span class="comment">// prev = cur;</span></span><br><span class="line">        <span class="comment">// cur = temp;</span></span><br><span class="line">        <span class="comment">// 此时cur为前一个节点，temp为后一个节点。两个节点位置交换，做递归。</span></span><br><span class="line">        <span class="keyword">return</span> reverse(cur, temp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照讲解，一开始写的是双指针方法。<br>LeetCode进阶处写了还可以使用递归解决。解法在解析中给出。</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：链表定义有点不会，基本上是都是看了一半图解后写出来的，而且耗时比较长，可能二刷会好一点吧。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24.04.24 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24.05.15 完成题目&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="双指针" scheme="https://kiml.github.io/tags/%E5%8F%8C%E6%8C%87%E9%92%88/"/>
    
    <category term="链表" scheme="https://kiml.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="虚拟头节点" scheme="https://kiml.github.io/tags/%E8%99%9A%E6%8B%9F%E5%A4%B4%E8%8A%82%E7%82%B9/"/>
    
  </entry>
  
</feed>
