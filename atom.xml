<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Theme</title>
  
  <subtitle>Keep theme quick starter</subtitle>
  <link href="https://kiml.github.io/atom.xml" rel="self"/>
  
  <link href="https://kiml.github.io/"/>
  <updated>2024-07-24T09:07:27.543Z</updated>
  <id>https://kiml.github.io/</id>
  
  <author>
    <name>Keep Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聚合支付-【代码模板】微信支付接入</title>
    <link href="https://kiml.github.io/posts/5041bed3/"/>
    <id>https://kiml.github.io/posts/5041bed3/</id>
    <published>2024-07-24T09:06:43.000Z</published>
    <updated>2024-07-24T09:07:27.543Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言微信支付接入流程</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-24 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言微信支付接入流程&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-24 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="代码模板" scheme="https://kiml.github.io/tags/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Freemarker 基础</title>
    <link href="https://kiml.github.io/posts/e9ae925d/"/>
    <id>https://kiml.github.io/posts/e9ae925d/</id>
    <published>2024-07-23T13:26:20.000Z</published>
    <updated>2024-07-26T15:29:34.187Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>Java 开发的模板引擎。官网模板：<a class="link"   href="https://freemarker.apache.org/docs/dgui_quickstart_basics.html" >Template + data-model = output - Apache FreeMarker Manual<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-07-23 初始记录</span><br><span class="line">24-07-26 bug记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="快速入门">快速入门</h2><p>freemarker 作为 springmvc 一种视图格式，默认情况下 SpringMVC 支持 freemarker 视图格式。</p><h3 id="Maven-依赖">Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父工程指定SpringBoot版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--freemarker依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件">配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># freemarker基本配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="string">request‐context‐attribute:</span> <span class="string">rc</span></span><br><span class="line">    <span class="string">content‐type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="string">add‐mappings:</span> <span class="literal">false</span> <span class="comment">#关闭工程中默认的资源处理</span></span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line">  <span class="string">throw‐exception‐if‐no‐handler‐found:</span> <span class="literal">true</span> <span class="comment">#出现错误时直接抛出异常</span></span><br></pre></td></tr></table></figure><h3 id="代码使用">代码使用</h3><ol><li class="lvl-3"><p>添加 view 映射</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;  </span><br><span class="line">    <span class="comment">// 注意这里不要添加后缀</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/pay-page&quot;</span>).setViewName(<span class="string">&quot;pay&quot;</span>);  </span><br><span class="line">        registry.addViewController(<span class="string">&quot;/pay-error&quot;</span>).setViewName(<span class="string">&quot;pay_error&quot;</span>);  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>返回 Controller 注解不要加 <code>@ResponseBody</code> 或 <code>@RestController</code>（<mark>这个注解把返回的信息转成 json 返回，不能实现页面跳转的功能</mark>）</p></li><li class="lvl-3"><p>返回使用 <code>forward:</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/pay-error&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="基础指令">基础指令</h2><blockquote><p>1、注释，即 <code>&lt;#‐‐和‐‐&gt;</code>，介于其之间的内容会被 freemarker 忽略<br>2、插值（Interpolation）：即 <code>$&#123;..&#125;</code> 部分，freemarker 会用真实的值代替 <code>$&#123;..&#125; </code><br>3、FTL 指令：和 HTML 标记类似，名字前加 <code>#</code> 予以区分，Freemarker 会解析标签中的表达式或逻辑。<br>4、文本，仅文本信息，这些不是 freemarker 的注释、插值、FTL 指令的内容会被 freemarker 忽略解析，直接输出内容。</p></blockquote><h3 id="List-指令">List 指令</h3><blockquote><p>说明： <code>_index</code>：得到循环的下标，使用方法是在 stu 后边加 <code>_index</code>，它的值是从 0 开始</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;#list stus as stu&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.mondy&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Map-指令">Map 指令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,Student&gt; stuMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输出stu1的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap[&#x27;stu1&#x27;].name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap[&#x27;stu1&#x27;].age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">输出stu1的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap.stu1.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap.stu1.age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">遍历输出两个学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;#list stuMap?keys as k&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;k_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[k].name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[k].age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> &gt;</span>$&#123;stuMap[k].mondy&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="if-指令">if 指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;#list stus as stu&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> &lt;#<span class="attr">if</span> <span class="attr">stu.name</span> ==<span class="string">&#x27;小明&#x27;</span>&gt;</span>style=&quot;background:red;&quot;&lt;/#if&gt;&gt;$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> &gt;</span>$&#123;stu.mondy&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运算符">运算符</h3><ol><li class="lvl-3"><p>算数运算符 FreeMarker 表达式中完全支持算术运算，FreeMarker 支持的算术运算符包括:<code>+</code>, <code>-</code> , <code>*</code> , <code>/</code> , <code>%</code></p></li><li class="lvl-3"><p>逻辑 运算符 逻辑运算符有如下几个: 逻辑与 <code>&amp;&amp;</code> 逻辑或 <code>||</code> 逻辑非 <code>!</code> 逻辑运算符只能作用于布尔值，否则将产生错误</p></li><li class="lvl-3"><p>比较运算符 表达式中支持的比较运算符有如下几个:</p><ol><li class="lvl-7"><code>=</code> 或者 <code>==</code> 判断两个值是否相等</li><li class="lvl-7"><code>!=</code> 判断两个值是否不等</li><li class="lvl-7"><code>&gt;</code> 或者 <code>gt</code> 判断左边值是否大于右边值</li><li class="lvl-7"><code>&gt;=</code> 或者 <code>gte</code> 判断左边值是否大于等于右边值</li><li class="lvl-7"><code>&lt;</code> 或者 <code>lt</code> 判断左边值是否小于右边值</li><li class="lvl-7"><code>&lt;=</code> 或者 <code>lte</code> 判断左边值是否小于等于右边值</li></ol></li></ol><blockquote><p>注意：<code>=</code> 和 <code>!=</code> 可以用于字符串，数值和日期来比较是否相等，但 <code>=</code> 和 <code>!=</code> 两边必须是相同类型的值，否则会产生错误，而且 FreeMarker 是精确比较，“x”,&quot;x &quot;,“X” 是不等的。其它的运行符可以作用于数字和日期，但不能作用于字符串，大部分的时候,使用 <code>gt</code> 等字母运算符代替 <code>&gt;</code> 会有更好的效果,因为 FreeMarker 会把 <code>&gt;</code> 解释成 FTL 标签的结束字符,当然,也可以使用括号来避免这种情况，如：<code>&lt;#if (x&gt;y)&gt;</code></p></blockquote><h3 id="空值处理">空值处理</h3><ol><li class="lvl-3"><p>判断某变量是否存在使用 <code>??</code> 用法为：<code>variable??</code>，如果该变量存在，返回 true，否则返回 false</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if stus??&gt;</span><br><span class="line">&lt;#list stus as stu&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>缺失变量默认值使用 <code>!</code> 使用 <code>!</code> 要以指定一个默认值，当变量为空时显示默认值。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;#--如果name为空显示空字符串。--&gt;</span><br><span class="line">$&#123;name!&#x27;&#x27;&#125;</span><br><span class="line">&lt;#--如果stu或bestFriend或name为空默认显示空字符串。--&gt;</span><br><span class="line">$&#123;(stu.bestFriend.name)!&#x27;&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="内置对象">内置对象</h3><p>在 freemarker 中可以访问 Request、Session 等内置对象。</p><p>Request： 用于获取 Request 对象中的 attribute 对象。</p><p>Session：用于获取 Session 对象中的 attribute 对象。</p><p>RequestParameters：用于获取 Request 对象的 parameter 参数（浏览器端发送的请求数据）</p><ol><li class="lvl-3"><p>配置</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">freemarker:</span> </span><br><span class="line">    <span class="string">request‐context‐attribute:</span> <span class="string">rc</span> <span class="comment">#把Spring的RequestContext对象暴露为变量rc </span></span><br><span class="line">    <span class="string">expose‐request‐attributes:</span> <span class="literal">true</span> </span><br><span class="line">    <span class="string">expose‐session‐attributes:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>例子在 Controller 中设置 request、session 的属性值</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试内置对象 </span></span><br><span class="line">request.setAttribute(<span class="string">&quot;attr1&quot;</span>,<span class="string">&quot;test&quot;</span>); </span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(); </span><br><span class="line">session.setAttribute(<span class="string">&quot;session1&quot;</span>, <span class="string">&quot;user1&quot;</span>);</span><br></pre></td></tr></table></figure><p>页面获取数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url请求参数：$&#123;RequestParameters[&#x27;param1&#x27;]!&quot;&quot;&#125; </span><br><span class="line">request Attribute:$&#123;Request[&quot;attr1&quot;]!&quot;&quot;&#125; </span><br><span class="line">session Attribute:$&#123;Session[&quot;session1&quot;]!&quot;&quot;&#125; </span><br><span class="line">工程路径：$&#123;rc.contextPath&#125; </span><br><span class="line">请求地址: $&#123;rc.requestUri&#125;</span><br></pre></td></tr></table></figure><h2 id="BUG">BUG</h2><h3 id="访问报错-404">访问报错 404</h3><ol><li class="lvl-3"><p>检查是否添加了 view 映射，注意不要加后缀。</p></li><li class="lvl-3"><p>检查 Controller 层使用的注解：不要加 <code>@ResponseBody</code> 或 <code>@RestController</code>（<mark>这个注解把返回的信息转成 json 返回，不能实现页面跳转的功能</mark>）</p></li><li class="lvl-3"><p><strong>nacos 配置文件读取失败</strong>（<s>不确定原因</s>重启 nacos 后就好了）：使用 nacos 读取配置文件，出现自动装配时 suffix 没有读取到的情况。（本地配置使用.html 可以读取成功，但是放到 nacos 后，FreeMarkerProperties 中的 suffix 属性始终为默认的 <code>.ftl</code>，并且从<strong>springboot2.0</strong>开始默认的 suffix 为 <code>.ftlh</code>）</p><ul class="lvl-2"><li class="lvl-6">但是这里还是建议使用 <code>.ftl</code>，不然后序接口调用处可能会出 bug</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
Java 开发的模板引擎。官网模板：&lt;a class=&quot;link&quot;   href=&quot;https://freemarker.apache.org/docs/dgui_quickstart_basics.html&quot; &gt;Template + data-model = output - Apache FreeMarker Manual&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-23 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-26 bug记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="Freemarker" scheme="https://kiml.github.io/tags/Freemarker/"/>
    
  </entry>
  
  <entry>
    <title>消息队列的选型与优缺点</title>
    <link href="https://kiml.github.io/posts/359ee88a/"/>
    <id>https://kiml.github.io/posts/359ee88a/</id>
    <published>2024-07-23T08:32:04.000Z</published>
    <updated>2024-07-24T09:04:37.368Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言针对<mark>消息队列</mark>做出的总结。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-23 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="技术选型对比">技术选型对比</h2><blockquote><p>市面上有哪些消息队列？<br>ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，Redis。</p></blockquote><table><thead><tr><th>消息队列</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>RabbitMQ</td><td>1.支持 AMQP 协议<br>2.基于 erlang 语言开发，高并发性能较好<br>3.工作模式较为灵活 <br>4.支持延迟消息 <br>5.提供较为友好的后台管理页面<br>6.单机部署，1~2WTPS<br></td><td>1.不支持水平扩容 <br>2.不支持事务 <br>3.消息吞吐量三者最差 <br>4.当产生消息堆积，性能下降明显 <br>5.消息重发机制需要手动设置 <br>6.不支持消息重复消费</td></tr><tr><td>RocketMQ</td><td>1.高可用，高吞吐量，海量消息堆积，低延迟性能上，都表现出色 <br>2.api 与架构设计更加贴切业务场景 <br>3.支持顺序消息 <br>4.支持事务消息 <br>5.支持消息过滤 <br>6.支持重复消费 <br>7.支持延迟消息 <br>8.支持消息跟踪 <br>9.天然支持集群、负载均衡 <br>10.支持指定次数和时间间隔的失败消息重发 <br>11.单机部署，5~10WTPS</td><td>1.生态圈相较 Kafka 有所不如 <br>2.消息吞吐量与消息堆积能力也不如 Kafka <br>3.不支持主从自动切换 <br>4.只支持 Java</td></tr><tr><td>Kafka</td><td>1.高可用，高吞吐量，低延迟性能上，都表现出色 <br>2.使用人数多，技术生态圈完善 <br>3.支持顺序消息 <br>4.支持多种客户端 <br>5.支持重复消费</td><td>1.依赖分区，消费者数量受限于分区数 <br>2.单机消息过多时，性能下降明显 <br>3.不支持事务消息 <br>4.不支持指定次数和时间间隔的失败消息重发</td></tr></tbody></table><h2 id="RabbitMQ">RabbitMQ</h2><h2 id="RocketMQ">RocketMQ</h2><h3 id="基础">基础</h3><p>RocketMQ 组成结构图如下 ：</p><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2407/RocketMQ%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84.png"                        alt=""                 ></p><p>交互过程如下：</p><ol><li class="lvl-3"><p>Brokder 定时发送自身状态 到 NameServer。</p></li><li class="lvl-3"><p>Producer 请求 NameServer 获取 Broker 的地址。</p></li><li class="lvl-3"><p>Producer 将消息发送到 Broker 中的消息队列。</p></li><li class="lvl-3"><p>Consumer 订阅 Broker 中的消息队列，通过拉取消息，或由 Broker 将消息推送至 Consumer。</p></li><li class="lvl-3"><p>Producer Cluster 消息生产者群</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>负责发送消息，一般由业务系统负责产生消息。</p></li></ul><ol start="2"><li class="lvl-3"><p>Consumer Cluster 消息费群</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>负责消费消息，一般是后台系统负责异步消费。</p></li><li class="lvl-2"><p>两种消费模式：</p><ul class="lvl-2"><li class="lvl-6">Push Consumer，服务端向消费者端推送消息</li><li class="lvl-6">Pull Consumer，消费者端向服务定时拉取消息</li></ul></li></ul><ol start="3"><li class="lvl-3"><p>NameServer 名称服务器</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>集群架构中的组织协调员，相当于注册中心，收集 broker 的工作情况，不负责消息的处理</p></li></ul><ol start="4"><li class="lvl-3"><p>Broker 消息服务器</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>是 RocketMQ 的核心，负责消息的接受，存储，发送等。</p></li><li class="lvl-2"><p>需要定时发送自身状态 到 NameServer，默认 10 秒发送一次，超时 2 分钟会认为该 broker 失效。</p></li></ul><h2 id="Kafka">Kafka</h2>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言针对&lt;mark&gt;消息队列&lt;/mark&gt;做出的总结。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-23 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="RocketMQ" scheme="https://kiml.github.io/tags/RocketMQ/"/>
    
    <category term="RabbitMQ" scheme="https://kiml.github.io/tags/RabbitMQ/"/>
    
    <category term="Kafka" scheme="https://kiml.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>使用 git 提交报错：error RPC failed; HTTP 413 curl 22 The requested URL returned error 413</title>
    <link href="https://kiml.github.io/posts/5a672f0a/"/>
    <id>https://kiml.github.io/posts/5a672f0a/</id>
    <published>2024-07-19T11:28:07.000Z</published>
    <updated>2024-07-24T09:04:26.682Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言参考文章：<a class="link"   href="https://blog.csdn.net/m0_55868614/article/details/120597702" >使用git提交时报错：error: RPC failed； HTTP 413 curl 22 The requested URL returned error: 413 Request Entity<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-19 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="问题">问题</h2><p>使用 git push 时报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Total 254 (delta 50), reused 0 (delta 0), pack-reused 0</span><br><span class="line">error: RPC failed; HTTP 413 curl 22 The requested URL returned error: 413</span><br><span class="line">send-pack: unexpected disconnect while reading sideband packet</span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br></pre></td></tr></table></figure><h2 id="原因">原因</h2><blockquote><p>413 Request Entity Too Large 服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p></blockquote><h2 id="解决">解决</h2><ol><li class="lvl-3"><p>修改上传的数据限制<mark>好像没用</mark></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 52428800</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>使用 ssh 方式上传<mark>还是不行</mark></p></li></ol><p>（1）查看当前 git 的提交地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>（2）查看 ssh 仓库地址</p><p>（3）设置更换远程仓库地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin 复制过来的ssh地址</span><br></pre></td></tr></table></figure><p>（4）再次提交</p><ol start="3"><li class="lvl-3"><p>原先在提交目录下加了一个 1G 多的 doc 目录，删除了这个文件，但是返回如下报错信息。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">remote: This repository(including wiki) size 2.25 GB, exceeds 1024.00 MB.        </span><br><span class="line">remote: You only have 3 push opportunities        </span><br><span class="line">remote: HelpLink:       https://gitee.com/help/articles/4232        </span><br><span class="line">remote: Repository GC:  https://gitee.com/kiml_rgb/shanjupay/settings#git-gcerror: File: 1e079cdcb1b8f36ed4bb8a17a78df5582ca9db14 2.24 GB, exceeds 100.00 MB.    </span><br></pre></td></tr></table></figure><p>（1）按照提示执行命令查看超大的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rev-list --objects --all | grep 1e079cdcb1b8f36ed4bb8a17a78df5582ca9db14</span><br></pre></td></tr></table></figure><p>（2）执行命令忽略掉超大的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached file_name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果是文件夹</span></span><br><span class="line">git rm -r --cached directory_name</span><br></pre></td></tr></table></figure><p>（3）在 commit 的提交历史里面去除这个超大文件（注意这里要填写步骤 1 查询出的文件全称，包括文件路径）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --tree-filter &#x27;rm -f 文件名&#x27; HEAD</span><br></pre></td></tr></table></figure><p>（4）<mark>如果报错</mark>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WARNING: git-filter-branch has a glut of gotchas generating mangled history</span><br><span class="line">         rewrites.  Hit Ctrl-C before proceeding to abort, then use an</span><br><span class="line">         alternative filtering tool such as &#x27;git filter-repo&#x27;</span><br><span class="line">         (https://github.com/newren/git-filter-repo/) instead.  See the</span><br><span class="line">         filter-branch manual page for more details; to squelch this warning,</span><br><span class="line">         set FILTER_BRANCH_SQUELCH_WARNING=1.</span><br></pre></td></tr></table></figure><p>执行以下命令，然后重新执行移除命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>出现 <code>… was rewritten</code> 记录说明执行成功。再次使用 <code>git push</code> 成功。</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言参考文章：&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/m0_55868614/article/details/120597702&quot; &gt;使用git提交时报错：error: RPC failed； HTTP 413 curl 22 The requested URL returned error: 413 Request Entity&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-19 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="bug记录" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/"/>
    
    
    <category term="Git" scheme="https://kiml.github.io/tags/Git/"/>
    
    <category term="BUG" scheme="https://kiml.github.io/tags/BUG/"/>
    
  </entry>
  
  <entry>
    <title>04 聚合支付-【代码模板】支付宝支付接入</title>
    <link href="https://kiml.github.io/posts/fc17a9b8/"/>
    <id>https://kiml.github.io/posts/fc17a9b8/</id>
    <published>2024-07-19T10:15:31.000Z</published>
    <updated>2024-07-31T13:58:21.740Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="2149a9881e6a5ba2d699bc934d49aa9c65067c0f9b551fae8083edb251ccd195">4630436162ade97ba2718b7d0c4b3b6338208f8942f2ce54753d8fd7f949e1b7593fdd8285c0b6262fba257620164d4d5bb90f4a8b75c9f75788c768a438a1f4bf08bead474a0eec7cb2a7e9492d2732ba89cfb2218be7568e8514303b12ff6f62475644f5a77043ae386400722ea7fa0e1d6e4be76a2c5b303ced2236a14aeb21a3799246a6dc2ae6a9a25315f16deb5b843b151253dee6239a9f54601f5cd7dab7bc0af3b3f2830a50b219953b789fa0b0144c13f01f57032d0e8353cd7ae68177c0860380a06d286a70a588ceb88b2ecb0c1a86ee3a6507d0e5f23f976766d80fad120d93a12cdb0dcd452038c6ba0e1b5fd0b1b4678338bb6c02c3142f3718b76319b74114d2b33f373b9b944b047f31d5d9330c1dfda29b7e085c46cf723ae815c5bc2755b15eda199f88ffaf7e04f5aab7ede7c5488cddb6f50eb9c5bb1ef6fab0c88815702e1487f824ac4d26a73ea3d675aaec4fca52ac9085983990db46a3ac523c9cb2eae3e966dcd359a1954dc3572f8560f5cab9ee5df7c84611dd3093411ca9f25fcc1da68e90e3c286b29ac0a3fe628fa1e90f7abd57cdb4423717077b234c9af6485d7e9638aa3c5a629321a23523f1016b2980b4999cf6598ff5d59ffdec0827e4a2f2eeefca1ffefa5a545036b183579fbaaaf8e05239cad2954f449dd73fe93d393bcc4f9fbf00dfbd077fb7367d1a931b894bdfbb00bc2abb50f75a299840b4c7aa0f30e05ee604928ff09cd84c627a82eaa6dc5c6edb61bf6da1ecfa4ee26eab662d012d2ff78672497b5d6db167d15497d4119862341d57fc75604cda0744b657ad150a21eccbae2e2b5f6d48d7f6c226358bb83f59dca733df74f426be1b8e7b1e7b2b701dd7a90bf6f6b9901c6dc4b57fe4a457ad1661371db93acb81f2f5b81b16955eb38ec0904b86f79c8aff7235c051d4ac616d0d5605fc1ba3465cf7dedb8a41941e5dbbc2b8f2021f52e21efea8c6674b1f315cc38025db38a704a8944278a538be56b002aa69d691227a76a1a0506ee603bfa36cd8cbcc980ad7ab2496415df4e02c57a576ad8866dec0e1323058c15483c943098b5247a87316955583362cd75401c793d5be0108cd1f6feac04ff1e9f6c1d1454db1dc20624d7ae48af6348c6a387285b03b56a167efe73b5d190075f38ab7563e56bd668cde388b772dc2612248350afbc0e04f232fcb4b97efbd7e728fdff3725924a4f33e7822d3cb84ac9420f0464bc1769731a40536138e9435e38df2759852e68ead998235d8f608a4684c301a1a2da61b5506ce9614edc4eff9d65b61e042c8230a443b14272238fdabcfc24fd3b0f7a9b0b51dcb317335774b29acff9bd8a8faa63056dbe39af53cfa476d0a52e8ae71f3d43e7130e527d0d27a2db47954202221d3154d8b4f8539060c1d70e9327447ec970e419e516fe9bee7c507ae8a11778e0f9a2b3eccc32a4294a8534bdef27828a983b53c96327935a059e17996ee6499425536829911508b18916aadce00b1e3bb9e48c7f95ff09df719a3e7a9510becc77bf4619d4011c449fd9d0c42078d6548c8989d07a7ab228992a92bdfabed0a83cebafe19f0914c416810104ac7d44b5c2b64e67d55142aaaeee66245bbd1e5a596b023e464283e238ca3ea21928142d32e77992c1f569857ac0863a3bbe5496a1be1afdcf18a1c5e736d4752f4fa6555885cdb46b8a37c692b74bbd8c962790bb981e3751dd1575164037d989d7bf64971dc12e9917a1983a322412f45dbd8493c524005cf44057bbab4b27d8faaf5c60f21fdb6f44552eef019ab2b7e89d07a941ddeb9c620ec4b582a7be5d63f0674a4cffe4a29c5c78cd934e3ddcb669b214496bc3c90b30eee57dc0a264dd46a401d989d292f3aad3a03e2d3d1c3a9842d71b3452150d4fd3989d93965c248756e57a9cde3f6b88f424861fa2fbfb79f3b3949b2549f45daca9f646bcfa36540b4205b7455ea00f5f7baa98d9a7e076bbcdecee8c33db6a433b8254520e2f887fac2f760493233dce663a92fc2110eb2951f9487f20ac57c6c76500427b9dd52b800d3e8f1881aa8a9d91baa9a069637a2ffbb21dfd2823c96f8eba29cc3b2bb5e290586780668d3a34873590ad16c5dc5fb9819519402be4fb723b89cf01d43c065a9a163d6502ce24d77f9f436d9847f304a8ae2e3cd2a88c7f3198e566e2ae16e5c8caaeb51db991c99db05d7a91aef74d869c700bb33b2870842e03f187b97b32869c49377173dc72c2d3340dba8845b83a4e271247af3d85fb0a44466b81068ee05a40ebb41ef3ba9f1276474ae6398a2f9970c730fcd11eb0d704eea7c91a84dd86aa2f2eea0ba24800b21b093be86530a6a9cad6d64128af72eaa673ba19c664e6c93ab42f807f7f9906fe7b00e7897ddbf14bb3e5d521e53e03dfef480dafdaba339b671c28805d09c17574d9795b7972265fb18a7ec3bfdd3683dd46da97467d829e8a2eda714138bf878e7dd5005149e7ed4ebd2e6df350c47d3b13d0e5d185976c4330019c6c35659a51242962615d84a735d1756151186bc413dd6ee7ec7a1b3b3353cd6150e4cb550ba12a5cc969701075f6e06c8c0b349a406945c7315039d61e8b9fd1b2897edfe5c05dbe5fa97be700eb4a0d02b9a6e5fcf892a2ea76fcf7d202efe38ab94d28aace93d7594692aae1ca3e569e5d5c7e95dbc1e4aa4d875b57752f0f91a071bdde8abe827247ac27ed32f9e1a8c237b11bf6fb6f5cdb65ee9b471930bb85c81f90549f9ead4616bced0ac92f9311d22c28ff6c13649f8e48d177c1ea817a5ec3e4d0ac67d8bbbb6be9766515c0bb7990760b8601f88bef661c38fd0c46cbf7e96789dcc40d05d8b020992822530b6011afa449e9124675f451f9a4d24df9fecb2fb0ab267b5a6a11d330901063596daa4adb1fc51c8737abbb635eb0c3a1f655580484429c1b950658e3339fcdad6883854068304f02ff44426e44944e211d54240d6e2756ebc429a6494d5f554f7c0bf07587e1364d0508ba578727b01b9966fea41d72cd6b83d60148e0a3cfdaa2ba22affb7751712547d8ae5b3dc4c2c4f4c8905db220315c629187e10a543d1a2c0eb8c82bb8b8746ccc4485a9341bb6c4e4f17ebab10d1cddb3ec67e9737cf730e257f34c2a4033134df85ce3c8b07dec7f25e2ba39b421e5b33f4bbf221bd26205c2a3025e18e0c4087e21473de4e1281ebb804d5b08bf7ee33ebcf0aafc70a3b5966bffc3dc525918e29a27d8207b4b5126682cf2c573dce11897c930a61d4cb89ca3ce198f8b904d70a099fd82adf60db7aefa88da710d689ae704d5beb7d3efe014129887e22547dd5dd3ed00d9402ea3b916f6e1e16648ff63e6ba73755d45b6b9a63d8fcfd4acbdf76236ff5421b7717c35d9e040d313fcc6887abf6bbb23d0696f268c5cf532f1550ee4d360c929ebb4b5179c3ad796d13d8d8ff91447924b27d9be00c0ba84846bdd759f4e6041810a540a3f54064e0bb6e145398e832deda96f3995b4c3c6e6753d12928d36c7e3c723d020449e43b8b7197f34c1a8330487160b46df189b530fbb26e21f98266b92e854f5b3ff55c378457c35aef750e73145cf725a85b413c069252f2b2934c40029bb5d354ad3f1ed99db6fb11461b7047d526809fe3ba60b1f96b35423b676074dd3e8ffd512ada9ab5a1a1aba9eda4c4d09c8129aa1a2b6dec53066452c6edf040488bb44a842d59cabe30f5c6143fa0becec5cf568d3a3b74f4a8d66d753e82e17b97fe7ff192c6b3a2b75fa2502806fe4b44f56b2904dfbbc601908adf6123c33cfec9631295c5445fecffd96df89db2dc0bd5412b6dd817bbabc699f1cd712d86fcabdadf62809803c7c9471b420103a7e2389e4b56f7903edf7019e4da858033e2f382ef56c5a6a13dc53d6098b2c5783dd38d7015881930683f765ba1b711c9b3e77f78266e599b2cffbc1060fbec70e54881fdad0d63c99d4de7cf8863a7fc1f70472983c045da5f3b1b647fd5d8bbfac9faba453bfae664bce1646f349f23af13fc8282222a461156f4bf22df59a06666996ad1c5509a87be8149112221dc3e83358a6ba5e179706c79837e0533d43afabbcf1c07e5cc59f0be56604c79c12d207a0e831850cf9dca925a091450a82259c8703b1c2526fe63fa0ac4cc37931e07458d2a1910e2114cb83a54d9a4513f5a6a468b10574b0e3e95d4646bba06156d84890fcaea05950e7a66590af7205a8d5ac3ba9b2013f70a3a99b11dea4589a2b13230c42905a9a09a8af9f25ac594bb6233293db800c4ddb52e1caedb77fdae563db953f3bd0f5abe624aa2330d83f7acde91084fd00a2915952ae9e60dacd43ea315708dafbe4d3fe397e462f3f3e346395818261a3ad21734c859a0e07881287ac9caef783e106241a8a2dc04e23cec71ef68029f4a22a33f11ada4bca1e8be14a5e0820ea169ca41bd8b4397349d238bbac7568b62c05ba3ee380004a0cf462abbb3b2db69a5ae99e0add4f5c346a83b3ecc530f9e7c4e81d3e03f65bcf175cde242b02b9f3925b54cd0fe1fb41457de82512e135c566bc191490a2ce15b861db0ecd42eb7c20042c272a01e6f6b8adeefcb91535fd0095a6358d3fc259c8faaf4dc95109ae9e284c067a58502783acaf13e38b567babe099005cba9c35de01bf9b9945ba2540843ba75ea80fcf24fc60be99474b084570cb9e8114477d22f90e09bcf7fbaeae859115edabea5ae879629f5f6b8ced6c463d966fa12ce27a30a46ad5d744bb7a7740ac92bf0c9472f42f11293c08de37f2b26724ad9e0c6362793e15626f130bbde61925505df1934a4ae0a0ae85120a1f68c9ceda9bc9c91d12f28ba2995e61e60f1505e794a1f6d55924479560b2e514b20dd4d61d34430b73073458b0fa5b6f2482e2614df8453f5510c976a5c80624a34a6367160792c133a29c41863007c9235d92c50cb0196c519c34c78b729e6efb5d8828c6e9490603f26f4bce37754cbc08d941bcfa02e202b5be1da88f5819df4c1c20f8ea6f3d8e36b95568334823328cc76e9149cabb3151b4565a527ea98ccfc70ffd6ebb6a371785e7e85d3893ed4e39272c1fd4f86990351a9ac1a2f66b0b71a4031e7aac67d38ff43918e220ea9b877f7b184433bc7d9b0fb5a5bcf9f8bc838ddd1e66fbffb3b79b88a3154d8fbb1149e01bbfb644ee0f23c147d21ec0923b156b29a224042458e6115f7852ad27d7bdee66a805dde492b6619cb12347d5c9055348430d7315cb941ec8bbf3917ebc5739107748ae039537709d08fb8d9175815c70be7cdd0baa5734819afe16603c6b339e54b556fa1bcdee1215f7866e0c552227c9330106edf36ae0551a4287adb59699dc63cef82d12664e5e45a7437c71573668285e6956bca4b916d9e75661e58e09dca8af300e05aca3d40f2f80fbfecca228d3a76576baf1b3b01c1753edd55f3b703a8625a2ed4c256baa43bb5576b9d2512e2c44eb2a65226263fe628d890759bcc76671acc2aedad20830fc724404829ae1745a2577131b1d3679f46eb0e85daf71b0649a480175b517674b41a2f9bcf3501166769b831ea3fdab5acbc6a515008264c2a3bcc90521000413b0d8ca491cbaa8b4609fef6b8722ce5f3e6d45197ba01cc45d3db4dd83fe08e3a3f8e22634fdee63ce5915638b74b67324de900081a5c5f21d43f566bbedf4b4d920cd0e8246d3aca98aa0e3a175be7294bc11a34ac8d59b1b2fc3bf8575cfb5a95429c2de29023a7417697e951a5a365e86697406a3532310784127b12bc2debfc48bd757aa603ed14cdccca2e0c994fe49a25b3cc42194cd42f80e53a41a375ef613a1b81d24fba718df82d01b02b2ab7c0908824ebcc59c6b6d05b8a5b86b0416aefea167dea54dce815562e4502454cea43676cbcedad3cd5cff0681af8e6ad68bf398b4bafaed79459c96ca4287f714b7b8cfc14a83ac198b52763d11566d0f361bea62df7af0232a72bd0b83d2fb10628a2195f19b26bfec256e4bccfbde303e5b4b90f027c3b25bef40e10417ecf236c648818c29e3d0c89108198f9eae8bf1c2518e478328db9393f9c961acadad3fb27cd356067f822c701944fd814cd5ea4468d22f2c5e7436d03e30303b459354270c0c3ac51dde9b97090094e33ed4609e86dcdf07cc7c921a0b5812c72891fa17b4567b756e4229d38b3902960584fbe9dc569eb857ae6c374e362d46bc5dff553ef1aa237f4b45b9e347ecd5848d405e4cd7545dbba26636bd1ea18b0c9268b543d1c8351189c0ac386ae5c5140258be1df318e4ec9c22045ab5fd444103cd722cbe56b51f6209bb1cd12ae06dee6367ad31d7ca087dff2d89d692b3252396e0a72fb6c5cf57459b79e8d3c71964723a115a3f69bc83992be86f4565edb65fe55c4434bda0d15028ef2b4e037ddda28e5f4996605ad668be203fd9f7b1572942410fe3f20fbb0eb9f458a74363d234f4292c354730ea65b95ee15b9921671da9a9e575eec5cbfe74923c516996c73cffd628df8257f8497c77ee16498c3ee53a849c1ce93fd241ad2d9c9d41f81a1b07443bc55417c3b18247d5a228f34b1da9190c831751944e7fc4164f43082ae1c22196ea45a862b62cf98a80bde3f12ad43fb3355bc7d4b5cf8213ee259a6e6dc47ae78c33f10cdf2349b3569cd2dab34c57c7a9b65a9ff3f25ef36b7185b3d12694909a63b96a98bbbaa6c30852c9adea29fa3c63cd902b2cc39015a3fedb538cf74a8431e5ecb6fce0efd0a5756317ea06477ecb2c06ccb47aee66c35481293304a734752d0a67ca56dd77a71d068c1aa243442fc299ae8d3e2efcec0738145533dbc05ac9c43eb9be71679681ff239812e662573ce58c73e843d3e25eaff3bbb35f997be489bdb246d90bed1f68436c299a118b21719964c3dddb8c9a474300f40d01f30a07cebcc2941e8581a0a248de8e4dfd0108c1d65a5f220b8fbb5e207bb3678560ccb531958d8c3378f3e57b21c177f7f477bda023da57d4bafeb0a0b1aa5fff5c3e0c515e95069631e3e0ecf799a893d280468fe52b4f18766281b92b4c08192d5d17a865fe9dcecc66a745bb5f8e7f87b73b40713417762ce09f290e173aa0c8e8d7e46ccd0f021a9e1c27d4f6a7a487177fc7e927678446d88b2880646782010f2491d699c46d806114a50908277133d91184b2f17d8a27c0d6b374d365a0c87c6546e7654907d822db8ae37dc725bb2009537bbb39464a4018b0cbed28b3a61213f644c24828d06491cb01d72fb56e75784f7f939f92afa1e4b688780e8d80996036e9cc7b32396ece7592ca24878a1050563cf613a1c43fbc0352ba6257941496ef0af8d27ee61355c5ab23ab0a6cb0a0c2a069e3cc17ba6ba810788dd62619d6ab51ff8a925eb96a3be4eee9b89037fbbbdd8e070c1b04c494b5c32694f332ec513a27620211712c5f649a283369ee2011a6731370cbcb0598785063e532c294512e50647826b5b1c7925bd7c8073ade1e1483eb7c9916dfee2d54690b77960c65529b25b7a2ad313059f864ddd1c4bc1a1cf6e6f1cb035d3a9cceb523851275908390beda8e758f0ff5bd6e1e34f78c9e59ff3c169fa5dc63b1ad543c5093dc002258ba117bd6a45f3e0a6bbd1e44acb67e1bbfbd4a6ddfb4ff51ae4786e1593e9d31e2c49828dd3ba24ff0382ce826ba6478e62cee92c90f9df4450a37bc27b4876c6f599fa7d994b09aaaf2dfa214e289ea798a07cead11bf22d556f5eb351c96152f096cab1ffc17e72d075aab628425465ab6b0c8639f176514a6f724d1953f50fa263dca4c836ab20d9eae3018a4a17b677b99e8033c51465d8ee736c894fe91f609683037a3b8b11e47d9012f2c34b7e5751bb7e1d78ca01178356c4e7814290e230d38a1fd19d8657a3b5e068ff72d09672ca72844468e81be595057a4c723d9ed8eb6bbac159bbc6d3eb3495c9f377f1f828cc41b08662a7f543f0ddb64fb15688fced9419eb93fcf50151e24fd82bdf8626575d8ae6623e8a38d5251825d7bf9a8aaa10598d705f0e36b844f6e0a69b777171c2fd77f5f6db1eede3895d3e97f22890bc4fe6c6506e51726e0460a51d4cdb70aef6893928a8111963f52e3d14b6dcec6a93128676095ff68fd25e9c54b144641ea12357cd5542f340fe1db2050ca7854f017e2048cb757922f09819e3adaf469a3644294b31f4fa0d36975d8f6fbc66433569fc05ec925ca7959a231748e205afacdcfd87efd5cc67de3cda5038e9da078f7d458cbdd5f081738b2826b3baf5d2e4ca191ad49033782520c7041aa290916f99cac2b7e47d587ae205dbcbd75413e40f6ef0abb0ef75caa7227062639b925e49a51c0c8b5e119fd7fe50d55769b9b0f9e76eb6828646832c068b51e214eda2e8283d899f5eb21a49b19cbdd7d3929b7f989e112b677b14992bc963b7bd0ec73c0f270e1f55cebddb9400fc986e6151fe42b7dcc4371be4a9a745f9d20b7c226f76fd1b62eadf2311e9e8d3881ca6a0d4d9d47d6c18663ccdde1e9020979a5b05cea0736c9dbd3fea8725350fabfe0e8c35e77be22d9a1a808e3004c734be305c8e29f43369793e2cf260465d35c677ebb6ca83f3c8af22b5c9d0bf83a6cb01e66b4d87fd564d88767003ebd51ffa408444f40ddc046d820271ceb19ff50c0680142c9b7ebf8c4a503d8abc484c8075bcea650c7672c41faae0298293174988ad2198ea3bb749397da53d0a68556bd7341d06d7a531637256feee2c6d39f2857a6c9949c83d5716cf9d3abfd88bf575f633681a642ea877f5fa599088beddc36564da3da9c71daebfe1e90502fd05647a88c904f4a5a1ee7d12bfcc99ac6dc030a919bef8ad105443d541a70ed196bf60710a34c7a50bc413915e3d20f754498ae2914a044903b5bfdd2d7b66aecf9d32d93c895d5ecbf1d922501176106e3a25c9d23c51207ddab41b40fd0a802d097ed3d5abe09d0b20f502b86ba5cae912978bf328d9f024464dd343b35b36c001ec707a47c7a730aec41a3b6f52c87e837395a89f813bda8b9edfded88e9762dcba450231b696565144a0334348924fb72a23754c55074d7cf88f825cf9a5bf407b0751d2ffa859e8f5445cb9bcf844abbb7b76cc02c94b6e2c39a2ca4da8322c7515ee7707871bde6a24458cad7afd37a49d31bb910d25535257af8aa97bcdb4a5050f58b1f6915a37a60cbf27d961c8cdd096fb5a777074420584a5aa20c47eef58cebab0598b52a3de5aaccb7e2c7fd892432ee9faf3f629e7fb8c10c773f00434443722729f3d54fc30d2f9f6ee2f664b22eabaf676228febccbb20ee99b8384b6e5b661497d2c7f40a14bc96a8a38c859a0062812936c47249121c14f189b055372186505a318da1bd53169672ab320a85dc6abf85233b5ad756a1d37d01ecb173bb57246435ef31abe69304d0ed44b703bc41c731ffbf4725a3afb16e5e307899290c274c24b59a8770f2591583d5086d1bb6495bc0a225c54458be380dba92bd4f94449cd399afed7bf527cff02a56cfe0063dbc1b414f038281810879fc55abc5ff9a3d12f870fc09477cc9d2e90a78195419164a8fd9a82298760b7a213170d0ba5f442a405b68f60dca2cb0995b88584f8611606c5bac0a55740669aaf0a3aa7f853ca97f81a0a855dddd2db403272f70442784d32ad471a61c01692775eabaebefafa6b9591f668b3ff778b2f8d34f84f3727ce701a45d723ebf81952cd338e6dbbd84b872fffae653e234f166c8fc9f8513430577920bce6ddff90b75ac5a425a16574f8dc7d9ac88d5ead69c0bcffb87ccc8a936a1645b50db15d132dac81e162a836bdde900ea9ed36969e6646c8d0eb9501586c16e767b9baa5827d8145f8e551bce9adf334acc3f17ff201cc60a1a701bd277ad44f9907472294c49f0c6fc7bccf417cf6a068d5ea600f5e5c7ea24e4cd9cc936ac34249cce765900cee8903d63b2c7d5a518d13223fbec14790d88d9b42615226f605863403300b94ef6c8df99288002a245c11674c2fa511787d8e0faf24b4b782f008cc5a7c68e60bcd17f15714703d22a247bfdfbc1dec0b92d3f966839139ea278b2b38ce80d4f5c42559663883977b2901c1aab9fab8b20c6b28f7f4648b461453f8ad774d7c26f32643055be7049c784eab97ece14bc4962883aed8bda7801c49728dae44282603e6cf3dba4c64bc3c7ecdce38e738e4333d62e29d64a9682ac806f1b8ddb39543b5f5e7edd7f89c0baa8f4d49974de53100181990531557ebb96dd48247390a34529fc20c15f52cef64285ee56dc09df53916a2616dd3cad63cbf84e80815df8904ae35bc382b295af1038add8476d9ce60009af44913bba30bfdea97820ab898847afd8805945a353a843d15622737c3d045c1a6fd33198f6c10896992ba58dee54a2bca28303ca167e21b2ced12e9e84faa0278c8afd865bfa7a07b541462f0b45e508b3bad1e6431a0c6cfcf600a6423be0a670660469c35a23def32693c66f15fe1a9b63b006035aafd1da0c7f73e0e87e2b701a40aec6a35eed1ebf8fd496c53a39d7fe713ebeab75c82918dd59fa267fcf259ace4cf9ca418cd9f07a2089355f313c0aa7e42cb6ecd75efdd3bc9c47c4419426089519f3025cc25013ea8b9cfd7ab739ba765fcf9d948e63b1feec0fabfafdd2bbed950b47f293a93ba8f2d39508d68c152fc490481bd851c74e7a454d2683454e8255fcf80b3d69d0247170720355b2bddf43fc46e8486fec6d0eed8eea82d8bb81e3467f21e296297bc78963bcee58b101c2d11fa489d746b7d3bd2e66021e65d3e8f833d3414ef0fc7e040525d9dcadd222995dc184c299691ae88aeeba91320539ab6a0ebb355fbf41706652352fe7860829f659f78bcf2888471fc21747864bb065e38daee06ffaaf60288df33ced2763696865007417f27e1b88f8d7157f2102d9fa71441fe77c673ac7b7a1700e1bb5bb5662428f9e5aff889dd30000aacf690eec33a3b2558a5ec05ddbcd07e7ed13c3e2b52c6354b500a57606cf133411888f8732546a8cb3c1065757da289b603978518fe7036042e857392781555670bb5a28613da0d86a5eef21af8544ab36de7ef853d4bff12dd6d114aad237a522955aafc68b73ede9dc3fad9c84263b943bffc385a01f46f0357c7648b70cd3b2d38d289e1e703db45530af83720ce463fa4f4eef8df95dcc9fa8781ae15a11e4930b93263cfb16d90c111a891769937eb25abc814141931eb4b12673fe16eea5980717f671c6ef47f688753dd940ce6e53984807c0712b3068f3c0da01d87b36dbb8137b4c2749fda083fc0c9e9b3680638069e812c14cc232a87ac4f1f3f529b9fce191201338618eb62bc281861bc7c8dd649d9317f583db9f4bf164c21a290b27a802fea92b740a2825d3927e8b52cd90738cea4ece96ca1c01443112ac2222b7e1005c160d2a84a1f6e31cf5375e3816f5863af99b15bee864b651cf640d16224330d048d66bd74a57f1d255ae267a34546659092cebbab3eae9855d62d39fc0f547fa22a5953a5ae39b488a4106f7afdf9606691c081ce55e488f6bfd06a9fdbeb951659900963189f87b4ddaa547f3c4f8eb1d1535104d35660706b1cc7a4f0855787163d4057db8ad304fa3be0f41a341dff86e480f77758d6b00dcc8889abdf03231fd80326ac97422e7a88aa1ce77dd2aa0829857d2c6d54d5514503144e1f6b2d76f2cfbf63aa82f24ddcb84090bce20f0ae536a0e85cbc7d9d60bbd70543197e8ad52da58353169f027ae424f4279affd20f58e720000a984177fb6c253aa94c9a0eccaf03945da1e41e407879bf5121d26f25eac48755fcf2ac0cf9e923489a5596d13b3ab2da4752c8c1c222bf2f1914b734ccd9dd353e030ecbc0ab3513eb16dc10a1f67f1f24cdf0688ea4f2835aa300d16f5b27465c36c7a2f6cb8400035e09061e3dce8f0e57590f5436babba1c145a402ebfd38d6a74a719185a81e089c27f24783473d68cbea239a024a9d8d75a38df3ee521d86befa560a7cfd7558f78920992d72f5512e0bfac060be7b5585524a6b241a6b62e45eddb991cfd86fb44c1410d813301a6179b32e64a855c9636c3bdc641ce3c2952ecdab44a5e9c31d5448f430aee97b5b517684c40d43b02df6ec8d9009974ccdcb8f70ed9d73f851bd471a84b8474f4e3ca68b7535f22dc30ce50a3587e0fae1e8d8ddf164826e656f63e7c7a52e93333bfeba158f3caadce5ddcbaf549b214bd3ea8b5e33b0ef5455d10c49290cb7e4b90b65f0f0b3b80875447d438ff3d749db658f9964aa05cfd6c90dfd6f857b460fb1eae8859661e64c683b602bac385cb73643ec2bb8e8d01f4167df9e64919db7f0831aad54c74a4b98ebe731f1fe8d60c98fcd1cc125a919a0ab4ec36d37f4f6f0855fd6a6bf391e844200c0479feddce1e9f42b2020699eab6b66f3254085407e09f6f9365e61f96176062f2073f4224a7b1b44fbed8c411f8091b0415ef7c1b45b4042a3d96bf0b5daa569522d573fd7c537b12fdd62d273ddc82106aede64e51042368c53f2157f2ed26d4763bf31241d7a52ab3a78e529d2f27f7b3b66f8aa12109c0e03dd3da759e8cf716002a8130b1b6f95474c2afe7c6587d7101c5faf4d8277e0658114d277d7b9c039a42d4f767a3c9144867904d5896e74093baae6d701acfee1f429bb04dd60ba10949cd42b95088d457cf1fb3b564a76505f0ea781029e1b1b837440f96082f1d77ce5c0569653fa6981e77b7d6543c3075ab44f0739a960b4d93dd0a0729a30659f4430a912fbca6f7f021f210b15a6c1ff5fc0f984fe11302f54453aaea9a8eb1c56cdddd10270dd0eb1b968a3196d2ecba6cb41c26e7693627df50758fc0e2e7452f5e76331b13399ae0c002b92384096f8bd2c0a96a2d98f972bb2300b7d6fa0e6c189a27af079414cc35f6306e9ee02ce947f2dca2718960029d2efd063fb4bae3b76b0409e037dcc88b1f7e2bf4841d3658e384fa683ad71fcbf8179e995f1978b59108ff237dd4ee8c8c0ab0d43bb458772b03ace04ac588ce9aa34a6fee78ecadcb0f6da045405ef3228f3edd528e86e9420f9897dfe3080ecbae4cd9e94f26ced1f89b91de91a5b1ad7ea24ee813d5da987be84001a02dd06c7627796c5ca3b2a6593f514ef9e0b6c82a2086ada09eaed6f1097f5a43705e243dd430be1b3a52ae14080409c7b8f177c5c5cc1ca496df5ece86b4a9ea44d20bb8b1de1e795a0e401cf0a09143a2410d03ae2511a0e338191d33e8b3c087b582a1b33100bf7195f5cbfeef8b3a4713ccc585cb173916ba27f3f792793cae853f426812e4cbd627a8e632f92fb8967aaf331b93c328500210bdde85736c33ea8b70247d86ef8d0d53e2c6bb76f6afcadbd46ee812ad337e4696a73647547622266574cda37eabff408f8be3ccf55439e62aefbecb758af9dcc835cea3c5240a0b89bf35da4c790c56fc8550fd2c4fc45eb1dcf0ec6d314c7d49f425804e6651d0fcef6a3b4278edb586ff5125efb72b7ad72f26d12030578c1379bd3ccdaf9c3e2bfd0c4d8b82932e312043707cf820446c79cc2a78436fe80299e252cdaa877d5cfc5d717ea7aeb685dbfb62fdcaf4186de4fdb975eff066be632680cefee56e530b737bf65f3ea3fdcd172aba8d5d44b712cc4da06ebb923b4685f3fb6787aadfbec5a1b75e1839161a1c5af03a732c06d9c87877f43dfb39676a510e0e700f561bf0ed17dea2ef22f485d7d1141fc078cfd1ed89891e1b34e38480620bf4ee1713d68d0bb69f2b6b0628a64476edf9c86546b4d154d9f6de40cb7d88419e1bf1c9090ce688cb40549bcc9bc7e4eb54c3f027bd19eb0e70d51e841ff712118f2adb8ab5147daa17d498479273766b68a7c7dab58a77aee146c3498c72f8b3a5e6ff3b4063db3b4d5fba0834543569b9ee6c2dd1f474091473a9661d2bacf416420d999213332a9f736f2d4f9e95cad8b9000cac08d9386032c40caea5289e1a63e687e63929d738f70c5d0248cd9b2c8b5c293f335c88ac6efacbdb5c0073affee8988947dbed7ae86612cb162571c27d88c4372f2522f901b6178d2abda0582dd87ffa5f4bf463ba37eb18c3720b7d4c370bfef4c877c57d0eae3ab47a1359a3d4e9f7eb1a3e61f8c4ede4c7212973ee2828b6190cf2e8bd4a5c477e572d080265c7b8a427a1b9dae4616f23507141e13f9081c04f67cbc95e22d6aef7d5592e8c28fe551c8e75083c04a5fbbd4ca0ffc1676a89fe9d72a48ef16d7972b7ffe3e500085221e2faf95a07bc7dcdc2a3e60dacdef5067bad5f6dd90dea318fc60fc90e106a86e0a9ca329e23628048da47d5aa3d9cd2fb346213d87a945190687bb427429209366ed42648bf9675da643be8114c56e506637587f272177648155226e853ad58bfea8485a0fa8922f0e5f88958c69e348b1d562ec46a378cc561a86075bf382f1e6231a0c60d42bcc42a3cb62e9802f0f8e8d990963b37d2bf1df620d50ac37279901bc4db5cd88b280825f5dfd49c5640f69a3dc8b54efb35a78160c31c8e66122bef10d0072e3646d147ce38da51e9442f02dfe7f804725352218763988858d12742bec49f90ac4ceafcda5d28d7700478a6d6422abe9b97e700fef4d64dee3a5a873b34d9f7278eb79df020e2b0cf9782c0d8d3997ef1ba5e1ba0c9bdbc02740d9a5d74fc330f25d67a10ea905445cdb4c3b1fd7d17b6dbd0329b3a8cd1c92ebb7dcbe9e61c431543cfcbb10756d67abea71d87e6962cc41b3f67a175e1598c5c19d31c771850244fe9a5f43d845d96f7d05d4572b3e7488f347c98834bbf7f437c5a741fb93f43c9f2a6800df95728b56205f7e0a479db7596acd248bf3125d7eef3d51adaf198dbae60e0ec642d1b5e5de321c58cc4f303724842dfa35e7c078c38903c63af655440a17e718858e1f6e18f211e5429a8fba4f925957efee0b7c160773285ac82f48362076267f855d6061340ca0542275fd14a8bb03581f9452b04411b85c8e639dd718e5f152786185c6d1ca2f8d4464c9991c357e642b429c2e64c7046b41507ba683b2bda23bd2624607b9aa01fb481c12ae57bec78759bb075b9b44a2ee1ea80955de0fb2ccb2d8892437a1195c3c55b1266bebafb71804b7a9910a6aa4357733fd58428d0479a051cb215d8322e7a88d1807e875c2b1217be3f81777ca35339db5a820a07b55fa326f71c85b83e52f6be0f665cd363364945e3dad0454ce118430612bbb833c910e35f2413b5de56f12d94a29fdf3e38e96da6a4ea58a9485b3ee9daa639c6c4e7c86b04dbef32b4152ebb3d06fa6277385bc1b960a02a03f33c5f46eeec46621943742d95520439f0b0b6a9fa7a9d119a86d95dc7f3d606bea1caae7a12c8601d2ad23d77ccc02a65c478053d54839573e3de3545c7eef28780189848bff18b88881afbfddabbf23d571b5a35313fb2e0f9293cf16b2e9aa2bbeff1760e37b9ec04a29fb17017ef04c9b347eadaa7bdd5b087dc8e479e0020f011736a9d02342a3e4fbf463afd434c6a1f1e163d87d292fc3ce34f5c556501b2e7b52cb107d6ef4952ab6f369cd22265ea50ac74f09ea562cbe54129a9a4760707500c76c51337965803b84304b36d40e5465d88c914cc17bb43c032ced80a3c600fc4cd61f171ea8994daeed1a8a1258532a6e11f17204ea2ab0d036e9701caa9297a90a5446db161d2391e6b31d15c0b5bdd50a7a9e7703ca96fcb02e9a8f5aea284fbc6e6cf5d95077a0c2a466faf3cb80c9b654edd29bbe9abaab20ed3e470c0ccb39cb0b685efd4e0a2b98969c09e769c794df1ad6ee550dd0b00c0368b54ca3bd12828a85280ded5a47ed0e2cbd566bd7c76ac3e352d92eaa87e574ef44f34fe7a6b2e6185b8b6de19f4bf32ffb254e8e4c23644b342b5685837ebd1b8bfb593e528665f2828c664d0526e74ebb4ca70b4715882891985834498a4a06e72e45cf3bd5a9f4e2e9134a20d57618e926f5c758f73af2c6a1207ee9a5153277e6b11945b8ec9671b6f010e3325a6a0a6c48b78f1f4e483a0de8442eb36331b598175adbd252d0d865046c5d394c3dbb7831f8647828939871bdb5448886b2ab1085be7dd75e7a1403c74dd7e32c6444ddd0ef2a949f174ae0878e22e9812ba1be7115fa8c4f2bea063fb8fea2ba4111d0ed86a41243e998f5989960d53137743606b67d9bb63fd46fcd6f98bd9e935d5460b812f1368470fcfd179f4e472809893e884e471cef776622fb868f49488382185c65168e5914ce9bd7e95d17c33662f1917137d0b6342429eb0a17e39e219b2bd1c05261df380749f2e0774403617f960c46c6c8c11ce7a4b691bf873e23dcbe154b9ce392cd9c2b19f5ceff5aa4e342dbe5e812cb35125234d2b5bdc3816b03bf8b2da5406afff0e59918fafec7a1caec095c9a9c4b65148453bee8b24fcb170d1332fd024aa76fdf10fb6fcd2ccf91672178fa6dae22330c134a6c4b37c0cbb7d7347a7e75156daecbe9aae216111dd63fcb97fa6bcfe6361b42858d5508cdc1f16ef3867659a33efcf98ea58a9d33b2b73453bd82860b4c547592d0471dd7a9a3b69c4f1249f0be65f2ca888e275e27e8313f00688bcc4c50197e7cca4d1c22b1a67fb695c3d4b067fd3298e3c1538cf654ca5a795226a5a13b6851df9783f08ce085db5e7ee0850acabdbafcc380c7e19e07bf6790be8fc0528a6075c0b809d9b9a450ad4b74f44d4dfd154ac182904dc28415e6e86a595d6ea526005c1650441b6f6d8ef6fd4a53c54f84fff35443a95913f00ca9d4b2abf7044271d08c4aae8439a9bc9a86cc054f847fd06aece20192ebf62e9fe5f3550d08532be9b5f3eabc91ef5f32c294eca26f2724131fe3a6ee1e2fd39c14d44d7ae5a7f00144cbdc0f7ae345891b84d0b8f46079f7c8d24b98aa959c5e34fd2f3536252d9c7d8813c4402dd5ffcc5459e277936adfacd1b884ff6225c428d9ff8f12e2688546282db82b68317af7206a7c5e97a318fd0144d794e609ea9652594c5b968b5c67ba1316005a1c4443ebe1ac4495d7010249b8887a2541324fbc611784d8759cbe2531be4856ea77785a5f3d1342aa8861285a137df84d0a0662c29226e03378bfab1f0092d5636f2af2b13262652533e04e9ebf4e1e0ae6a21b51f0f52aeb5d60b573a7b57772c73870543bff99180074f566a30df9479b3c478288b3d3e5b38be92be12d43ad9a46575870e22b4ab02190907b54bea9a7c931cda6c5eb318780c81d10ab795057885eddde1c28e6c1b756b5a50356dc48279944b12e4987ec52cc4832ce81a65ce962ab1a107868f7b7839ca69e7623f11908a91521900bb78ba5b7f79d090f12845f75e3dc5f53da507ea831737f8776a08b90b913ed58b164649afb670563be29555bbebb26fc8c6ec101c636eb55669645467812062db2f5a8c627bb997d6f5062fd5a3548178dc7a3d0d7e755e66d630589f20645aed68eb2c533e68420ca38a93b403de3eaba02ccb0e8ea386412b4e6184a41b6cb2bfbd3aa66e46f50e7236e462754d516ea66cd1ac8272189f537e501bc87c78382f3324121f8490a4146cd879aa91c38f07a67e0d63410eee85e2553efdf93ffc746fc256e1f224a247377495706d4a16862623a412888b412374e8a56936fea0615960a94cd290aef20b4d45b5b0f519fcee97dba109f8b01f4dcc1caadb4dce117e545ef1c29908f031c63916c6ceb1260fa36ac46a84ee3f698d61d56ab76a27b76a28814a9052bd77c2295270ef0154efe92c14266ea285ab2e19e3e985632ee1a6f9f46f2fd5d97fa04f97c62b6139dccd296f94cb3ab24b04bc7cf869e90c32b2c0d9278b96f30688507de345e5bb2dd9e61532127b7147404a367937a9bc6a36e86c609fae7bfdb60672efcbe22ffc47a46fb497bebdb57eb69fe4301c32fbc5090a31f1b06d3652e1f5a76164dd221e26a557682747e47762b4185f4ae2671b10976b11ba1ab50f45f877241611d7e7f820484efb1ece62c85983eeb3ab250866e217fa626a749d7f0931b61c91c4a6ec1b40661a329e66b7aee170590e1f281657a37a59260143f8f0158aaaac34c07ff1b43f729274360ec84170d7d5185893741ef3943a0fe1c57235658c150dc51b066049abcddaf3b5ccbf9c9726ed4a7e34a6c5151ca316d28c1fbc0fe3f2e29b2fd4c94fd8a3dcf0dca9e1bdc65c29f7563f8f26d9fb7ca0aa1d6bc59a252944f9cdc3a4205ecfa1343ad88849519b55aa043e9945880a6683b4a12ca15bc2d406e2bbbacd232a640fe3bfb5ad565198dd4ac1604346580f900a7a7ef5cf9a80892b4c843ece4b73b70e71d632429e2f177fbdb5e8640a535e80720e4a97a44881e906c0123875bd4e471dc4cc94a80e92855150e2a6b144b8dc7a0239811f4d533759c7a179c45dece247e0a08307e488b6677c2ae42b26db0e4714d45dc5605aea2c33d10a54ec4ffbb939d99050e3f687ede9f8e81ba892a1ecf9eaef259ac08f6682f7379c6203a5e33b408212e80d0cdf21c2c460c308f841461b2e2f7eb21c8fcf581de9e59289fe86257c78e9b87f238c01a2e550cf735756606c9f84b80e00ad1be4a323ac93b17ab24d9a0e88a1477de57a3dd969c0813c58329f65c0d64bfea8dcf9a849d9f73a9568e3cae5bce4f07f285e8123569479cba0062029bb58f56cae39da64a7c8b2917c7cb4436770799645798af604fab98133b7aa93f6ac177a55c54cba539a56712e805c5597bd21f55a5ab8ae7a7783d4116470f4c79c52121f2981a4fe838d0bb1762c8160c80bcb976fbda1ddbc097ea1ae44d7d05242d134cd05c5f938725ab61936106c31bd6dc412fcd5e40e0088af5bf47557bb5692f19877e03aa74e495dd37462f3eb75c95def5be5194f8fbd817f16ec36c1012b07b9f827850c6103141f98320bdc61dc1723bc4d3c5aaaf4e8bfe925056c6e455fb47399ae97acf546f657792cfa45f379c85bd4950e68f6f566a7063d687976ef7a1015f4cbeefd6d3b54b31134fad3c6c4e869e436391ac98313dc947e5221f35e1796a7bbc7f24ac8fd718ff91dd82eefcdce9d47d07f360f1f8b538eecf78ac14380e3b5a94f17feb15e3a8ec345b84eccb0b69a52181135451a86f7673f42c3ebe5d2357ae8e726e3cf9eba54f3fa163a6d5530f777655cf82b0636081e76410b0f234cabb2a4bf2d950d9dcfb49406f11dc6434fa59b6c5151391b24fde5d6899768a0de9bdad3fae3547c92fea14fb3bb488fb23bf9c4a79d2edd1154dfdc6d12b0a5cb3fe40bfb9397aeaa1b4728dca4eca665940bf415fa550233642bd9a912146c15bbb1b1fc9058fc22acdcf74c5db2909d62312b8e40f025430fff6588cc8eada9329470fbb889c6c7ac28248a3ce3b9e44f4229ba5802d212fe984cada3768882adee665259696512d54fc58dfb98c837cfd714f1c025971ab87690ba75c3046f52e879934073ef4d142d8f1f4133d99f763b1201047afaa37b6b8820b77420b94ee25b585d1a5e88feb98b322c5483c902d3052ed80c96c01f13ef50754f4faf252efcba5e6676c633fa47d06cfa34df46003729a285e7227597f65512f86e9ddc69116c522e1c06ef0ed41b99502b0327bdd9532c6be1591552f1f23a0228b93949a26eaae97b7fd2ce7ec92cc6599e7570b23149c15a2459a716fa3903de9d1149316669ce855282d4dabfb5009b05b696d8c85ce54ac0f744d36988f9c5bf9b156701dfe28c49e8d6ef049a58f473c889933a2d8b810e871010a9076e06de09a006d44920c10c5a87989a95ebce7d721ba86f08bf57bb05062821e56e4e1cf1acdcc73015a75fef59e3debc97b7609afd4ccbf1a50be8f22fc54677baff3c4074207954ff43b6493742579c7be98fc28733054c9dd8f75143952da23728aafb0594cf9a8b8d5fe8b69ad7880a36fd6f9a402cc36a4771738a9bcebf268ccdc12f35df3d263623a8dc4c5d6ef0680898084cdb0caaee3eadafc3efd17ed1b6916ce61392b71acc0f92fd2bb5a1c86f6e2c741f9be1c2c7ce19dc4895770bb1b3e565b09c07f0580e9ab626acecc74c2b04e074e54490571c11b249b02aa4cdc41ec79e176df7463e48b23d46589fc2368092122f0ffab6b233179594df46a7a28daada0694b9d1c69cfce85fdcde3970047ba575f72b51864e95f2acf485c41ee738abc0c89cd40da191fbf1ebd41c2e9390bd319f5a2d3c413b3cac70829b79f8b259e889ee080b6303488f1431d08bc5efbc04c2e798b81f158cddfeadd7eb297abb939549c958ea3159e8ebe43934be8e91186941d264f5dc52e678e2520d7ac1c6adb9597d7e78d42f91633a54dc9b69ae9eb9266a0617b982fc9bca28f5bc11111cae225d7c264a70f88ac541984cb39be0f9d61a383a49fc6e6901c58cd6f5912e10969d3838c6961ae4482d4b2db276dce65c44a268ea9dfc97d28e1870b0e258ea0a90dee1a97b232acc4a85bd7c93a92dca3dcfe6afa2c27d0d8fb8b96d42f7a08a8220e918c94abae7d8d42b39afb53ed96684904773dad66bc45d70364300d6e59bad1712ea4107d9a52720cae2406e518473bb43461db709033f14d433c9948a81f58580720947b8fa6223c08878ab50c528f3e3cc7ec0bccd955dc164e0dc8deaa11e1dcdf7f961d74b290ef4cbabbdcb06cca215a98152050dabcf33c869b8e1b71621d6ad74ad20d6563714f50999eacefddff5a2809a9f7dde7b95d072003d4d39b3d3a0257a62c6328e6599277e6974ccc220b2a60508bb9a92f9c26c5309b1e245802a3b78d323997aaa40da6967300ef18cd291dd3efae20f0dac4871abbc46dda2ea8e84eff303e314db6e37db7f68a778556bc86cc6c03258c08f59689e901a455098c5aa075a4b68703afde231a639fc4455018b75f6f744b753be1b231a62b03a0fba0653ce4ede54ee8b3ebfee51b3d07670d9bbcc46a9aef75baff702b3b84a42d55acbea48ca6fdf8c55b043721c72013b7dc214d83b6e6138075a3fef4b4984109ff688007ab308670d21e81b0b43f6e463d297318eb2401b0b573702f1b081cd3715039f510fc4ccdfc2f2a2bb58fa8751f687065bf61f3acc12b1f8c744622d7a344cd321942976b767d6e42f5be7adc9d79b10c116dd6266142e2066e80b29692a0daed01358aeaaa231dd53ca48cd479113574702779554a5d3920af9f53ba136cc36779b5badd4197047a704529e2f892bbcda8da482ba0170f7db58a3e0b444af0a49f54b7e83a76c8da7361ebc9d149ce2f0bb393bb5819d19d823e47e59c9be4fd69556621535029437fe5ef83b7f83525e65da767e58c386a7448b59842f322daeb5fa5967d624d345494fa26933adbccdf497e0ce5803a95dd77e7fdd288b70e734fb98a4cb69e2f11344f0febc1df5eac2102c3b2f00e87063b9e559f2d33f46e325946e4758361d375a8618ccaa1d3c6eb0dd317184888acfc13d8d5c543fc7a698451e00e219a90f886a5b659c52c6ee928388bbbfe78282d3ddf75c09237a9879a8f4f098d93f3882f9c0ae6dcfa50f724e639ea64dfdcaccbf1f17986032d283dc935a2b32befc472667969b21a24f009068f40462edd86d5df47c7e786c9438ed2f36dc762f7eea4afa9a02c28de39033bed13b1f86fb63fccc6e72d3dce4e4bee17ccc80b0be3925fb8ccd4ad81c1e2f52532b07a55aeae1222fb07a22be7a8b0a23d85860f14ca26624ffff2001b9d1595d0bcce6a9a9afd3ff40cc8e3ea3f70f843dc1d839215a41c895b5f1b2d05303043bc6249d5a7d59e8d5813fe2aa52335e313cb194d2f057808e4e50a789110bcc638ed29c33fdafd957113094a7f9bab822fca20b26617452f2ab98f670a70ecee1985ce93a31637cb13f77bbe6f4918890a6ba5fa6d45f71bc6b33ab5ccde0bf8ff2a0f2c130afe7ab77442472ec899959c71f78f7210d1dbc5a6d1b113cf58d59d3a71600fb6d708cb38d48b4c00973b6f92e2eaaad4a3998a178ba0bc3024390f9cdeb5e9802532963fb8a020cd704e2e99fdeee0292a7bcffa834a8b65f54f3996839f4c4e10a6ac2fbbc63af9bcf98206c0a6876de15a7017afff254924b1f7181b9a0c12369961914596b78b04b886b5651b01f9d491114e4232a23eee8c865c55b0ff03617ff04dfbe17d75e6a726a83e0882e0dea79d4125bcbb79085718ae6863887c13e6547d15a73c48d293eb42353cb9e50ef354076db60bc83721167e7e3160263685bd8aff1261797d9ba2a3ebdeae145526525f4a73b53a8b10cc68b9c4cf10f6236e9fe75616ad6aafe14528ac5ee1cfb6cd001f9bee8096596ca25855bd701760c5442b8533ba9c4dd5f4f16eb1b8992392ad40974c6e4f757172302e91e0bc2d7eb1a20312888faafb2fefc75c32c659785f4a1968be63cdd2e19b96ab3dd01a986c8243dc842b1efd76f1c844929155e2c99b0193d141fdff5c6bc3985a22871bc544e2fe8d4490b1cb94ac7e40f4dc47e0895022468688774c1e78f771c1a6167c233409de7a115e5a2dcf349787a85f1a00ee3a2eb86bbb76193d3f0b5113afe04ab743a557e36e05e490b7ea339dc78dfbe7c6e516bdbfbe2fdc5a43081d524ed782dc97a22db0f39e9d208e0a3fcebad1011f7aff2c5d43708f65d8608ec2ad41f6161e90c17457747726e4c18b989d8ed748fc396146736ad7faa7a796d8ead589c6e5a64252b8c49d98bbc62dc05e6f1575c40f5934529962f6c5716de3ad69f27599d3baead5a873864df7189843e70f95066821b36f3a080371192da791d783636e50a1ac5b6f1a1c1f6548113ea6c2a6642bf8c9f8657ceece9af9ec825eb7b4b5606ae3e0816d02733a318d43a9487786328f1c50fd04fc1ea6565095114a2daaa9ff2d25d6ab23666ff86823d14b56520db3c6139a58307ac07ee7a1a537e55da523bc5f6b9c58e47c375365ed548e88ee0cc60b4cc62075163eaefc80e7172fa1f0b18a560094412626b95d81dc6fb1c68af4fe0d4770d956c3060e4ac768a5cef973f24c7bb736e656e7696bdf6ee64548c8841c1f0ca6430158623553d66cff39f43157a6b054c322902e9dbc961196a7cc1017f45502f244785d7111333efb9013a03444b81919269d6fadcd3591dd7a8846f4222441fa045f467026180a6f01b818ec823469da3fa2e652ed560547ee5f1d8c41cb402d1e0a7d8ea43d77bd14256623778f170031bacc100cebecea429218ef3718a1533568c8b963ba5c1953637aa1adf7fbda8f5b248a1306082702bf1ffe703454124ccd53502403a3b6e1483db94144a5c1a3061aea1e6204525f0d2b8ac3b3b16feea407f10617b39f030d2e3f2a8f6195b5b87b22c50faef0ce00bf8412aebf657f2235f34445430469835c5370db05bde7359ee495f74dae847066acc3406c6043fa58c84ed464cf5bf15420b1441b9ab7b3fd91744ab6241dad15cbe01af3824568d06f7ac520d6f4b529fc76e22558b22ef8fa28713f54499dce7f92586ac4a9a05641f14f3aa1bec2cbc9b397eca031e23108125ecf346d5e4a13268ff1367a597e008dfa93d602e0b9c2738bd312832964ac1a2e08b46009f88bdf80356e0739437dd657b4bc1ef46b6bbbda22b947c521e3826f4e80a8bec596c95fa8cff50710586a52ad31c8b89b45f2729fea954f92e5654cf54053cc43ee84ebd3125a7579c10b5d5c727cfbfc2d25c6325cc185ab1428379affbc10b3fe9cbcfe67b37b6b7bb4685faa36324e978b76148f623e13e1e48bf772c28ebc7be1dae17e7baab01e84970446e23d60df9a8c7d22482906e772c8ad394714678c7d3c2b34f7553d8c6e1df2bce4379bec5076ee50c35e5544b07dd681bdb163e77285aa30fcf92c25c4ac238272bea23cb612190ba3a3711a31e12b5f47dfb44dbaab862a6b81336b597446834d667f7a6bd22f0184ae84cd8e623c1d94de9753958e0cdc1bbe873a7267803b7d1b16374e0d03dda736c35070d2d5c83d9d255ead08444a4817516b1b002e47df33def40e08466787b9b399bd2e92a01df8aeeb035f5e175f39a424e00ac3ad4a8991988c75162ba3062af8cd24aa2075f1235baecb0308d36b97d177479368d4299cea65b97df84e64454232553e8edfef0f770bacea20077acfd8f3d3f0d747f83d8c28b5c196f95faf7efdc131d99c8a138051002f5a3347725fb0549a2a9591ad9a98dc87bad8fd192d4114faa3b43bf7ec6bda48b10e9ead6735e21e4da14485a9125f603a63b077d8d7d16ef2a40b6563d8122844c029b2f328d4a560378ad42ae0227fc38307ede2d2b240a712da837c10b8a2811f00277b80e9b28dff1431dd2bcba2f87564e327072514e0eac0c64c96d64e850cf3e1fbbba092df2e3a4bdbd993d5c5f1170d95a5222714c2609789617fd7964dd40db178127fd3e3ee72b40f577136e5184cd1a1286c033b9f47962802a3a44366f504b6d1dd37040531861a9c4d2db68f918477b22e7ea3f5e901a9088f8f77d0418da1123480e75da971618f29a8892e2a09177321d4d92bf5b45bd6581808526043a8a12b3fcde66d008146ea59ce85e4d5af0599771afadd2a455dc0d1fa95130c0f21e0322ad949a80482ab428a17b437503a78c307bd7a6fa04956633bc974281fa21921eaf805ebf86d51738114de4be496cdfb9bf49e7415fa86adae4a436aa39bab8989438c6e7f37fe1ae06e6bec6192a4c1104f2670c1a1c22c2d51a2bc5cdddf83a318da9b660b75e1b0c11929ec77ab068e1aa0c0344c83e85f6b48ccaf9ac1ed33b19f0bf13532d1d40fe789cd7504773091d6667c44a75de23f5243122a60870757d70e31d923f2c7b9b9791a2074d22af71692d9478dbbaec8105bdd6273a4787053730b447fd372f663dd5e61d071166d672ec1d43b7f2052a778c9310c214b18f926653d9a65e292810bf39c43e8f6c853020f87abbf598c730484a8bf4e566c271dcd4ed3377cbff5239fbac2a87460e6bdb9e134b49dab154df6ed163bd6189d893f170a748e72ff08dd69c481470ff24030437466e232fb90c3f7ee57ff1a442a35c14ef8106bfc3a262e5f5c63524aa186ee1e9f2d641289e77b3876a5136f8cdc7edec3205bcea0f77e9136c6a74fbe23a41f8cd0ff29b84677c6dd445823f5d534160fee02813f36c57f7c64a63225366d8a238724599956e086e1ed6a8a74aec773c248c9993db31ae67f2de8b4d6c573bfa435e78d628c20db95d739ca2eb7afbaa7bed15f635398249796b69018ef085fe9fd138d8890f8164c96decea14835ae5e30b972306583de50707cd5eae0f70463cced888815e426980df0ecb1f7308e4c436eac47be76893883ad371c973356f19746885cce9caece8592c4110d0eb09061113a57b78789dfb1678e1459676b02517ff683fa764bfc294782e58fd602dfab25c60a555b9e130aee5fac40838de3c77100fcda1cdfabd92daf6a3e3242911b8b8496ffa465a09b432b564ac0195437fe85b77f1a50559db2dece3e07a0d762cf29074568eda8a56e9856fdf917cd3be5f1e89dc051ae96b675cef6852b8dbb2ea89685c17b2b7cadd3362e6a6ebe7debd54c497d7c90451531544c6c0e94236187aa9d26adaa1b55b25095df0c9557a160aa3addcffe01aa6040b4c4ed9d4888d07310c9233452883ee7c309755e5a13970df92c8cc47f82102cfc755b9ca0f549c84c821abab90c613e3f6187e7ad12b46308695e8fe9cb1b644999fe4600f36bc50f4f48e82b61e5a9abdae330faed1189d79d8ae674250b8ac11d50e38fa040576d0a951ec567a6586583da8754984c8af246d508f533c43490e7ade79927f83b615bb4a0e4af8bbbc8804e748f928963367d1dd30a3e2ac42738dcdf0da897f45c7d21839595a03f0813cb08026421c0eafb629c0c38ead795027c97b95e8abf190dc38d1d267fb1c4323211ef9ade9b52fea2295ad54c396486816ac737a25910586d4e29e895d3f2e679d97a9ef6d4d4ba4f03f754114622be43d626379e55858e26f980e32fda3f3d8a64b0c1a1be8cfcc39e6f73c92317ab47c41d3a1985e10f6f5309773e817500a6a24f15c52d9e23a605bc1ef54f0badf5c148e3bb60ee902675b9470693c707dfbff820b1eed20426762914946dcb37e432d44848be03c5b11d9dcdbb812a37b1448b981ef86a18f5472be06ba40ccbc3ce0ff37959f475e9b2b3718c7d260f0e2e39ae4e570ffb149f820544bd4419ef5381aee2d7ea08d7c7dc59e4a9127de7d9f6ed43fea081eb722b5e91d2c01fcedbb41c961a3d97318959d2ed52cf3f5eae2543a8284cc6f508daa63e9998a5c9f48695b688127b8c4aede90943bdc5f9a4e1567225da3569f831ba363366fd2baabe1d5d0c87a60fbd15e1dec40511aa5bbc5eba0ebb5089602b5073477d9873fd1ed98f7ae1a2cb383caf051c047625bdc227709d06f1a502fcc500697d054a60f34966bb857f5155b156673ec018e760888085f831f6aa4dbaae95d947ff55eec6e91e57c6c3c3f6a8ce798f494d377d842c17fa2e40c097e218cc8428d3b31c9d030a94c2050039a477d818e3dedf09ea4b69478c1622bb44c2c6163889ed48de8cd6cdcd04b4a168d24366a0be0cc6503d6f7216c496b1b3517d4cc33a0024090f1adbc4541a091af35c594fef320dc00b6e38234d7a05f71d8e846a895e47c18f6a49f49886d9a77740c36effccc2abac16551822fbfbaf5b95e5d55a0d5ba50dd88bdfe0935f028f237abeec304163e52b75a2f091d215281db39e8fb0673d9cd688c6a475da101718a0d403f97e51dea6d063e34bff04eca4467a7919b679f46e0d7c76836940765f607d7a38709d67c5b87f0c33acb99e0f65de275af76c0b96bf38824071e281498476889f5fb90a391c6112b52aebbcb418abdfd6e88e34bb266d835a00c22c26c7b2d7176acdf2c597c2fd1713fc2b03b0cb5cc635edc5fc012f346a601ada956cf1b147da6d1c1af9264d72a29874508322f4c10b0b250cf3a68750eaa015ad8b3b5f503daedf40eedd7851e959d3d7f85236703098d5a74df320e0019eee10aa0867b69f5c795cd27450f29deff28198e0e8e16079fbed3bc434b5b5044e7f69b4de8b8b9082dea5c1f5527df4d408797f39c8e20208cc28964759a0edff488f7bd8e9a5df11108ed3aba15c010ddca1ee08db99dbe5fc0140ddcbdc097416502e09ab2b93d270a20c2dd129d3d11374c860b8c4079bfabd5b9487f1ea2bf69e906a033b10baca066a267d9ccf3540a08220eb04b5e3140d207a2edce24607bc9ef0d050998b0ed4bd221d9b9cdc483c54a1faa58c376948b52843994dde7251718ebe1e5da25d637195dba29f53aa73eb7b4027e07004be77eacd181de6ba09f825cf62fb069faea4b63738633afa89b05fc5afa4a58545acb88fcc13ef1a5b18d312dbf704a4f8750ee5f571d2fb39f8d0dd85406747aa70e4920b2819c3fe798ae9a5de73795a795bb71d129cb4b6b24f3dee7d56ff35c04e373a2f004bd0643befcbc96dde3077f45f6d27bb5d87b6a5953f5709f2e75b6a0588ac13ec3428fba987ba4e4b78834ef3a268fb792d255d92032a3e71cddc4764ea178e941c9a118938164d0795d7bce150b62513a72a0d952670fafede9be550f754edf9af650edc44f6eecb63e52ecc5b2b1b49cd8675bbfde79a9699b8e2810d6339550a6f1daaa23a1a4dfaee5ba4d7b2f51e3a6c82f8b70848308bc0cd6d86bf3cf05a39e068a2343faba7a36c028a459c67dfc98189ef1260dc2a9d892f26cc74ac2501a2c2ce6b2863c06e423e3af5f5db7aea3f3f992b9dffa40d958340be3e3dbf507e820729b9193d4b9acb8965ebc0eb80f576a2f8ac288a4da22016111c9ee8cbd0a07fbc16a761083e111d23cbd61d779bec51eda7292a39ab6e17ea77577cb400556d25cb69e7a92b6283dcfe188f06bfae861b83042301d99de290252e39f91e4387a91bdcfcb756ff34c952a64f983ce75ceafa3adb28900f96542b4da0f5f82547d852424145ddd4d9fa8e4fbd81cd3ae5216b6d5cf854c21ff6acf31934c59d5fd6feb5fea17cec693cdfb0a97cbdfff8d5ab92c9258bef4b10ff3ae51b2c2f5bd2b824a146b5c129d1f3b2e08320965bb444fe9dfe7350e17016be2030b0f2730a4dea2e12af5609dcfd36857fa07ae5d497edeae1c5c36df7ddde5360fbfe3ce31b460c2ab6ac45461cb259fcbc423dd95383d030f29323c21001ac7f98064615cdebf2c8e0f6751e5aa166cd22b2a02f3e65615632aea9dcc064ad092626372ac0fd8c98ef9365e2b062fbcaf9d97c1923d074fd5b03700aa47f8525ab68490436da2abeb4b0f68fa5c9f08f1671bbaa6aec29c2a2efb781c06e09b03f286a9d17b93a9a2db206b46562527de1cfa20641ecaffc55725b496ca2290f3266f378ab24692d9fb255ca4d69a1691b20a46f04787e08c75901f0cb9b00bc86d0d447d6fd95f0cf23a856f0d4582e9c44282246be18b0e2350ce34a615c2db360cb799c70a9ed005d644a72f668b9c0ad713e4a3b47419d7d9499daa24d780f25f1f8d800d77910779ef473703cd1e399cc98cf4433b0121c02a8712891a851545e49661a43dcf520c744c05d6cdf4f842824eada78f3a5c153c4ffa450f6a4247a31480a50e238aac063bc160eb9b5207f0f1659e5060e8974bb78be5a34a86af50661a1f83bc482a970988ac1f71dded98124e045ad40ddb6325c298c03be4321967f5c9d1c0d0d4eb70f3fff0760c88473a3b2bbfc35ac0535f95d05704d71fb04cc9e5385b6fbdaccca523b9e99d6553ad3b2e8648ddcce07a51eb949c2e885bc81c4e7af3485639559554c323161b95a85ee75f9f397b1c756c049bb87aa1a09c1eed2a815098b0b829091eb5f7ec1cd865720b9b2c03289a0f35559e706af74a58dfab66b2e06f6f907af2cc47b9af093105924e282dfb84c94ab3cb13ffefb0564b347c41d08b5cc9a5ae5b8b2980ac806ef8d9fc8bc1935078950f6a0477c1b551e71fe04d228622525ab2722562cc9da83d12c9568e626a44713a905782e907c656c87ef0ddf369bf2e104e343e17f85ee3946b7eab540a10b5b945f8d104ab261e8bd9a08227f863234eb6b9e1459078734a442c186ab7b7cd72fae433b99855c622ccc3fe118745f10e1b4331d2fa0706aa62c78a0fbfb295bc86d44bb0edea1c9cacb2f6c85647e965209e4a597af3865b5036b6efda9200d80d7eb5f7e49733d71e49e96c9a8df9258803a71210f23b9cad05997f823b42d95b0ddb28f00a8de56b606c4cc2baf7c93281df7b0385195ea31d08a61237cbb4d1261da6f5dc9a288306e85f2b331abad8aa05dd8fdc58cda9d1a5db39a2329f6483680a2678bd18d5b74a3e2d7762f014bc861e6ce51eebbc29353bff8cd13d91b66d24476d6bd10502317da3396d2599c849e8987c559bc1d3872696e78c1871e7ea0ead2edbdecd4c14626056d361f85ec5a234dfc747a8d898e3fd6eeb4b7d6fc9bc9ae926518bc1897f02651991ddb0b312e1adff32f0f1e8c1ff1394cbbe6476dffa0685d05e21786dc0023a69f8bc2c38c5aea684c8ad50c5bf2752164ce640484ad5dbdd910d3db7f176a212a7bd1451868ab4dca502e2c35f966cdf25f2747ce1a6b446c484655b1a0bab5e2be39cf8db9f99b573763ab32771b2d86f0c63bcdc95ea8f7b9e3719b0bcb1a065e6755ac6191b774530eb2cd1a750f06f2ed96020c5d7a56f30bd89099c85dd16f7cdf36beee23af35baa566e87eef276aec48822611471012c94eba9fea9c520a2358326abb82f10841fac158979f0dde7d2e57384986d8ca945185ae0830b0628fc8ab822c65cc90bf873d03135c177f50071f5b2bb1292a4595d4275b3e4fe4147e5f9c600636bdb568cf32bdbd3846afbf5cbbfc720ebe873b9a20fc92f954413616450f37b9e9edcd6a964878f6fab320110d395c2ed0c214f05a321505f20a30ef4da1b39e7049e8ecf860a405c9dd024d3a69b20a2fb94df01bc4ea2df27edea23b1cd36be24324f96f7379f808e05c5615714e9b17b30fcc441434de626891d14e26d306382763560d545ca90bacb6d479d5acffb22f9cf80dcc579efe619b9c89934ac27485f509a98d6bc80f89ade3cf8f39ce0d7417c6b050d0610ce25eb967746495485bf4c4c3e1a0d3373c388e3b281be515e2d2b88054f73378280781f86ba019aa99b9cae59866561326cef570471db292c0333eb69bed736732402bb354ca1003188c16b24a703c79f863cb337de896989b6631f569292fa2647ce2537c67f2ce8e4346e2bcbadcb2f3e2f5d886282f38f48dcd0c333a618a5c760138042b06f53d6c0fa2f35cdb67d253caaed04053ef9b972d4e5c667c6489e4bb868d49d1a8d09ff8e8250b0fb57a7a4c34c97f4b237f8477844826ad396170525373c6c3b52a4a9a2924d7d95414e32ca3e8765ef2277a0b8f9e7af499bd9cdb8677c84b4ae67ac23ced0abdeee6b4a70a02ce604003715c2e4a16524d09dcabf05287f8ecda03b320ea90c0773effacd1d339bdc1859ece3fb3eddb9ae55d7bee337a2023ba8b5d54b53bb1da8b24bfa2ea73a40aafb868a3009e5a9b96a419a9594e98e1e2d1e0d34b6cc531321887e34446f4990dad537d4febbee3e1cba8f05024578f88b40deda2e6c227e7c12cc07297618d275ac86daa5e2bf6dc4533bfdc3259bd9d49198397629999d120463309b6a9bcf3a5c284ff3996fe572b21a9e23ef758fe3e633fd2c01b0a2856b1064d9929fe462852699db1b3959e19801a7022e23794a90e4cdf12270a76c61a6e3bef2d47b0cd5562c410a610ef1c450a1e6c398488d97d728365b3d25f472761ab4c82f5520e38ebadf2bdf6ca439bf9329bb24f93d6634e22d6a2fe034df61d506c849f7c4ef10a93aec88169680b9c63851a47fdb1d41963ea652243bf50327a3a5d4c7bd20e4ab115c54a362b7aadfd53cd2b3cc4bc09ab92ab23a3348ad975a161186a3a6bcacad43ac0ab57795a20c0aba8570f10fc58c9602c5830152ef18de871a529722b982c5fbd9c66ca53f21535657f0dcb47f4c7d977abc91e70824e5cf3d632ae6473c5ebab6e244a5adc2423587c1c6402e8b99ffefd7e7ff790173200c67efdde574d777b336a40624429313cb0095c928ba3e01f006fd5db670abed8548bc92246a9fa5a69ba666966c164aa061ada6028fbde0e42eedff5276e8a53a186935099a393cbd67927a32b078dc9e5fb7e796329a6c2b9110062e8b89305b51f6b5aa5b5596992e833e38d21488bdaadca04b776de69a4f623fbc24d3411373c6e1d128f5360214d5fd15087b0bb8886fdc3b354ac88d07675ec1a5aed4aa60c94f833724d693f4bbadf870e64673d7af5be7db120b7c8153fdc09c8383447e169e9d73fa7b7375aa77e60cbe8198527c385e6e9f98b8c298db4226555dbababdad7004a2cc39fb067375d2109eeb13b385d13d2ae47a2e93ed9a09e36d08803ab390357126a703ea33e43dfc0f04f9c558e86f1718df2fff77eaf9d17cc1a21ed5dba8cef0e0190d8de298f0b7d1310b4f12188b0c7544714a3ab9f3d2af380fd0ff71577dbb3c40fee5015e3aa7aced9fcdd494c1ac849beb6de98fb1d440c53cc394f47597a06521489cfe6083ecc39b3c9cabb0baa919660efb3f66b31955b2037e63852cc99c0f5ea24b282b29ad8e4c69f77dbcf5af8cfc25454c96a0dceb2f8b2965ebba95b064df54d9a6da5c3c14a77b4ff4e763ea21b2dfa0efc4e2d9bfe9aa7cf4f83210e8094d3b660fa0243d47927f84b65eab2a074c997759c899af949dd7cbd814e7c7bbb2a8eae624b9914da8152afb2b3761c490ce1b7383f55c4ef0bea1930c8aa682acfffd129cc92c3ff4f667c640bde80c5a29e4c0de4d4f11e29c78e2e54ba08005504883387069d76b6ecff17a5f4752bdb33f9d3cbeae2d8ab301d06311bbfa171371b2852483707f6839aee55586a29fc5e138bf589014614a7f590b43767853c7d07e33c4d4f6c69bd0483e20a9a096b2dcbe5e083505889f996ff5cff3cc373ad06ccfef04803a584a5073f7bced340891ac27e98ad12a86a07c7a1c7089712c0413c0124408664ef474952a4555aa1f51ac597b34228255e07eb841bd5bfb9571a7832e236af49dd80c46f0bf4df36a544b2ebcb36fbb0719ed3140531f96e6f58d08d31df779d7666aa045df7682c0a18f49dc3d417692e810b7b579b84315c8e309b6596365918a61feb2acda079461ed31f093352656dfcb3766a1f7ecd460e26d37388e63905780174dd40c5c46f59b4150c82d5cfdb19f253f372cac209b536ecd079ef318921e5c5283f8e5220bc41902f9a21426d918a83403ee2fcaac5fb99305380c686c3a618be8a43301978414db613f8b4a72ea270d47b43e78fafa43c08509708dc6c4e056e228dee34a411c62aeaafff1d86af7aab40c998972804ec9555078e9b1f9214fe6b272a8103eff1f4a9271dcd1e77b055936e0f8cd381b772b6d9b305aa832cdf1d1d50273a73a20fb6d8a88acc3ddc94e64ce23e4da52f0af4d8b58ebb1d03c501aebe09ab7964179aac1f38b22de978518b78105cab9f3349ab6f8f83952dbdd8e72a340998c2552325ddec9ebc36bb61df86d7bb94731ce0262a8061fad4b9fdf9cf9e1c6dd0a52c8a964445f89f755cf7ea3203b9ec9ca9cb6155c03cead3053198c5f57c6ea23183972008404d6fdeb46c94b0239fb7751f0f21b49e3812df8cc8ff2084b5d703f7245be781e1ea38de6cbec77c0a272a962d98d29f208390747a4681c86e2d6fa75cf3fd61cc120cbeee07396816cf5a8161baaa8ae3a2a53a7c8e6b5582148e448c4b283fdc18b4a91da1b390d69cdf3c66ae18a7157d338af849438fbcda19232e357bdfd7a98cb2aade7026ea3bf1526ee4e53a33e2a3776fbee276e62db64dcb0db35b567afb323df779e10b61906656026a1b1ec00847757696ace2f06d1f43cf226889d013b416de88eab5ed943d35523532926ed0d42ed1e2cd1d9048219292576c6e6577681466142124dcadf3cc7a0286adc1f030dbc817d409e6bc0bb95e43496ffa45926f1fd0f98c951fa7e08a5dd939bd2e08de4f831a98b9c8eb2477675433fe395b8e07e01109113544627e0917642b1fd4093dca0dff8150f6db4dc641789c80e2b79be6ae9f9fc7ac9f975989d626e9e62822cf18adead51af565dbaa491774a8af70d829395441b113ebf94e6069288df8d0af0bdf82f6b308c83aeefffdfb77ddeed9c91f548af6d28fd7c05dc51f729cd1662870c92e0578b5e9c4b1df189b8cf97263cdcb92abc1f9acbb1aa6b35d6d185d806f50c7571efcf04da2aeb65eb3be91a343fa1fec6753db0ea3796f6acbfac1b35d257738c10a1b773ad49ac7ba2c1bf73804962de180841244a8dbdb99a641156782edfafd6a221fb4e4c72146943978615c95b7bde2ad3194447ed87cc11ee5d341cfe737adadb428dbaaad50b5d2a447c15b1bb942cfb2f2211af9fbcc366021f4e71a1f2e7f6dd202cf5d17d74aa3f8be14e345d13ed4a62857259d5b582f19ad7aa3aaf5be8faede5bf010541e5912fcef568d4216dbbb9972c5beb4ded2daf5439da2a0799d1939a71f14553678e95366ed477a8f7390b20c35130a54ffd685f091369f5c6d986bf96250415691edcaeaba700c7fee12b5b540f10cdcf62d53a997bcc143db49fdb72e457caa4133dda026e41002a62fce205441d207dad5c7d0cbebc491c6467ca546990bd30a9418d8fd297b4f2b6d6c06ac0887eb584a73933f2f45db1e4e9d20adef62d999ad0c7349eb3e2e025f6aa1d2328701cd8c85cb51cb7c31308c5a7f5233e2a8335eafb3f26e402c6a18dc0116918009579c4414bb64bc17137821784875800b972107bb457f5c1f49e6a2fff940827cb3851b07ea5ce890b52473bc9bea49000f0070bb982c8310f5ecb8ed112f9f5980e6fe71c4b2ab41e877f65715972d41352bab59a7a2eb009d35923cca6e8fe42bfa7c61a7245f2ba9f79add68071eb1b58438437584d52b72de42186c99a40290cd096439e2d3702b48fd7d227ca0fd12cf6d5e95ce4cc1107ad9a9dea578bff468d4d167d6a6011b6620444f551634cd7174c81dcc5dcc981594dd770e991c3ec7d655561bdfebafa60a836e31f0ebd20928aba8ec6e1e5d5319fcbbefbea942e5308a0aa6c5e234e9e07c91d7e78fd91f66a3d1775c8cbd8ed537f14265e734d09e6adffee5e90c704d023880ca9049cda22e49609c2a6f7187a1c8c9e1952476fdacb197c99d0c93ffa8c4d517a672253e33b7b0278d8d257235777bc6cfa45c36bfe0325c34b21282b166a7478be4cdefd5bf8b686ec3dc8e46b33a8b5d6334b803e2c37e384e37d45d35d728f671b825fd85652f499c699caa5a3d77d76de236107863edf8b2afa8d754a5e801150b92eb8f2d33f1cd4300ce9a2c30e423decb0d019d667789eaf80df4eda3e96f7afd0f3f2a10527f75db02573b24a54e2e46d95eea784dec3bc9eef3531dc26279af29cd7d3576c2fbcfd53740057fc9103a18ddb2372e590fe97054e83795df382ad5a6f483f48d0697616152f02e2d0ad7b8e6f87d2ce31ccdd474df48a4390287427a5d1525adac970b887e0cadca1ad40230a9f3c38eac6e9586d27caef39ca0bd21a2687e24fc6f3354f8d3a277117393e1bbe9ef9d5084788b4e52c8c28729d35dab1a8387a8c396754a9bf7215b664336d38ecd96e12253fc80d4b3e55542da470bbfc4f57c6679423cb7bbb59fc60c4feb1e64daaff01e2bcfaa1efb9290ca75aebdaed52583aa6fe983e09092d8b523d4d5a4a2024b242ef2ce2ed8f322d5e21272925034730b763f220908e50183f5d58eeea52bcd677c42b97bbf0a9710c6cba047ff984bd8eb07d6c0a6b251e74bbf82c06b40e2b81ba6b691e3a489660a7cf3a5f34ad4cfd74f22e88b75d21de42c129bb6145f3d591d6fb504392c50d595ac1cb2fa37a777a280b99e4695029189123ef66728eb6633ffea9ed294e830861f56f1e653bcff6ebe7722092d4e23e0735c095cd917835d0cff0fd64eec628d084b498b705b3d6fc0fe499a064e03747fdf94b418397200fab601c3cf812a5baf4094e695f363fcdcbda3e90ee19b684e7b4cef45fa69c9f77152186650ff4e02328cd97d4963963853c71db3a0cc2568037941f2f0b28f7f3d3a2adb3e1633046405fd6d7a578cb6dd8f15ee2e2dc09a83b305599945ffd18a4ccb30dd352f5c7e7b41406655582d1c2c5f87c9a5245e0cff8d5a14d50d6eb9d3f4c88150836c3938a255b9583232dce5a8b66a241a8e3da4db780eb01226203bb99f9a0605447728951edc0f8cf3cbbfcbf3e67fe52d1f75b3a589cee41e0e65db0d9730dcdea860e0179e054b51700c3d48a534ee86bf74ce658cf796cd44855525f086d702474d7c1a64d95b1b142a6e0268afe3c579e32f1d0e8cd1dfe84d98e45215fbec62f57c5a17e3b482458bf3e93afd89d4afba11c3a61d5d7847ee86044475ac9b9b8264ac2e0ab86c6fcc1a31e646cb441580e2af5bf87f6ea083a8c0f931fb28abc55f0685eb48149dd64a4bc3ad1f9a48a0f84975888238e58e06e8eaeca7ae74c329959c360286f1942e5d5050548c464ea15db427c5b4cc0425920cd6c83d231869d6bcd268783376c37d34ef546a67aea407f031152c80b20f39280a05e02d6ea4a2e76b2aa8e2f37a5a41c764291df61168ed16dfe5d5d25b998ba737fda8a3ce13524f3886f1f23d8e9416286c945cb5aac7264b25dde7641d7d444588489444a86e248a8a2bd7d6f5cd3bda6f78dfc13756b533bed92af8cf70e4a5597185ed553845b8209886ce7adde80ef50d845bb7505d06dd9e6cc4b05bcb40416066d92ed28648d799b55bf17e271c754be1c39705fc959e88589142374dc301b94e95d2eeb6b9d023d54fe281a5ad71768b2109f37e94249f1609c87c15affc805249e73a43ec2862680a1ef1cda30b9315c3407957b6b6e9560321ceb14cab9cd9d0a761818ddb2bd42d91696d9cf949e3554455101577911e410b076af7246fcd1495ea01ee8ad0fa499cae10109a0153e2120160df60e02d394b4c1dadf493fd11c33f0bd0dda42ee29457ca23ad12526c0e4599a0377a93e5f71bba7cc65d7f5f01ec996ef55eb718e26f2a4e4bdc594a048d994705d7b05c998bb83a0fa6cccd0937120860e99dc907e9b3c98532533944b8c6090ade91f93d050828aeb7127bd61e1ac1746139fa2c27005b31ea465f89db703829ec02055c64b4c7a050f8aa2a002626180dec7be75d68724fbc9e2ce565032361c1a37e2c48ef6992b457958e16cc8f2854ce892557347ad4cb054fc4b1ac5ca919d32585199a927b6f616e3c92c101940893f363f870a701fba49f4cc18c245581592562bc4943645a35361aa12c0bae037f7356cfb4bc2b9cf91a6e5e862efe199f3d0553ae37f649c7904b02cf081c8a1e6861132b4d02691d6277cf1a4810eea59204fe70e76187290eaae80d664424b8f7c4f8ae0c1ee290d00097deb2e7c9f17f064134ab5ea0a54c854bad9d0ed0233f0e744c8856b58e528a0d2dfd84fdba66b1df3877f37fc0a705ec99ad168f32f447fa754d7c878d8621e871944c34d82af4623407a98ca4b72b26e97fd7840d55dc521a22f910f55d583436d6dd815e51c49a205ff7d3624031024c6521aa3f1c3ab4724c76ebb008962c95f758dcbd0095f7a23c30c51a76b50b6c096461e41769f9efd16b400abf2469d0f208a8543e005c77f8bfb9f8803b581972ad7c4d5b50be1adeaabcb3e0885a1ecc77dcd8399bfe1055af0e0be910c0768f017a9d08637431ab57ca32216114dfd2bddf32ce654d91ac30b132a144941433685832db9e2c59a3f082a6de4fd33bce1a38e5927e2f5d96b492f8cbc8b6cf94599642a87a305eb829d47ebb806849b332445903a125090c4653361d549d41f9ffcf37bb40fefb83cd4037269027b5144200bff0916162eaeb4bfaf56ac37122de865d9b8dc9e3d39760181fb4c78476f7a361b5cf7d20f366dcd660723ee599f6990221ea027f3634d6716e14426d252c079b58be76012778f07620fdfe291f2b39ee460b3e8a3efe4040e86917be73bfcc5e6bfd20efd4862a56c5ac6169511dedc06e2d10142df3b0f413dcdb1b7ccc4f46882392f2da3383b4d3b72dc05d2e28f9256829b47f44e32c023ad2db6ef062e9efc9c6db8804ab80944de81be98abf72d9aae6a9ca894ffe2077d12da36d90264ef98aca8c07176bcaa92e69efb17df897ee4a77469d350c137ae91a92e6a85b0bbf69bf5bf9efe094f87016aaa47a043ec9d14dd50db08556f9797d80d5b63459801643fe5c7385107b5916ef0c7047ae8b6a222388eebb5040b7b657439557d20f6f2c589b45acbede185a6a2b5bf606c477cdb296f0a3ed4d182696170e9d39c8762b59060cb51e421ee6551524a4184ba5746ba7d5b7c16770c469d3ecfa694aecabf98d73d0a636705ae0d0f48d60bdff4e34532a59b5c8f6fb70259505dd9033424abc5b317d520a2133f028d609b0e04ec94bd3326ee1cb3eb3569e85d73bedc8da32230ff11bb5c3a3adb638b601f4257170972bff85e2531a60d16c30471df75b9f2d8545f7a455a6ed8ef1163f9fe1c64db18bc7daba79f336393e9bdf1acb7eae8e942e9f55f944ee148f8bfb6692669eb99025dcbfb16b4b7d944e12a817b834bcbf2ad4f0f7bf03e972b5aecf2c30a3fe655e2a8394d3af726731714b0de9967616fce9468232cb7eab906772af3c16d8f0fa2b199d3ab2b960874fa3967cc10cadd8eb8eb8d26997a42b78c31e4f20fdfc90ec6c28cb1aa57462e56d8b2894cdb8dadbcf80309f2120d8ca5ca5436fb68d5fa66fc5f6b34780c743f4b2aabc683e41448cfe2e328edfd659ef6d1210e8f41c31645d29025a27a79b233663513650d258da0fd52553159bab814d4e11d968e8818559db308a2edcfe0188d5f8ae1631fdee48c9aef1cf5aaadd1a28347c7190e5b4823b238d12122c3e5b73bc71b070d5e476ddb730832acee242800972106ab859f34b065ae70cc0ac5d1f3cded5708d7866b70e7d97b71a7d83861507ef62b0c977ed64a3ae4f56f0be83d6a4e5d9f3500e96ef328fcc6e51d7654b132d646fb428aa5e18cebac18311d98b5198e35204fa6ff7d1234c5888ee7afcc9ac8257d9a573d03941c27b0236dffbfbd964179fb65d086a5085c27e85d47cf240dc7ed8055ade414825718575eb69579eedcfd14a8bfdd790cf18f0a140c2d9258baf5018619884e4371ebb362f482674b3578bc603b7ce7d35d6774a669078a0b1eb9bc805e17a0b8505cccde0bb799065457cd16c4814d0218cc0a59c3d0112c3df19a92d7e4f508755e889690fe0c2dfe03fad49ec128d80fb2cdc5f33636a2f2f51c5461b6db1e7d229196df40c39f0c0646c2d4520cd4b4accd16d3a379822587bbfb01699198c0e53a39fbf585ce2d1a853ea74acf983231dcb4074aad403c5736445fb9b817122171eb33506471df1057f25e5fd5336fe315ac304af018ecd2b697b89403365b041333ba1becf0ea1387b2eef820a7b53030539426ffbb16f44734e3aff36aed745389886ca51260108d65341a93a2f01216385b1f50463035f6275169a1467122ff7da6b61f0de9d998560af30146a167273d63c654575b8200e7b2808a15c7805096858f7bd0b16dcd0187d3c30f4a8a714828c1cb75e2343b28a047b0ada02078f4065f946051fab661850a11f1b95ade1c925d80055ac37b67acc7c1d5f905a9939d105ed3079ebb9e99e42ff234fb0b42ef9ca87ca752f7aa39d99fbb020673b18470f75a5ac55bdedbec0ac2aaaf0f080fed61dfcdfbf0001b16c74c8e6391695e6c6e74ef81e324c143931e978e96da6b4e5104fe7deaae060c7a6da95ddcaff338966b0780b85d138c18fbb2080b9a6d9ccdf7dcc48144578fd401c8ac169c89589bd28fff29ae8630484462814e6ee9f60b7e33959e3c3b8e7245927f252ea3d829471ed7c1738199bbebba12d7313e8a8f0493449bc322f54f283daee06434e7af00265f02e031842fc65a96adc17ef771b0b734bc6f6e0afe14cdf6bad3ac48fca49419fea3447227c6528423cca05b6a25088cf487c2fd95eb2d912843326fdd7682c5b629ce88821a9685774d3d3a7c175aed898b3d14160586c4747901765a92668ec12e024a29193900974f2062dbd366554a17038800894a632c86d4b01fee20d32b7d2687115a9d17416b99a091f283d3fd9977907d780d55a741f42c9a28950516c9b4e23845a246634bf1987554634b319b2fb3d1bc320fed387dab9e46217d884e9744074eb808fabcbad29a7ec2e6ab0a3848e15a3d2d34e3e914646c0751e8bd253cd0cb0e2714dc3650a6285d35b4d0bc4756ed072d5191dd74767bff53be177a348f5de0c92ab5f4cec3c7fed27c0e923df9e3ba66775229a650f474b9a62663cb9e3e732aca9e1c3b5d53053deb55d5bbc71751b20a66e5cbadf2ab94f781cad0d93871ebdde5ebf307ab4348b140172219785cf390ac0563c24dfa30effc715cd6228a829ec7dda7463051dd5996be6dc2469837eb75cb09009cc23c9257fdbdd9f161970b8986d9b438e8e60f26b330713700f2674cb5f6a7f923f818c25f2ded2f2138dd12f1e3c34ac3f67528e5e6ab53009196bf21edfb9f0148ce424291d3abc05df84d43ac8da58200ca645dcac2d301818fc05dc393c1799ff16139a364f730bc5246856ec8eefff2c714088cdd82abcdd3fe0621eef594531e8d9874a7f0c08b061b90433a3a376bd19bf339a1627bd9eec2d66503c938d263a91d0a8d4059aa3ee541a57f68bbf013f257483cb5736bda4061aa8845f8834ed08fac5499280e9453431943d4499f7fda0c56e6003afdbef391b854f05dcfa39faf4e72d1d4f289c0e2e25caf5f85c732ef6a6309ae4515e79586cbb693277c0f90b09a2c40e9a726786ff8e2e9bca0ca8d410432e4ce17339063b5f371f1ef70c3e0c8154ee97fcdc7e96bc0f8be84659a4ff8225638c2a671b3e70f9c32d25929ed7079b75b3bb49d18818695063044fa9db9c3bb7385937ae490843174403c495d64d71e9af93beae870b2141d3757e454ec626f6b2fe940053eb2eb843eaa8e29460ffae2cd3f2f327710b132a5aae8316404109a14a654b5a5cae465cd1fb7aecd20a1ed9a0f905cab6eb3d4bd7b47d64d27dd6f7b47609c0bf81c053f0e44200b0eb7c9a33ae116e434a3571c1c19cbd8e39353413a11a67b85545ef417357a1f05ab70bf5715b74840ad2556fca7b502a69dacc6ababe4951e02380d1cd0c2717035e6d7be95b2434edf7721b3f6a5168369e19ddcb1801cd80e25cfea068ca95eb7229b8a50d752a8d3e18088d39eda0d7ecec08182ed746dc90339b43892c2f1e8a7738bb78d67bd1fbee2aab131e389cdcb3a8a10068914209682e9532b7ed80443e4c9d2b84560fd96a77a28ac3c6f1f09158579ed421122b381f4553d8d5a215b6f724d20522b9f39139d74a0664fcc92de3ec83a816ff1a902dbb0668db289e2079e9a4faef3e77495bce0c653ea4b16d7f01c6d0e81fbff6eb761ce18ca22be9ef4fdf61705cb7fa56006fdd5dbc544c4f33c143d41ff77e33de1385cd8f853038eecc7655c0a4ffe82b7e7b6d63033d1445427289c1eda9b119d82dd83dc07b6b6e6b9b3bc5e18b2ab5e6622a97d7d0fb8ba56758f26e565a22a2b24d1a49de6682970c84575ec2c5f3a3d580b1436177c1265b4adb3d7c6212f6ee9e93e0be6dd33217f1ea956d23daf29dbaab252d062d3ad631a1e1ad0f54cbf70157bc331780c630597bb8e5c37823116b5dcee8c4b0541b83722a9f47885dae9e02e46598e50ff6cf3268be5de0be24c3315304c080cc71ed87a8143030e12132d8053cb12e9a9399d5d6f5540ca99320a3905c3bad357f733d96a9e71d08a322578d8ac7647e732bec77ff3da38f25668e9a39d653cc14072997f69c7302bb18ef7c2871ccfb9d4e5cbecd1a1e580567ce44f391d612067cf913137b5487d29a6294099b3f2cb701b28d848959b990abfb8274854a1cef201c127a7be40167ca3a3faa2eb28820527284a2c4afd46460b51648edf91c5581140e39bae82b4b6a8bef47b2b1b07d51ef0e4576d67dbea19c2f37c65c3482a46777958629f865e7baa45999ddf21d22eba82d199e702d9c4b8eded7f0522dab921e11f187ffd83adcf9432b4f89b8a0dd2d12f10f26408e545d459d98ac0918102a5c75759db934f48446a08c503533ffc3e19f864bfdad29a42d50b723716025a07a39a975f7efdab751b2fa97061398754c2be71b98f27ad1c01356a4ccacd1fdabffbd14db20983826acd21cf93e375dc0518df9e7c2fa4d52d2656083782af2186bbc03151d1eed4bfc0bc1cb7d613965767d1d73a129efeae6a5c0d060501ab87119e40cd3efb7a215ad754efabf45043d6553d0a6a80712f7bee9529c6c83643d9b0f3fba63960bd36cbfee91f5a33ecc425ce33a77cedbd8142b6b1d1cad75e1bd97905f8cea56819f35aa157e8e6d46c72844388e5c7fdf71a87a71d1197ef0bcf0fb42bd13a901f4e6fc4307bb5a96d9a30fb896536f820f663ca35e1dfcb4e5e58bef657e4de672f6f5e3db19ea8885d00aac1520f4f490886498fe9e37208af74e45c3774644d80206cdc2ff1c8ba7ff16df4e53ead8a0c66adbe288c88c018ed589e3bbce47a0e7fc1d78b0578269165c087c3b2ee67de6524f98e08028e04dbd0abc290505680eaf1d29b84df910cb3ac302036d960fe6aa37560a451019e5bf3e794872ea7c28c803b1ac1d5d61d2848b34a4e5377c9659ac20d8931349d6f1e11c52daab696ae82f38b3c7bfa29b976417c5ef0c2f80757fa8163086acbb0f4a797b8184e8a41ee013caad7d3ce7e2e5b792297a5251510a614709878dea256f3ed719eda00843e4d078920e32fa3d8ecd82d72d0e912d5a6a062afcc63f535e630c594a7a2c1f5cfbecc58666c04344f282db9e713c912265515fabd5e86757f4645afe21cee1bdd51819a99cdbed73029da7bc2a754bcbbb01db7a1a64a71af041e8c47e3766b8881c44ee1762427a300c8c831f48d2fc547ee8161b26b75a3cf222ace714d11277b566dd92ee6920e2093ff7228aa63d0e9be8286ee0cabc453addffaee5beaf09b8d62b2349cad5b74753befe71765ec57429235b5f04baccfb6a59dcb97b878cd5d20fa7cbc9fb6b86cfb8d157fcff2e464b9b9d8677b14fc8f018d702465510e348b072b47d3e1cac61516dc6a30c784fd6d01621187b68b6297f998a1ca85239ffdd9af3fdd3c5424737a1abdd398619434e3a02afa42dd68b553e49bec6719dbfeecfbc46204834a5be704c9961c77ba5432a75643006213ef7c1b980e8d5dbc0206c1219af5580dae29fc0b96e995d0aa14f55cf5836d6536c328bfc28cbd96360b29dd7a828c0b37310fc9fdec788d624c5500a4a45a464f7855ee90ae281dd52cee87d93a551ccc228aa6ab36b5b86cb8528fdfef9982a5084f2f46099013fdfd805fadc0aeed516555ab6cdb4b91e869fc1ca474a4e17cfbd6ae4416b4d8a843e024ef4f1980e9257bf99a9c0c36639ed952e9e6f771938320bb15ee6cf719d62bd7d7ee3d2708b85cb644fd9dc52f551820c626c5b18e841dcf3f177d283a1fd145c172695c023166a4ef5203b842ab5da2341360fc6bbf219014968c240870e1976a39d07a395e15ce4252a477e743412d62431d116e4dbe982cd0ddc82361e2b5aba59568fb9d6c40fa9ea4a784c79c9d7756468eea8d54cf986ae4f373340cfc7065df3e8189e080b11e8b57d57e7683d5a924e9b7e53da7cd6696cf7f158e925818e57cc5f8dd1b32065a86568f88ec8bdb17847471b7f51d62af3a4e7cd14bd2e1da19bad59fca89467dcaa9a8a8537995468bb63998d7b6395d6c4883fb45b1b798dfd79b9b22e316f0fbe4a7f9f38f73e9e7e6402df336eeed9d7c8e1e83a48ff454a0101ae2a16701b8a2751cf986d19b04a5f2b968f3f2454f5579632f9f9e09c8961925e7ed5bb8d6b11cbeb1c7cdc723f6fe4c117abb36dc8825806864070ee3b3eb4b4e61ca54baa23cab812c43e4911d2675db4147dca7110b19231ebf9bbf7df758f93c4c13cbb0b687c7143b49c25d248d25320b90be3153a9c8439398fbeef3ac8cd9b9699c2135115fb9dcdddcea47beb0ce87c8ecea2ab21a610c6ed77041a2abd47345f7cac28688874613fcbbf9ffe0319a348131df9539606ea29c3ace677eaaa149df6906b793fc10e6bd127a0334513557da231f8ca052c2c79981b3aa2226e5a7ee22331f22466636cb74031a4789ec3c8fd084a72d5adc3c42357e24de0651bb41818d953215269d26223989bef9dc3b1b1dd1c962598e13e1a4145bdaddf50bd11dfc8700553bc3e86815850562758af64fbb6c5f936847c94f1a4dfeb39344427be39054c44446e1e6d650a097ec9281335670a38b6707ad7bc3f656c4a4879f2214130116a060b9848338ef859b454a4fb7e69d6345f989dd08bba3efc79a9317e48b4c263b34fbdc11a6b25337d64d89a997f59e2665a67ee0a0112c9d9edf5449d1085e6161efb05e840b37e5b870476f7c692c8de1bd745a3a52921050ed6f8104c34f144747b58f791199a868f4c9fa8d96d487091840500c7d76a047c83769da647fbbedc6302c43b10046eac059f8762a488dddacd8e7863cfe0a1dc1422350d455c53454ef1671ab8d3000dad8045cc53c1b99524ca730891bac9b4fba25d4e431b35af4ec192b92dee887592439cb2b4d5c16f057c4a2f9bc84365e6caf5e9fa586599455960655b038df352a4989a386df03cbf046cfe61ccf6bd4f421f57b70b45b2c695af147bddf866c5d57bc9db39ea1ed3c087a6a546153df41f55070e4472cab4a51316a852dfb559fcfde10506e74a6b5c6b2f28379cf6d505b6cf6318bf33662aea80fd3dc7dfb456b4663af2d5a8b322fd128a1b84fd36b2cb9e5919f50a816f75e0f21a3b8703ee460bd5d6b531e43e52a3b34d7dd326e33eefc6b6197a7ae3f0a2a35ecb0be26aec002a50328da96da6a67fd2eb28959b4d87d327ce6c375c059a56ff8bac1fb58ebd5afb0fd53e7d6e6932b3402ac81197bd0d75d8607862ba05ebbbeb7a6265132ca39c8608eddbf5cce018d3ca7757a95420ea1421c8d5b2292aa4201b30324a95d92573f195ae15a656a1946a49d5178478487ec7ec5482636df7dbdca29401d26c3f5d84cf9ffde1ec71d1d87b963ee385bb06f9993d233844786e846b6a34bb9761cc5d6c8e8efbb27fbb7eec3ffb9f4f33fd20d68c5270b4c1980efd850ce789f0931fdc5c5facc02c48c4b4337eecca40c7044f1c0bcabf747a00562ba16c46dc9005ae93069c9c64487dbde75adbce6f1da71851c57a6b37ffc4631fdd22ae0df51e529deed7b1eb151453f48258130b11c9cb8116f533d5556bbfd86a013eca7478691803ffeae15d3c8305886a0e78cd004081e50bcd3999aac07dca5cdfac8cb96094bfc7f621b72a3e7d82fdfebccd367ee6ebfa4c142d4c2b80db04dd47c039232f275a54813b5d55b6f5ab3d2f89c7373981484dcda20392cd96cc34b90fb4041b9e16e942b5d6a7df584328aa0aa115334bfa5a8f9ba5e8671e08fb3279354c90cb6da1ec0fd2f1842b82189f0474c5ee38b82f6d8219b984fef4a9f287fd54956e7c9e7398f63bd40ba3c07dac1f2d337d75d2cf10f7f3cb01e572f9cb0e5ffe7c27dc36d5fea475eecaaf6a8a8630548bd9d90b59224fac9f4886d953f5aab954bc5485184988e8cc317348cec0eb88cc025ddcaa5be8f6a3cf3483a7b15675bca319b11e0c9b5557df010dbd50c6954408217421f25157153c97dac39e1aeebada1fc9e8503ade6073d56f87afc6db71cf85aaa3727d043a7127040c10fe95dcdc2f91880368ff081d15706d6b0ee44c26e4c254f76792346cf96533271da30319818a75976ceb26591cc9686331d0f620b833861c9d32e6dd4d59881f3298e47defe29b6b2a8c0da158ad4b29128fe0a528d5ea6685a741dd11352724ea7c996bbcaf4d1aea944964d2e9e53d604cdd67ad1391464f82c9b65d21879135c9a9cc361ec4d54ab4cce43c2f061215d46d8571669500a4b69cd94dd0fd5c41695fc7b60392a50d44963918cbde971bbcab8d49d316fc06a133ae66c2d9bf8d049f51d8f9c470caaea437d53606a5fdcfc916908f5c375a6e366c5ac30111b158ec1499e4fb4471c5637c0a6a503ba6040028fc1c6349c19eb026bac3188d162cfdfb288f3200a72ba8a3a0e59661f15240a47eb97cdd79f13eaf1fc83d7824f37bc0d2f55ae4511e66dfa79f321c5569fd9fc6554e25b5df914a14d9bfd57094b9b6b2c6399029c4adcc306991a8dac55a7389e67345c62fc070bbf21e02e505a55252b817bffbf60c16d61d82a52936da7d355f64ec5e706fbf6894021eac4657dbb576f612a8b24d8ef9e69b9bb84a0fb00ce327528a498c67187ad89a8de86622b6b1fbdc9a310768d979a8ed7c4607e996f87a6dddcaa891a585a49d12c8d0b5a149d3ffadb71dab3904268aaaed991a9114e9e33c44b929ef507b2b59b9577538b203e7328d28cc0b657771f361a442ffdf62c3d5a626386b8c10fe54e3003faf780d4d571841b5318717a7a06d50e3dac6f5bc8316de162bf758032614b71e343b5130d828f48d2ba37697e3fb4c43a7244a31c70a749c8717c03203559a6c4b29fc35e2d41bafa8482c6647d39710714c4a64a3c3ddce132f45f53bfba1e1b1325e6847d1883c8c47b72fe23b022e1dd67227291bbd35dbd1c44027f594c2f9a5a073cb5bf683ea50d05ce16c232083e84ef6e3c1931bdf2a15cc0b332fd8da6731f03e73a38c976171daed269989c6ba5a372d7132b0151a2ce0edfa30c469045417957578421242ce86795607193e5d809d34c52c0a4bbd9dc15606f35edfab28320288367c252295b9754e049c98a936794d586d8dbc4998da018d0f65ce2db7b8a562619a7e44cb439709566fea3d8e2de7391762d7f3691043a38ccda0ac364a608f7b18320eb9ae5854f9a18f1df77203a06a6367994817326ec94f95d8c876cbd171aaf6fc75a1c5a5ed2e8d2866ee06b544b2b3a341063f26e76862abba2cf41dbe75f5843f07466052b0beea45deb56dc8b39c2c8212a663cc20f6c105f9afd4b1e21c9cbe9440b7dc8a1d59d41df02fd002fd079af27eb5eee3a04548b0687892ef271183d16696acfbcd670750c43405d4ed179cec87b13e21b028d6936bd7af5f9f1793c362a4ed0f8702ec28cd71d9070a02d8d71045b75b4dbd4c9d10d4ba4529ec2097ab06289d6bda9b221203b95fa5263521dc2a18ea2f0f5376f8797ce3da3f975c6e35d3fb3874475992187f05fa98df6699d74681d65802fe45e899568416f98d37dc6f1fee2db95b51713eb05af204a8ead945f9b984f2831e7d137a2fc0c657ffd86224d10d72731f8fac9671837bf1dfc46a3c1f8d9f6ac779dd9c1077c3f6b17ce5d75e4ecb578c39fc69228f9cc319de502aeee72ba954620ace7d460de1e17d8e206063e8bb8f3f4840342311a154477b988a63395e3d6fc856bf9c32c77aee59793cccdaf643a7896b96673ca52ef4eb6bbe418d3e5c878c2749b2f45888c48dd1862a0cb2d926e451592dc74d61c2783c6fdab4e879d81da8ac893879d8d241e217aa787e3916fccef634f2bcb7411b8f27728097ab3b8e3d68e29268eeb31d0f48831da52fdfb5c3ac5eca3405a494e3ea5b7345d5e288d52ef8b32f9379413f38a502ea6df8c9d591e6fc16bce4fc22f7e78be5014240fb249db5d170304924263b87fb69df3d45b214fabbb53efa6e96c5b3be676402d083eb9eb4e1e81a638069545ebca31c194d4f80b1007f694ad6eebee00ff68fab07bce0a4bd424d456f788547f7a656c6d544376527dd1cbdc74dae59894a0b1dc7c07394248c36336dfc3837062c2e3fac9f492cd542c87f5aca4f08dac6915d77fc14971a959048ea026f2d608c33ce4a008d4be892c9f73439f076c6362a8e75989a61f0bd22f5b735191544fd09460e4cb9d640bc028e7aa0f9413054a5855f542bc30eeb3a0c6bd0ed73792f079906a21103070a3d7a23fb7e697ccc9a9320dd8419f837416ceb754b114c6f7f1df6a77c6fd97f92faba96e6179e93245e5172b080cadb6f58e9e135a694fe4d66a1decdbce8ba475bbd25016866d6e06e3cb03ae86ef2cc327ca2a10c39b6c7873359fe72ab7567ecdc9e36ee25b9a5baecbfba29e6e89b33a71d2c5afa4cbcbdf1bec6e659a0bc3db2c696be23df552c010f9d04fa90279607e93ab9d9bf357d44067d60be7c889b312394ae021d616978e1be8dba11e1f5cb2b2f4ce580c0254de03dba29356a5a96e7b5b70f7ba6fd49ee8eb1d30263b80c30767499c68dbc800a11825f8741c64debc01d7080eda01e3d84075e777fd1bec549f0966a17e739471b3ab507c8241aa6df7c5a734fb59b891c156806ed3f03c6372595aa70315952d2bcbf357aac7ead3bef49ba941bae1b6b181fa0f37c8aef2952527aadbfbe3575070818b4ba38881bddf01ec50edee34e1aa505e15bae6a2f9bcb3b6f0b3b9e0dfc594abcfbe31561ddf402bcfdc7ea8b7a0d51c7688e76dd15980108d0a4ef53ddafa80f2ec8eb91e44bf5dad3b371ce438b5e3ca77b8d82cc737c2647a1692cb34864a9a56c4b7c0f02da97482b3a5b301191cdf91f350bae3fb34770ca2b909dc4db33996cef2dc311f5c64d5873786299d00ba475d252e2b084b31ca627e63b7aaa40757cbb6158632865311e8630324570bf769d5f9e8c2f08637a122eea868b7d27691e6986b7db64df3a8a87287ce1fcd28a8c8f132dc40984906c9db7def4e6be0cc713976e6ad0545f0527bb31b7316f03bd9f4914d5a8ec2b7e4121e2828410f214a145a5e581b5dd09fce97242a7283201b7c5fde0300236d493b5f0ea8269ed5b21c9b78da2db4a152c73326d377b94938003233f7764d755867f4c53f726d0730456465e70a18675f14692a4af57bbf8112556a05f1016ae79c53eed8aa1d3b8668a678e90fe3210a2297db30684b8b2e3cb4de9e7e217e6b7c147f9ab827785327a3b2208f5f52fd0eed0832af6394f192f0d37e414099ba3a05cc6e983d71bffc595ac3d1dac7a95f373f248b9af1f8e9193fd06797e12e3a731ee661308ddc44e5890587e1c6488f751b627cdc43fe92328ea93ceda31f0e053c47d043fbb0152fa1b26b4cd366eb45c0af9a5b6c3f48133797bc7730158f540cfec4f33b30fda008f6c0f4c9192212f96bd1628b16e58d615e5ca0a06dad332d2517e575def825255335a2857ee62aa0fe3e40f76ed05343534918764bb38322651faf5e70577b732de88c996fe3ca77e628a10f57a1b3f9966576e79a691b81053d74c8a911f5356f3c7d4801b41fbae51f982a22e2024cb4abab47c53317ca6e9d5f26ff3a5730fe0cd8405c4ee7711b78bef0b5c4deeadf58fe747fc4360763ecb45e414db59261dbb872bf73cbf82a038bc77fb47e89e4b308a5389250d5999bb4ea7606dd185e9fb92f65de23788660b9902863668c909f19075444a8f1dbab6027214d4ca72b5c6aa832b2517626b5aea46097c05b6e5581321f408f09a3fa11068639b8aa380f86559b7cb28f631fe1d8c0ce6249b64e6e93e7d8e49f7e66e91125631b2504f4596f2f809122dc684365eda7af113ecb508014228bbf16dcc212a80995d535a5c5457c1bb8cc81227c175862b7d41602a296c0578bff89a04461523ab16feb109c8f879d9e091ce3e49c36e479a42ee6675cb6de84b2d1eb205bd1c50125a5780a19e40181441deaf6334015d9a78ea4c923e2e885e5b57abea0f4e914fc7cd555e70f5907d2b8b0963e470ace7039f7956d2e1bdadf48970a3087df590fbc410fa58cd5fa918d42206fd4aa455ca186f350192db828502ef8641db5c95eba263201386d324d5094bd8345ac4b4274a685f90d1c2c4e2a4d888078f309a20a5746c8749592f41a5e5248915d64478972f0ed615c92d9e64f80d84c31f303847c18d3887e69ae8268aed88c267fa72bede9342c52ad0f4cb8483b7ceaf2aa79f51af893a115eff4688a90e7f8e042a4e6bc8a1847a44b3063df83dc5cc16100e7ffee31b2093863dcd01c8bd191c46e43abaf2a5dbe282ad7c02b53aa0dede9272a3591d865f7f037266938d2349367f84e1c6ac7881f8906e473443a83454e7176f3c483319b21bf6a33ae5b089f003186d07afbcbe845d080e7a40ba7c421dfea59fea1e7f8f960fce1cc81999e763429b39ea27a506ee49be88eeda33e9d581afef05596b7cee0ee96ecce9f725a53191d8c1548596612bc63a1db7f73e873ad556b7648d647fea73ef387b1a4416f222bd753b8f17092d97474ab37f5c3dad17bc3b1be721ffb991628e997996d203da0aad61167b12b0c63f62451ec3b03ea2f8162c6a9bdfedff69dad8efc39e93f3837b95bad13cac8ae91fb4b6310e9dee8e222973c21de2498100ecb0a03fd995274ea412c5906ecd042177ebf9ce2e612566f732108b2679e0f9fdf63aaeb2045cf1982fd33f901eadc9f03154abc9cd0bcfda3eea8461304e6a292a5295ffb922d79b30835734aa984db8ed79e9958e998776cfb7110029f6901dd8dcf918f6ba6cf4536f1395e791bdc42ec684a24a3773a40a3aaede3ad0763f7484b3a9ebd336be2a41b76b75b8bb83f746916191fdb3b30ef3fd5416503cef6b7db2f9346e7890df0afe95b02f38711e656ba67080f269ef5585ee18780e0cfd0eca72d6481e0e8e2978f5eec4161ba45994d9870ef425c7f41cd5fdceae42f5fc0ee1cf675765518d1efef6360decd9c64992b9daa88e783870538303506ae53c38943b0a9ae05ffa167b6cc7c79b1abf7fbce9620ff592f18d0ade1e772a8697a9e9afd649299b53bf98b43e441c96484313fde6231191c46df0c508d5dc76b48ea5dee9530ffcb28e87dc41df631c748ef74013a752522847caa3a571c921146ba076ed83790425733d7b94921ee9351b4d9cfc117b23ae9cd7fef4deebf26cbdf9f2506a21f89f7ed3c0527d55db176200c7c1dd898d5017b0e71133a1519499925f71013a77744e27d4ed85704970ed10c3721d06ded3ccd70ded1f337610bc9fb64308a506a57f5bbcfa5490de8427d593b0fefdf9b1428035cd8490c30dee8ebddd6ce27b2926471a4df35880251098885e17f5fdc1a517aa6d16ad6ea85bbd90c77cfde3cf4294c4eed5e67711e10e600c9bba1cc175941f292a93facc4c81413ac4b172ab3654b46025e1e28d70f6d97284f95e9bc884a71351bdb88036d74d1e663f337d736b0705ba96596e4f2b030db639a4bb9d84bdf6c6e3e0f9fda1ed035ec72fb9359eada31e2f911481e4be92f62de8131d2df82db603a22eb9cfda684750ed6255a123f3f580c9d6c8c30bb116a6616f31b20bba870336aeb8c7108608ed73d6d701fa4fb2d7976d13bf9da4879fa408182cd6292aa6b934cc3a7d3815833f0d8bd400a0329611f921f3d04bf956e5a40560ef9157ba4bc764c5b0d893341be6d03a3b132186bc1da68bf8b32b990af33425187842a8b75f14de4416f5d2643c541aa7f2129503a9fbbca832d93f0ed7b6a40befc05531ec27fcd916683836a540c9a6b3b2b8317ca01bde852b28c3aeb5c2921ddd3f096314a9329773d2e30318ab0b7260b2809ec945dbc27532d72f5ffd7b6de2326d2b7a9b1c97c8f802e0b5ad31b5767e809e15b8bc5a5401a4550101b901e056a414f0f33950fc849bb1920bc43e3965920dbf653b23559efa7d6e15ff8a3964b9ff5fc992a4b0733f134ce84926a30ff3377a1afab683a9c1069bb36c886e48303a4f2c5efa26a40a3186997a6cf0708cce266a52ef227b7929dd3dbbab0e520118371aa95ab32b067811ccd81c18a612c0021e99af9672a76b5b963829fa68b73d9a1124d1a234ad3cd5ae5178eaaf330e2252d35cf38ae049acc683883a2c8dffeae55b9b1774778b6e65f8a3828221cf4857ec84c1b7f345fbe904aa42a4819aa1fe36e4bcfe1d88795522635741825da7c6feea168110681d34e99f965244bb25a75f1c46ce283757622638e9ff6a190e377bb306fea73f460d75bc9d6561d4cfe4d5227ee477fb88af448eb5381663a27883b99a38eb27f8f38e6bb029445ed8dc5f2c12da52f3dad82bbf86fbe2547bbca28b79ec9f8129dfa510efc7a32cbf9f26f4d710ca5335c08f922b68d135a277a16725d54d20debeccd674eb5abbaa7597c0b6b56945c00fa916bc549ff4a75330a69c2d32e67fbfd4b833c44aefb0f3fbe299b73cdf71c23453f1860639567203b23c6ee7e6e59148b5d5ee23c3d9e94181723e354d4a2f45ba103f6e33eacdbf69ba2ac21e6663aba2b4aa2b7d33011d8bafb33a73ead54b1e88e9ba76a2d340dd3ce7e6aae18637193b5ab301ad3f3ccaba679c007b20d50e8a62b3c97c48c5ebc8921913d5f834c7fc57414f965e7994e4aec0e8ba36a71274c73b10a9dc4f617dcd49488d2a3d46010c0e6ed593f66fab13318722b6b43e019c496067d75acaae62053d4b974eae8f246c5aca8802b586b045001fab5c23f82621db6fa9f23fcf421de85ec990743a909f63c46a60706d528010379c6b05156233f6ef8a8788ad22d88a612a71d02ab1acf908f5a0cddf898ba5244c4c46b8acfe65d4087b837b8f168a136fde19e05bf9f1c1042a1d718cd613deb9ecdf516946a9299aa6907bcf952c7f549f51eb7c1314978efffabb56885d1f4a29b3efb58bbc8baaf9a64d95d8ae94adc244e140f310b8604471d4ab31401b922d5d61affa2f2eb7f712fbc83451d02a586fbe7820dbd0d8ec1f1b57069d32b52943fc34678669037ef9dcae39beecc5ad7a846da1af4f82ba8e04207298f56f0854cfd12ae7f50723d89a658aa37b01435c21c6b3fe7bdc6daee5bc2f335312ba9d6726b94bc29cab00ba8a50d8db782d8a179b450c059b0d990d54fd40defd90d9cca39b98ef40b5681561b4e3671118e91584c38448284a723f2683cbecfc89f8758549409fde4d59793c6129351f388907bfd0c3a638b718bc636b6873bca87190af44755df43085547cec11a69dbcc4e1512cee4d89c1b217f1cdcc3d1a44b6cf3afd620d355a6ab55f951e0b236b33aeda40e99b52cd5dc4c0c6c6c5c54d56a6b1117b35f32b7c76dee800767974e392b5637657aad57a1222c9adfd21247fec3a8f339d6f5a8dc05913ae18d263b2c259a8536b6a49353bd30bedd8fb1161d3c85d20b8d8c4b5a1de61cfce2a30fa9550c9fcbc5c54b06ae011b62e1783b6b8779151d927f5c131b0316be0a9255f6bed57407f76ab852a1d18fd47ba0e3bf446a23fc6fe2aa2f62d32e21935565ca24e4ae6aae6bdd62d656abd0bb0e1464330a537073c7243aa71b4c3d58fa28435e550053247b91e79ef0f021a4eb7e46e7f2f3e1558ec08cd31be82a4f15838c51b347dc7dda2197a3fd6be8b22dc7b22395ed3f13f43e0657eee86a1af6fc4568814ac5a58ae77813b855e9b517dbfe4d063fc18518e58b5e731a47739e0bca9332f434ba61615ba88b2873d7898bf8a4ae2c930acf4966f1f80648ad3e1fe89b6496cf505204909719abc9eb70434bd1aadfd8ce62d18fbb8da4b52e10a5caf93d99b59a5094a456e82a5fece1d88be3bbfe7775421a91d0e9359d536832db580f6c122693453102ecae6e1a36c9f8a9842bcac3584a727593b517e7a0b6943ecad31ee673587e721d62b4ce30007cb28f3c64a3b3322168e6455aad8e7e5f3f00d473d325f9619cc8c656b069d8283e0840cff80f039d7bce1f1720eb97605cdb1239cb41c0f9c05f214b0e9b425e2a5875c53ef4797d8ac931a35644169de30f0fb6df82baecdeb82bc04b9313ed5983df067a3ce4ad2db1ab94352cdf3de9d3a08caecf0ac120c86d4a4060454a0c1ba87180e7796d3a2171ce5a81356a590a78ab2a0d22beceb2cdba9d9f0ae506c5bb7626e15df9b772f716090e6adbc8beab25e9a855432d1613fda0da0f30f36e84c1bec34535fbed08fbffdbeb0fd9e84431c6fc523ea4f780d5dd6c3dbd6a80a592816c50607d084d2c00e6d5af2362d88fc2bff93b27530857a3e9c03316318250d4dc0702a98137d3a2f7c6884861f042c1fc243723f394fe6521f8333aa76470586d35cec6056c4d1ccf348d2fce86c0ad9c8f0b54984ee2b9a71f75e751c4e7ca7e068e3549526ddd46c7dae430709bfc073cc4d22fefadaef478a0672ddece02bbe3daac4114f27972e992b4f2627c0558b54938f25f1ec6b6706abf1116d0f321fe5f959d22701d6a8e5909adf6103930e5f31d1fa7517e0aec3b048b5cd943192927b50bdd5e0c682f9c20812d2805dade8ee5304adeebc8b9791ed4abcccc4e1ef9120ed366d74c5e8fe61a001ab533e72acae98918ab23fd2d9cead496c7b5afa399014f5c21f60c45353a871f455d42c8df40c375bec61f168ecae9ccb4a629e1de6da39be25ab92049478d5dc140943b8144c659152858cd9a9ab4fda4f4a5632d1598901827ff622e9b46d6f80378a8ab75f94e8a6c3190d278317c6135a705e0ccaae0fba8e0155a29d463f7881c4259cfce2cc6a009afa0f31b7605243cb09848bd8924d3346a1b50ffc58b30bd49f7a2b2937cc72d01114ab6aa66192769efdc550fd87b686be52e5ed7247dafcaee65a9a9bd1b935c6c49d7d4d2a439f3455dc67d23fbe13b6d093474f6add4a80a14d05fe8c60716e894c42fa4ae642cec039ecbe0c42553eb207d3ff98094d76eecbf16cdc38092296704306dedfa5b497a560941b043c466077dd4d4c214d44fb4fa3ec719c339606369bf7c01e342c0c4690ec9c6f32e92168471a0f8ba84f213de4d96cea6d3d379dee53a9e39072b4ad40b5f3918746dce32bcc787c4554dc737486e8f272ffa1d1b7ebd3802d74637afb5828cb8597f6dc51e7ab92160261ec8d5324811f42b95ac356c2ca8bd6078381d63933be70952b9a5ad7b0c8b562f4fe94eb87353e7baa50540d9183cd18086018d86639f6c3f262bf4e57853ee759b0e242e131ca598bd197100bb494947c2d0e9da87165f02ee85c2dc65ea1441750a9b2fd3ee578970225dca993296b033cfffdee425bc2a5847e7d26ed06225fbf961b951614a5546a2419e6948a219e3fd945be5baa02ffbf776d348201a1e6b2ebb6830f9e1e92be167a983ce2a6d6b94e974b105532b1d6b68f5cd0d03fcff466dfbe8cba75bb46fd67bd4d606b22ef9634176336d75a261e3687ed62cf563a3ada16fab9bbc0211c99563023e7469115bd365c18ba04a764cc39f4aa9b27a2432f85fecb9f2f56edf74e832f448556d61fc45b276150775096714c0e1abf46f1251743d2caa41ade0096d2374e509d910575499447babb96606618dee96674e5602965df8e2eb52393863b90c4bda923c9ad20bdb73f09a4d6841b1a030d35902f103d94abb58a3d0030f817d0257748ebbaf10c500d3c5b0ca59d11cc3965ce077b6eb16977c5f3700d6a449153994de6c4f986c453c4655aea1614375e2fb38c4b5b587afff182837d62fbdcf8454006245f6c6a47a8c713212913014f48e13ebfd086d40480eb6ea43493d5fa1d26f7f282edc0913981b5e1c63df5f12d9f7fdd3f186253890c489e5cbfcf18ccaaea417ed230e01d5967782c6c89b3f56a86cf8956b7bb2df03c6cb9ec5b364275652b98e606f0ba25fafe436707d344de00b4d93128d0300295b09974882a5fdd739011a9057814d718d0bb41de28876a2b7b69f06e8c52b9045fbc8330b95ee80cdb7bf0aef5306d97a23d2c2825761e28e695b66ce946af3160621a9b9522342278533db041d2e4800d58bff4a6ab55599341e3343c16f00ced29208a42a4f313644fc94bb764c5a82dbf6336af90f9fc6a1375bdd49d9b21926cab6639cec3bfa8b63a52e4da8b97d41f36d738e1ec56bbf4c83b4b57df58e1225218af5ea71973cb040691030a6ec88dc2b4161faeec11b39ea80709daa20b946cb2b965f73eea8a39c85e0b1c06f7d6ae31fc98514ff18a99219166842042362a6a57d170398722a833928a18ecf3791210fd38d46022a6baa5c974ded47410984f7c73b36d7354182e365fd7405c1fa5c0af57d9d0f217587ae88db554113ecaa6d7bd280410eda9244cc5cbff56efa9be89e9333d1afcdea272ebca4e1d7047f9a7d863c335dc13fdb5c34ac9dc4aeee8e53cf8d86b3b7087ecd8acee38cc1e53f0f71d6b1251c152d61b9d398f066f4c7ff33015664fe2e9b4121b9faf3962c5e7a33d580f1bbffba496ca65997184db8fc70dd1ae6d0913529c408a92b6b79422723a6183753205f025ecc817bab87dfa4c22f86fa0b42c0d29f629c88e744dc1ccfb7a9489c9effaf86a8eb1509fb4d95bc6cc72ec5f85de6f2c8bbe89d265fbf59dbbe4bb49e624be6ac7629e0a34eac7252abd8cffcb984e6e42671a607e55785a820d61fa1f0eaf23eaa962572a33d1a6e13544e3c4f444baf88c18385a8ae0f3852b03816a5b892c1249188dfd1f450708bb8d645fc8861249f8a5fc7ced6788d6fa63f35b9f1afe0a70d3a77b423489a201136b063517c73ebdaae15eebc79493e1977c9f1f6a9e143fa882d9be77fd53d856cb652846a7898d94385a737cc9a2324feded21e1384d77fa110a752edb17856da4472fbb11fd620ae89cabad4dfd00ddf2445d0e2b2c84d57ecd0449901ca52bed5ec19089d44e7ca90fbc27d47d0b03ab35846f566f5c5f5381ed6ea10dba3745ac17ae157617012048cf64612606ca699d647189eb0ac279e5215e6d16d7f6d2f545b21cf6fa9564137d768317007cc502348f128e5249bc684b7b64b10a217f342587bbdf99ef3c3bc61719b84dcaf5eb0c2d6a827d376e17a36dd5abc530b54b6d0125b11495ef22400638eeed176070338f8279a947fc7cedbb842cef9e203e5be24173057ad51f420ddc65f0aa1a6158f63dc90956b0275c73598c4abcfc207dd700d8bda1d302612b7a4f70c0e861db93a334882ae70719724ab155f8b348acff01cd32fe92f03528d0cd505116deec5df0e381f76891ff6ba3b2c86a5d41f37baa34a5d9e922691d4c21389961cce3dc7563af59cbe3a81e9a049a7c6f2c1f9a5430ccf40fe844b8be0c42d8c3fd888e246ddbeaf9249472a72ff5bce29b883a5a2255ebfe0ab660d004d8910eeb891b99f55ad15cc68c1293335106de2c8d81112dd1024bdd738a632eb444b90d95c9a3e3283d4c52c50750826b15ce8b454e76216f4d2f54bd45ea78e2379926f47525b1a91594e912d94de2d0bba1c67c147bdcae7ed25dda723be1a49b17da8e5576560e15376a5f982328470a8e8bbfcb4d5c56be3c3ebf5d893b8e7a0bda0336187c6529c672636afd71d7441c93f2c4939d408331e182e01b9a344b194396106780178882d6d13ffa12a4ebd8aba8bdf37a46e8da15160fdf7d8e6859b5efadff4127a236a150cc5192b072e66068c67f648ca0b448095089fa2a5d0f4152c84c662829e10c3018f3ff12de9d32ac2bd0d795cd09744990bea4101ffe8ee647bb84cdb5ace20286984d859c165e61b8d30e980b07fe19c6ee4294f1543b52aab5f394975b399f3161c86f6d57eef432bcddbfb5eab42f3b63490c8beda9f73f8747e486d4c130027af91d551eb99e93f99f2b52472a14b5faa82a09e1d4d1a22af7f3b1a4ffbad572337f7538668438ae0c549281e2515ebc582e6fa74e274113f119fef0f52ab92228a6248a6373a05119eea165767ce92081f85ed8c07e1ab5bf357aa8648e1caf734cff89a48fd859fb1994c728ccff944df735d518d2dcf6b98fad1249b32a86cc32166ef84e7b8ee9a8d793fa698487e8894954e72bba3a0b45065ecd2a92a0796d1bc3a4705d35fe2125eeb390851268cb542e2042a04cbe2eb22cf4b5894e8cd8356bd2f3ddcfde15823de5be91477897e639cd9a9db0e794fac37d481d40f73500f1f9bfc6fda4c43fcc0d50f291106dadd5658852c097861ac3eeddc20f222b367c9c1ba0c629cb4dad945c025e431d2be64924934017d82f7631f76c99b7b2789b8321cb0d63b9e652ea30d7f1512838a31f8269c36ff67b87a8e4ce09f9ec1a0c3ccdc2041c5e88f1c27ce6d6e4b5391e1098bdaacd7ac7b0ba7e7960887bc081067cdf015becb0fe4b2e54c6b04a106f706b3dafb74048963dadbd6a81bb0e661866e090077cf39fbbf65c7e9f8d3869ebdcb017fd2bdfc0d17c95ac3205cf0afd3866a85d7f824b281fb936e02246de1724233f94b0ffddf6f30d406a988da0b3ad9d2fbafe57511130e9ae4bac357f2895b69269d5be600136b4ea191bbbd5db78d6386499ee08160cad29e0b8403e5115cd9c577fe37898d030a15005da2659fffcc11e3c346fcfdf3b2ab3574bcb2951d6266cece3aeae7ddee2594a48f809f9cb02c4ed102572210c3f22b1bbb67a97815cf92bc0979124e05d202482dbb5e341845ea737f6aa9f9f5774bf1532f80269fe8a445a3b32efef46faf518088bb1590d0441071cd7ede41d23448b1ac0f38fe4f00cdf2dc94263ccae8d04c97fb09ff08d16fa2c5db8735251953b3934bef8b01a4b6d9f0d2c0e51fe7a5e2a360a201f95f502a7298c9423c510762c99dc665cdf0852802df471a8379f27950382d1fbf48e2923e3661482dcc70e83a5d6b48ad1f03580d7062e8c067efa963a41162ee8c52d5563ed121a0b4fcb97b9cd02fcf88d9b11979ae899e967ee5f34d1c1a363274f27bb25a71156fbd39b91e6d7e5d681e3e5c8da6b1a1e3d2f6ad3758f7267cacf19fffb338c259e040e90f4a208774cc74bdfb5d02fd5cd0edfe1a57ea59cb5d85fef93374cbc7d2f0699cbe09c0ec4fe6cb763cd548717829d1f2ae4270133ec9d2d72ea0caa5e690c5eec46060751aaba13f2d8e9656356f6e4542b174bc42ca33ea34023fef9e552170e2101b9db7f944ebc861cc89187c322be7714d6fabe6cebc6d28f3492bfc5cd78284110736ac736a303745d927f2270bf388e122b659eb9759ef06395eeef6067423983d87021a45cf590627b62bed318080a31922fa361b4ae13696bde526c509650176b5048669b1f1f52e36eaf5bd0afadf5a362a218f9273164dced54aa1288679f80a9b9e87a1710c30a6997d7c35aecbe8a80c35f3ec5747e0dc5e5d45bb5c4ade07c24f51adee903eeceb9dd5cabaef57530bbb819fb63c25de48062f36d05ec349431ec431d07444877a1cb3826c4461b2723f9fd9401a2deacace1750c1689a306d1c59c461f7aeb8a0ca3b070d7ac8bc258b9bd995ae08c220cfd049eda6844358afc9df42f3804882a0b28704386f8318c5ddc3aae8336721ea880de696c0b4b0d6691371a50fde419cd9d6dde77631801b4314a1315e5fc59a953d478bcaa325dbefe937a6b87374f6c9b6e258dc9385fdd3dcf526e26d3dff3b405b4717165f40447890f0657daf8b8ffe36584f52e7a29c202f44543909302e0fa228ef7bbadabc29d15573078ede768eeb30095657dc409a60934fd36b4410dbcd4fee2289ff1b15a189cb767ccee5c11b344fc9d9d8dbe32cc516520cbeff937bc802121081b1ff61364f9a84cb596d66ff00d95780d2624e3212be85a5f1129f31e90d7aba71f893e3acff9fc0a696fabbbe637e8a892b64d816ba30427777f4692fb3e6d1d9f739e2311a9139680f2c5a6b8d734e10ac3fafda43109d57e81a7523dc0462aa38bce532fb883be0a28d0d254bc273458c4b973e304295bfbe9f7dcec6bcf490ae0aafe3539b8f7209387bebd6eea49a9912462ae2991c8e230ef2b983983e3acdefc429832b1b3be4c5148b912fd00bf1d3eb75be1ade28512f0aca9bc36b7d820507e33216fd71b0b61e1c3139b4552949627bc2c91f93f9631043944a7f4f55707184d45f40500ef9b54137ceae968824384f98f271cee1c2374cba6ef60b62d211bc623096bad28940458031907ff3a40260e9713866e67fb5755bb78c0380e92be1f20029bd140f6eda6d4da3865a90e189f16c9b99bd38bf327156bcf070b0d772260bd622750f67a03434646d5e5c71c8baeacdebf2f9316b244a11898aec372fd9d8b5b376b1a9061c70561f8479987b5e8f5405b0f28b015bf6e98c66c361cffac1615447f1a3240dac06b361916f3d054d4a933a58d211823b119cc54807dcca1f21c43157a1eac40ded0c741e0a5436f8f795a265060779f2724aae414ac9e4acd87b32b8fd4f1a3aeb4e2a2b95da29589847d6607927635c67b605eb954141511884adf91f7bddc1f9311d17bc3b37adc43ae17c54ff801d51e9e7c6c11e293ff94408b444fde74c0403b27aa3fe00cdeb521d2eb6e628aade2d53bfd8ec197cb3bf297c60ed4aae99f906f35a46e8659e0f6ecfa1b4719cd7e585e9b0092a162b96407bcb2017a1750e4d9afed63fc630ac2a66ce6f00450bd24cf04b28b808ac08b5c5d9e1a2c41258e49d43daadefc148254a26c09a54a8c4b5601927a75089a9186a4243b8925f545767ba13b3179b393b74c57aa01e995eefd0bfe95139fda3a4687bdfe901a545021a7a7b09e40a4e84fd69d04392332a7244073b00643048394df9da4f2bf98e10c0cb842d5ea95b15456cd3f51c2595577a1aea19178b3808e60bb6e5f1014a28c697e0db5321ea1eb6289d4685ca1424b585731952a5dfb8742433357a7c2e46016893e81bd3ecfabe9a7085aef9007bbb1068799bb2d7d1232bf66e7e22f215f584c32c511cc3f204a6fbefc58b4aed94102791c87823cf0e8fadf9fcd59954f147863d27c076826662632843ef1448735bfde12c75abd58f59f2028d7d6cd87e4e3d74e5f3b6bb6df9279ef7a0be2a0bb53bb99ed639bd694870a686d37e33f7319a6ffd2d9cdd9130b95a91dc83899f3312634d022e8319e6c9651baa25f001723d1077d949ff556d0906feed3ecd22c2712b9bff294845f56262c9ac641aa887d68ab8ed0dec1a253fd9248b7d77040d9f96f32d206ce82c7066771c67355446b71757ffe3d765d9f168ccd0c41e5287d70507adda6b431238ace333619310ef5b1e19296fbd82bd454bef6ccc422fa089fa57e28bad0d8066ecfc8d94f5712b99fba3e559b4a04747dc7a1af8200fa82faef0c54efa41062ef778ef3fd0879d2b075fcb28963cab21d1cee87f2a101b5215fcc9a597c5e9847b48cb75c76c005e791fbc86cee912c81cc5f74fc3ef9afdee07cbb03c5bf1bc9ba3336c1117b5ceafa583489e5696fe53ecc59c00e7b45ebb2e314d39bd576e7f7d0dfc56c00923f0365091bf96144750cf57be1cb3585f8c7a72fec199236b95a4b2aff00e579669099ab322ff7684cab7f63f5c037b6b423efc28b91f9509924334792062f50a55687fc3cb29c60211ad648b0cde6750e2879315dbd6d63ede0cd07d6ef12415d7f36b9883a36245d6e4e3910396c3de44d79825ee5a7162a5bb5422aaee51f47c717722983b553a6d6fa4b8ae6a3551b915c947adc3669d7599221f316d271257e1faa131ac5105abde233be431c377f8ab2f9880aef02b4599400d70aa34be13773bf4f6d80b19c275da4e7c52e017abb2401055c0303752d9a15c4ec99af923f03dfb17c3a2ae1cae49f0f019ba6e0e44e3405a5d4a942583e6287911f2ac8b4daf0e54677f1ea68046b641266b5d96dacff6548abcf32e8057b668da425bf189ee392e31c571e98fcf35e72886e2ec39a2fab935ef73bd3bbc96073e45925d34781b8e121b0b8cac7f4263b7b2db3e853ee06d092aa1d10c83b103a8d84862552d76b1190df648bee0ccc24c9dafd4718494aa3a32ed9589c5d4a93b0dc55fc52c68676f503d4a03b4aca31530ce7e240bf62ef0169b0052066a35e742cac8eb78f8b8e1f45496dbabeb2c042287273789c994afc916face36984908d9bf0faa6c35d66f2330fbb93aae4b5044f94c197e469de3615b437e5303ce5e1919708c204a3b5f969833306ba41133d4c879186ec609b211d52bbe02bcfb485a81f91903356ff8a712c2a59bc66955d7de55edc127a841b7c40a31baeeab26554e022579d350a2b87ed4dce3a1ed5b58ae959462fd35e0a46006fed89888b08b1366f1712c255534f60eb4e68e2b8a6a83a6016d94c23f4f263e7533f9c9f0e47ae91ebcaadddf5dad75e18e10b896bce35e77ca89f5688348724ca47783b92bda6f5897fde9e5c49c8a192e8cc588478f8a4c579b2f0e3285976b9bd78ce093e1e91843ef15f0e24547ac9a7d9ccd0b270ca6db386d13c1521fe0de50bee78e6865a4cfbbf9fe6f1ca9ded397823b535dc003da48b4038b2d88e10b53dee66e0007ba9773e2dc74c1abf17b4648605d937ff1cca758f3a08cf25a5d68e1d906478291dc9468c3440d6d5ce88dec3abc840b0397d2eb975d9d079fb3ed85d55621f45a57f054ec4949c9d05dd78a120138316f254de8d6347f2268ca1a5054e2b59c9942ed978c930e86195a8a2e0552c42c4c7f4c4c2a493ccc4b1a5bf09fdb2c42bf079edcabcf6e1caa17c51326756f8fdb4b6053ffad69acdc0df28edd2bae0046f16eb2ea1ea590fcc9700f35a0d22b6bc6dbed31ecaf22a18e0c50462c4168e4c14e2c95b0517365c0aa7150c566b71fa914af5f4ae0040eeeb230c0ada415deecb453667e0ab6ae9df7421f21438caccda7e450b51ed56d8e8c9e7ecd8f984328e5d72e0b27015220cfe9c39521e93d18552aff6fa9dcdb6e8d67900a92de3157cdd73f84e192d6fb9ccde6503f16c04dc2049afb0b6617ff3c9008b6fe5d23ec28fd4b69d17cd61064df493f4e281bf4f7093e767435071758a40551bae16a321fdee5c8a66e3923ef5b84763eb6e0a40bf0dd520bb6cee24d5a70077cf8bb176ed0c08272ce30c5364d4b5222fc40ed479d259d1e3eafe828a778e2bc1c61a61a8dc5c6acc15fd4dc0ba0991e0e745246e0748b0b7fecb3cf5add945ae61bc006cedd8d84cffd3841638228132671ace81bb7da37768de05022a19d3dade7dd2c39cbe61d0acee078cb3206bb9f4b995876efac548f83838fa21c1d0bde5521f17ac7a4f760ce9636c742780bce456cdabc738a9f390641818c1e590a16464415c32d360f9e80ccdfceb21f7261c057e70e1c4b5d387686c7355118e10a0ce11ac92464c4265375fb7b13310dc8e5bb426ef4910c6c8b45da8737271197f43d79683da9894cd55ee710612637ccc75365f34cd9d3ef5ba311056e0eab44dc143c91ea347d32a0b5fbe1466fa5491367bf8ec0bc058fa7c5df86f9146388cb5427e9249081325b12a1d2083fe7276c6c9dd48d710a3d7c68c6107f7c670e358b3e0946e7b7dfdfd5e3d562d5c982eb97b945c132645d8fb252bd11c76072243a6147a7e9c72dc34a6805393dc0879922e34277f98d239d96298a54223e3fba19d34882523737e8622124f70d61d5b8fbf23380c739466b9d4b151f3f531cfc46d30bff6e7fecd825d8b4fb1df5e50e16c001b8ba883a7f4a926bb0863f83dca2c434351c640a97673a6fe9fff8a58805920ff2203a003da16e72f25bc882c84a09190a88697edc263e83d05eaf05162cc152c2da9fa4a4789118dea418e3f033fb5863526313a1e73e7a1774a0f9a27d4d53d03744ba2df3598a7ad8a95bbfa5fd8f19df64e9be622160a96a044f9ca7f774caa6d57a4e35c695ffadb4c605838b6d32319d23bc55e5221cbedcd2b8a6fa4910b4493d27e183d780e65faba2732ea018551b9ef5ff0f37a5e80e6cab7c2523167fd865f571faccce8016010ef224a224134cc805af7776f566ec42a29179aa53d8d9156ba63e55c007342b30dc6134b547d478ca644d76358309ea160edf5b7811a1e6754f45f6a1f738b6a9e5e61f7ddc0af9b9492d26b3655adcf6f49fd37a1f4019362739e808c3b96f12c980ab7024b50cdae3f6768b8ef6b014f70319dc293133ede961d8de30eafcec67ff7f443f6c2169952cf27e27c378fda7e6f948ad1eba4f60d90c62d3125e841a7dfd3eca0a0bc904f8f0c7fbe008457d5fe4faeca77e0d8763a41ad5e689f606f083266bf37c93d6b1c56bdd475f828e6ebbafb32f166c10591a1abb12c715a1ad29ccaf907c9a9a6f03acd62a68ce7be273106dc58bfcc13fc1b2de810129337047fc707fa1a53fcfb224fb1fbe0eb90d3397ba86879ecf550456cadf7033fc03347b507c1e914eb8c4e9f37a4c4fb19a7d6b7812f2808a326463af9ea5528c07d705a4b589ccb7a5921c5288d06217df672b76d644a43b7dd4d8b1d97534975bf2fc4cfee444f906124c4c38f442161af155df97a592d30eb5dd3c1286a6277de2fb9aaae210e3061072e71413eb0c0c30b101ca7ff5bbb58eb842be40ac8faad1b5193d48db78c56f52c1e76b25f084ff801ee3dd7889a69ac29d49241f42af4b56854c29127f8392524cd90a47f9a45f2995f2bc61a9c18c1edd42a24b57aed1581ee3f105a65a8a2e3cbabb57f3040034e5bd7de931f9a44fd4937e48969792bcf792281c1561ff6df1f047b0bb0697fd52ff47b4b8cf0409733ea71f5f51a16c66e09dbddb10170a49f1606f2989b18b804b11687e289e380add497ad32541a2186fb60b10702dd3e7d9e32c28ce2fb75a08aa2cd7ca10b0fc38f0e87e2337faadbeeaa3f3e43b6ddcb5b093815d72aa57144d978bbb845db74662cdb2b23121086682a2ed838dc5850d56ddfa04cbb795e6351804c688c870b049c264bbc9a8e9914a74e68f6a08e5b1cd98526e631dc423fd18236c080ce349d07ba629b9e7c7a1fadfe7933981c124be1fb350b702ad46e548bd29a643d403b738ea3a84e44a72cd418d9570b5ce84fc8010490ea03a2f1e0e29bc32ab4dd77ad88b120b15b603e8aaa8a322c50adb638f109df3ccb4c0ee7aef2073f5028597038ecc0ccd158cd7124ae619a868270c6bcec8e16a2626559f5b8d0afdae2bce166e93d3fe4082caae672e7817b825e61b5f7ecd35162fa4b109e7dafc1370e1e1c8b22037d164833552f02fb1f5b251d63a4e79976e12e1ed78c55caf7486f838060dbf81d0109566fe6e4981b15744cd7a312842434ee40428b317642b9c5d77e620a24585304edc37b8a7829807ff35715a5f3b2f60a61a6358dd0966b644ccd597adbd41b20100b93426022115138b65c20b05362b5557f1fef08c217323bab859a2fc64261f3728e416481ac3e8ab944a4191bb9f8b9585ba3abc7861abf744f4dd6401a6ab4159945e86a1ba2b7f44644f8579909a6d1e223a00f6d958c70575367d2c08ac8a5b1b30ce1dd3e96ac9468a398a135f94b86f4595c4847598b48771a30d74a25c1a98d41bf68cf3dac273aab04fcbf992c51748f43bb8332772ed33550e0e570f8dc1d4152a0d5ac2eebbbb51a5d317760979b312c448c59febb2fd308be1fe60ff277121abe753475937d14348cda7722d1b0dcd09defc7b8a7e1ec4ea7860c166fe556c9195c1d73ab6d17ffb07695631970705c56954eaa96c52b2f87be3506e6736a380d559d0edc266c49f51aa767d2ed402398916cb287da262c051d3340a1a942216be455a881c4b25687b7d9b4f22962dcbe83b97a63f7de8819d37dcf15a8ae99cf815cba2e3f73ad95968db6977b11cedde3d1d3d7383c7cbb59076b7987d1ad075fa2caf8f84745181973800b0533d5b94c7440ec95eaeac7d2ba3966ce707630eee5d06ab16b91d9809d1529e76aae08944e459c1e85f2def517b5fb0f0fe656e7dabfac6176b537d4dcab225617c66729bfbe92c3b62a5154e0fe0fc3f5e534f78f94c5026e6593b4d61eadfec7d3b18675e69a921dea3c63eb630852a9707ae7f1b136b24ba974fe3b62205f03adb1b5169649e64e37db531dfc340d4d2f9f548fa325024e9fccbb34f59c5d03d092ce4a80c8b02ca5de5fae4e02070f774ab1ae7cc637bca0d4a6f78eb1ed15cdca8c8f2895300c7bf5867646d64d6ad82cbcf2d242661fa5822ea0f73177b361c36556ae7ab6522e9f3f692d049ddfa6c014a924b7e166f5196d8140d27311248e800b56c15052207d0b241644b7b1ecd123c372a2ae1d22f6f081f7fc32ebc42735fce98cd3a9506886b606d9e658c22425806749b49ff74bd647b58ce3647018696f57edc2cfb2889c81c068230a15ed8a628ce487deb0fcbb5de295c575fdb525fe8670a024b03b755237dab7e9d29b266d09d94aa3b14cac25909ad56fccd46dc587d2d7ff54d72c225a263156fe41b5c578cb9b0ac886d738b5dd79cc71845dc9028e4f5ebac92b10ff640cd09a9e3111f8d543c14aaffb50c8d810fe7971a2153df1a6e92cd051e26a5be0144fce5b7f60c34f08233bd88d8562a00b0627a6fc44297cdc3c0d2b2da3be7371f7f03edc83abd016811b3d1bb2c49a3ded953cf2740280183ba61664c0da3690d8d63deee5d144442bb7e6cb38af1db14ea98b27cd92d4c29ed3461c1b15797b8334772cc957288443a1539de2f9882dd78b59865a46bb0456aebb38fcb79869464173b2fab5380196d7ebdb0065e3f5d200b7920bed3f2aaa91245ff29f8a700e4118bbc32d2c49722640dd515a9646dd8a97fa99cbf67d5ebafcd9a076db138ff3e8114780cd74e6f5996c1a2beaf3939cb3407e71fd08b0fb871c00968c997055675a17db3abcdb80e5cd9951450eb56d52ccb5a6f1d085c50668ee072b931aeda63bc05c9c88d0c6e390f876b260471cdf7bf0f2e8a6a8d47c372e253bd3341eb4c159e2e160ac8e697182c9ddbd9d83d5e53ee643cba44f7b152cabd60faefba164c5b308bac710946be82a5b10b19410a207095fb4142c922f61264b4937b18dd822bc328ba3323aaaf810cf9ff05b1cea75d96aeb030379d0e58230e2b3f04f4475c78a7ffaa0c7912534d2f1fffe22ec5be3d42e2450438c38ec4dcbf92fa268a5300cdc6b0d41a4e7e82961fca009b95074349aca547b1326f94cd1eec2c8f29457ad0bcb66c89d0569431418b6f99d929a1d4b5ebccfa33d472718f0ed46bc8e225ffa6ce83df2baf211dba950bd4a675ca6e84c4a5313d597782de3213244c43b6c87798e9f7b80f3ca35c007a2e03b3df80faa3c44a9018bca2d5174d203fbec5736d22202b687f949b242aa3596d56899107bd13e80816e50d094651cc97a56807f75998d17fc516e580f9e0206064e70f1ca74700522ece1d8090e95c634ed0522c622c90696c2b8fc4310aeb0d24cd6db5aa0b44a1af1f6c31b250bcbe36aa065e660ce0c7df0f12be47d2089beac06b3a4229eefb1396d680fdcac2958007fbc46459903f6a3411b8160c46d7649ac852f674802b0c87b9837da26e09754398c15acd1798bb207b2844d2ee63a553374f539f94042119cafcbd625a175b53d986c6567114713002b9ad9774c58ba0755c8e00ae619b00ed6e9dc7503deb250a5bf3ddc6bb4cd1819d39fd5dd1211e07a84b024399b0c42d076b34f9c30ed34e234cd8ad799cb595650d0b6ee273f54a5379cda20e2ce84619d7c84828b5fd2ab3268e3713a395fdd7a95ebfa51852add7bdf9dc608e39b5b5b51096255bea21bf49e48c087164898e74c182bf7a3242977853ce8e9c57dce167811756b57b6d1c82d38171a2aa2730572732dbf53b69aba789aabc872c88b7bffc9cba7555daa2049310769929f1145db81d8d7b855831d7ded35681c6dddc9cff969fba76a737149ccd76f951db408719e6e6d41bd64443f46cb03b90e41760ce021d9bb06341577c87119bb41102c7ff14c7c60d2f3f79c441a03e1dc48c3650f49297777ab4c9233b55c4eeb7587a91df10c5828f764cfe7cdac847aa6ce05d9e65202e0a08660e6db3089b06d5ebc398ec9844f40fc94cbbbd6c03829bd448951b3b26cbc1f304f45c61537babab850569a8e5aa64fd30792f035f30503b141f6610d3b2975443bf57c5a5f7acab4d76a8149e83a5499776cebf693ca5a0342fb78c9c879f92e4df9e4cbc551b652215c43060f4ae680cbbc19c926ccdbb38197fe0dd1425c372a2ce8e5939a5af4bae643231b7f52cba753eec720bc231324b3acb886e2a4e205f012fc7a62ae30397c37ccc854267fd9ce44e9e9231ab32890215bdb79ecd12c8b5834fb3d65a2fee3eb50eb2c671ab5cbf4f4c7deb9468bb00866d4feb94578fedd447ed74ff5f4723dcd5c55f5f6627a53cdfb6062831e5436f761e8cdc1f02556061ceaee586edadbb472d7497f22626befccb0fa59f34fdc35e08f4cc95cd895ee71c720ea0de30839d2bdba2599f268a45752dda321b34d6f95fab4f8302edeb459ede132e533b52cc42ca3d9ce659cfa25f693d10f22bcf15a42c9f24c551f1c319bdb4cfdcdb4d61773a126495e42dc052a50801dac9b92e0ef196a6a29adf7688caa97d8b1f38eeb921ace2f98b3b9257f65e6cfb542e844694917b735439c9da41c4399d1926ae354d5d79c1e5b873f1ad22a29606f8cb120048d8bd12c1890d4baee7aaca52ccbee30055c700fc26d7b5e9967d84d2c9241ab251b633bf3e71792cad00631be89234c2c5cb5d14ba4bb5b88c6d613188ed81714fbfdbcd0772b899d024de9da7ef48fab42ae987e77f08dd5cf8dd1ba0b5ae8501771455546d773534565d6bbee7b8df32382d5c4d6cc9a03d834e0f815799534326f0d0e68ac055e425a296629fde1f82b8676402cd4176f9ae1a6732c06e4142d434c7f921c5cc0b3cfa4aca933e2865a4b9a95a37cbfe8bdd21e37c2953fed626baa56929af394c663669ef0e131feb94fa68ac3e04624db6202a27a3dcf1703369e791f7864e99a010c5457d740fd7fdff3864df47b517917e1aea729bc477a7f088d08986a1970ba9c88f65d80e3f5037d09ccd4f4be124e6f104b7419e2c460dc51724776e09e11c80259b60ee824790ff9ddc5b15642d8070f644165177d3e1ee7b702b3dc89ddaff250b3c83b36b0792f14840e633a4bdfe93b1b66f583cd4f7421ba8058ccfca5ab7dea29f1394fc4ec14480580c18759cf313372146540b8cb13b32385435e9fdef71eeba50eaf0568e154d3e32175b5b06425443065d198a99f442c84e12c8b97aa8e226e0bb473769a3bf4a8562221ae3593edec3f2b11de37d8b920cba245906e57aac982a7acc0e54af549245bb21693ffa10b62aa3256c8f24e82089236b260d83711bd8c56477f6b08fcbca0943538723e8dcbd9409221c57fb3ed3f121a20af81a86ba8c1968c681cda612eb9bad4eb6848440bb606685747164d1568fce3d7746ca74d141c4671fbbbcd62dc253911ff41d1d0146aa221c4851e62cdf435d32e7022272d0cf32f0dc72b61bdfe4d1f2a5162b671ef40c21df0826f245bfff62cd834ba00493b48c63a3bb1b199ade089a67edac061d2c567de02f049121cb440dbbbe2974c3cb65bde5130996a870921a09379213f825e8e282261c56aed5468d252a21570e1709899d8f91c7c65481acc689005a2310f05e2da6c4dd72b4e33f4d34be7b54fcf573095238a464ff2971c9e1ae8ab456518c80bbab0861a769639b9a49fba4cdcb566770d5d174fd1751d69362a65da8d49d05a72c4e2ecaed9912238c8a31867b292672e3d15d3a35ec9c5e2ee100300b469423b2e0e461c487d4967b450e1140c7291fb8a3b47b2f08c3471c1926bd503f81e120e6789ea63e4f955b8f35328102e8154c3b3910c74d454f917ab5f1831a8b6dc1c56b42ef009c46299b3758470fc87b7a83baae993a56ba01a1b8db013bf69361e18e08b664d9971515c924658321d525c01a1a98f0395c6fc115c406d7af00104577da4ad5d37bacaf310637b0dd6ee43077a1fe83e0c0cbda2e344cd22d0860c2f2de9631fd9a7a5b9b1003ad0fbfc4e42ddc85458fcdf194f8d9bc8aaf23ae87741d2a56a1a7cd9721aa33bc34a3374d81918cc5cb33522670e967da3498a2cd9d4a9b4008ea151b31a15df2dc63e966ee30592d458b2b4d16e24a6aa8cb61b51b5ce639362bfcf89a2519d0928669c87d144d656e0ac82f944b357e92b11fbab2615c82d23481e76675387c4a6c48d1b53fe79669881942d0e0b0c0a18f77f699e26ebb18e8e2cc3ed432bddb447d8b64d03fd3f7cefbd5b051935591a2cf4695957a2de0f2d885c151349117061bb2d810018d20bc94647601f0cbc87f4b29812ff52cda657f44917c467c17b4ac98071688107f3a98c5bd2b2c55d838e56760846b0593e46d7c922c508ea7c3acfda29c77a16dccc40a2ce6d4b7c851efb0c5d76995d3e18bcd97c41789d2667f75cbec2a075ef39f4c4dcdff994813ed38aa051eb85299744c09589b3de0f0e732034e631ba1fd703d33065012cab2b40bc3fbd5eb624a9d02aa346ba2a2784e2841ef873d1921e5e67ae7c1f40fd3643c8551600693122760746f2f76efd595c97983d014efe56786e4f0b9f50024b6c3acd1c5e6a3353a434213ccc00bcc9f845d79aa71fa5f4d7b1869469e5b3f3c92ba52f731a6f41fb2474b3765c3d8c5fc208c99eb13a13eccae2b33dac5e1c76287857f5406c3f606f3e3d1c0de03a514912dd4bbbd7390219cea112fc416d2d9f0eeae72cc39e552f0c9b323a73db1d0be6e84e52be50be6bc35cf65791f7cd88feecc6d1e0f89abbe4d2155b74cfc0de297981758659fb45ded9b3de493682f4cbd0dbfcfddef1ca77148042239712078395377d2d642fc44a1d983dc83810da8ea3ae5d068dceb71c79496d60dc09e312f060cd8dca3a8fedc2ec32e2189b28dc30857f76e1b65c49024f6f83b8ca776b9fdcbe31d72689a97798dbbd18417a1aff66229c937c10da8d1e360eec3b62ab8a49f54d9df9b9bcd25f655f72ed999e7c46ed8a0a0f777fe15fb8e72e52787f38629612e97baa9d2449dd533249db777088c6489c3c127518a39f3c9cf65f0c49db09cd351891cd9d13b75744545e0cd058fbcec8047e21a6f7dd65b2b02b58aab62aff9bbfa6885ee2d710f34a89de565b56c6952f0e1a04a7bf8da6faa01b3a9b8efdc1dfc4b45531025e1f7c6caddd8d554037fbd27678ef05b82a243086b6a6e2faa09a7f46f16c18a148c2188ab7c30c255ebce504e77e30eb6bd25aa7be5ea8e7d523c8b640831069c31ee697caf073ee20b10fa921e662bb8dec798dea4bd9bca8803a1669d25ef3cf7a4eed15d1fe61d0354fcfec46992928f72bc76f6dc51517871d5595c6ff8351f74c30d5df8eab1c457480b9ca13a5805e36f5f525a0d9274ff89d2983f17ccc2b89a66a30b0780040198e5fd8b91a86e75fcda8536d1b7b682684d8aa442344a3858c7bf4de4ae02b4481e5751979965ea5981ad5deb6891e20314257676b4a2152091eae7c9ade82c5dfd00b7cd793f0ff5dfa9528a83875c936fdecfbf0b98ed862e83c2fc1fc8aa7d372b1b23eb66a750687e91f1c038398bc3a6e2a06454519ae9d448675ea15e700a0c2c99b3032299c12c1c6545f5dfbb31dcf138cc9d50ead9e93075af786bba647286b463ba5b16194aea24d7beca774df790e2693892e7574dc6ddb3710ae8e4f96ab4a714ebb385bc7b68c2daaa31b62dafef55ee35b632c5538044e30f6b5a68610e05e511e55eec21a475bcae82ab9f5e6a568b1a5e5f25a266e1d5ed244ef2917f352f4602530564c1ba4e153d6c7171ad643fb95e44021ee0dd82ef9ce7b39cb43735598a86018f4a23956ee09f35a1db32af86dd065d41339f7b92a03371341825fe9948ca8e140468cc1a30341288a211439e78efb5d42d22f9071f7a24cb71454f419417d6bfe0edf1613c5070a33ef12a890440c24ac53cde4e8ad3c411b69172c4400cc6399ec5cb9ef32e0a472b4c2118288a99a952c3c56b46d9b22b01b2596944b70896954b91bec9c875394499ab78022826ec39a6ba45ee0e0f08332e13cd38b5c060099d8ff48b5131067450e20e7ebcb3ac95eb98d82295456782011ddb23b48a302e80cdfcbaa3ac01a4961c9c829e91a0303ee749ea780dea571979e88d1f4ae073a66244e937f1dd6f58d77b433e63e3e525594c8b22788eede07fbaaeae4e3624ed94754af4fb56abf6e24111df76a065726ee3f848155f12e9293fc259843b5de60d766bb5f8fe81ba19406e9295e885246bb242ee648efa8fc72278c261ac576645650da54212751b51e279fe9c9095249160a1131a20b3952c30da72148cdb2fee189ef0b3c2e1e9c07f467899dc01a7e904cc95ed79901ed6c675b2bf3896fe93e8562666f8c0f8d75ba3ff697ee0fea511f35fd51d78d6b5c8f7343400a26c85aa7045a06034f34df480ea46c3d6dbcb9d240ae3908fdb77ad4fe21eafd4f1ecdb7dd0fc1e4d6e4df5a01d7944bd5cbbba0a9bfbbf6570f9f9d8787b14e78305db76cfcee0a96975fb763f697c406fe1fd88f01c223d40809e7eae1dbdd8dcdda343403c2c2e5fcfaf5c21c2f1f160c9ec40406758b517afd9840ccee1c79727142948af63e075b57062b34c07c4e55aea9599dfe4c904c383f78ddd2d1c950ae3234f0f61458240a476c0b5c53d1a5c7464a37becd80d7c40704939330b5c74cc0ed932b25e802e3f4c4cec1028d3b4ec205789a1f9db78aa5da909c75b699c49166ef45656bb2e5274e0b0cbd1ad6f24a26148290d99262636a2282ed94a9251ccf98b79ec29bd9f3c3e31abb66eaa54b73bfdcb159807926896d3de3bf0848d582c515f966d995ef0afe166eda22d1b7ae96b5817a65f1cef288609e7665b82a31698adf43c83567511a2f8473933c27aad1713b7fe0dcb62b664a9899665969e0cd46d4758300f703b22c5b9eb7f9f00d083137b9c22dee20d7683627292366886f599f78ed92cedc3fc3e19dc8f694e9c7880cdce1f461d2e4dc4fdad6cb681e8c0a17cda36cc4fac4fe83fff9d0c16762e5591e30472e2e03b40714ffa8edfbc329ce3549a0a842c4f1a0ea6f17c57a6d88494edc7b82d68a4a93119c1b21dc5cf8bc4fe8de61fb0771902c7a3a336f270ac2c1015ed921c7b9a5c29fd70e9594fc6911593b6db20127d3b02bcea58a05fdba7061d55fcd3bc8f6947790771c694203faffea5cd06e85499e105ecb60b51e4f772a477060e3985c94332580c4d2d251c9d9e21b0a5ec29d130cb7591c5e55ba11ea75db61cc697ef038728c47aa710209a617a85ca07ab19da298048f04b1870bca7d059f8ee09dd54203589d79043c9ff026bb5907aa03fb9370fc55e076fd715f106518e59b6defb5755fa03199a1873739c9060bc59737b1310417c747b490c27227e0b074189538b73b783231daf20b46621437c8474abfcbe66eaa0f2cd97e5ebc9772b30ae26fa869f60b283475504f8aa1e5694424d29354051343f232a01da04f3178c668b6a8998785bc74fb0d47e0ceed1b3192ea1ebe36aa333cba65e38ea0eaf93ce86c14e02de1eb270ec5da5419c945678cc32d072b7c8d8daee408c42d3bc07a6ed047ddb7bde0a2fd0909e0f1f037d6472d3c06fca48cbe31ba3481137bad9776e2f82e90ac9fa30d2705b2f273b438f667c40ed158f4861e264778196733ddf88b40523a77ee5ec7f4b0f19b767e1ee3457e8963c5eea11d3b23ce5ce2c1995221605483ec5d6f391910e34e86d81d415015988d1fcc23b31ede2f4166dc71c41db360095fa148300d1414630b39bb54cf03c39419660bf248f542f32ba30b210e613f9a20c5ca2a1bdf0646a51130e34ec000f13560a5503c429bc67b78f6ff817d2c47bd56bd5eed4b52587d0f36e8deded0a8ff05351d0800a54a0e27c87c55388eaf443b10696c50f8da1f6ca14ccdb2122cb8e2a6cc5e3d801759d4451168a0bb2e3d18f149fdd6b04f2feb1583ab2a95bf44b36420850a629c231050c9a26b17d95cafeec84cb083c49bc3adf096e6ca3a2e2522670edc76672dff7e802cb874478275227fa99d76d93e785f1038359b89179270f3b839c008d0ad3b74a4dbc0d220e7cfe53c184393cb2ab3185645b5e128b31110240add1cfe22b8afa323875d5e9c6847b88dc4e56d3e2c5edddb027a3d961104a4e990b926a73777e2ed3f70a2e3c70c21520c49adfd22cd61ba11a72b54ca021011c863497bf44063ea2bb5207a7254d1f0118f351007982968313c1c4518516f709e9ee6734938de381fe9227b736c6ceee84c5d630e1ab8225345e86e6795dbe2124db7297790b861d4bddb91c1727bf8f8604eece3d3ce22274526ab0a42a20f6b080812b912e00f595ff02f75693e062c109fd84920e2999baecd89e54521b3800b560e4d687b8f6b51cc2510f15c6aa5c4de617d6e483f7e28df8062d5e3d9c90b5772b996e5582513294d0e3afbbe64f798d5fd191889bd418478e4de4611c90e4f817ed2e01c4e732ccb17be99e72beb8f1129a76d3c6b9d03026d2a072d54a5822733799c6a9af0e7e167600929386593d5b156879bac0459fc0d80158c4da36accf041a376cc7682fc5362e97d88b054a8dc22acdcea9e8ad11af63a7323749bb2ffa067d8be394a3a7fa59e25bcf4440b8824efef8df8b5efd013f52cc03c68e7ad2a3e135ed2f5114872923195d93e69f15ef2866dd41d87f53d6c38d5b3af7f06bd1753074e181c8af45c871c75254b439e8bd8e77e661f189b2992358cf6d45a6af98e64c7536804ccf81541c5f6c34d0288841184a8b14aa874427e75556a1d4f7ffdd8f50db0a1343420d0cc22f3d2fc6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="聚合支付" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E8%81%9A%E5%90%88%E6%94%AF%E4%BB%98/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="代码模板" scheme="https://kiml.github.io/tags/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十六天-42接雨水、84柱状图中最大的矩形</title>
    <link href="https://kiml.github.io/posts/82b551fe/"/>
    <id>https://kiml.github.io/posts/82b551fe/</id>
    <published>2024-07-13T01:06:09.000Z</published>
    <updated>2024-07-16T09:49:11.804Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：42 看解析。84 看解析。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-07-13 初始记录</span><br><span class="line">24-07-16 完成</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="42-接雨水">42 接雨水</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/trapping-rain-water/" >https://leetcode.cn/problems/trapping-rain-water/<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="84-柱状图中最大的矩形">84 柱状图中最大的矩形</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/largest-rectangle-in-histogram" >https://leetcode.cn/problems/largest-rectangle-in-histogram<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="看解析">看解析</h2><h3 id="42-接雨水-2">42 接雨水</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0042.%E6%8E%A5%E9%9B%A8%E6%B0%B4.html" >https://programmercarl.com/0042.接雨水.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>当前高度小于等于栈顶高度，入栈，指针后移。</p></li><li class="lvl-3"><p>当前高度大于栈顶高度，出栈，计算出当前墙和栈顶的墙之间水的多少，然后计算当前的高度和新栈的高度的关系，重复第 2 步。直到当前墙的高度不大于栈顶高度或者栈空，然后把当前墙入栈，指针后移。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;  </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; height.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (height[i] &lt;= height[stack.peek()]) &#123;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="comment">// 当前元素小于栈顶元素  </span></span><br><span class="line">            <span class="keyword">if</span> (height[stack.peek()] &gt;= height[i]) &#123;  </span><br><span class="line">                stack.push(i);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; height[i] &gt; height[stack.peek()]) &#123;  </span><br><span class="line">                    <span class="comment">// 当前的栈顶  </span></span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">mid</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">                    <span class="keyword">if</span> (!stack.isEmpty()) &#123;  </span><br><span class="line">                        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> Math.min(height[stack.peek()], height[i]) - height[mid];  </span><br><span class="line">                        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> i - stack.peek() - <span class="number">1</span>;  </span><br><span class="line">                        area += h * w;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                stack.push(i);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> area;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="84-柱状图中最大的矩形-2">84 柱状图中最大的矩形</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0084.%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2.html" >https://programmercarl.com/0084.柱状图中最大的矩形.html<i class="fas fa-external-link-alt"></i></a>)</p><p><em>本题是要找每个柱子左右两边第一个小于该柱子的柱子，所以从栈头（元素从栈头弹出）到栈底的顺序应该是从大到小的顺序</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;  </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// 首末尾加零防止无法进入循环  </span></span><br><span class="line">    <span class="type">int</span>[] newHeights = <span class="keyword">new</span> <span class="title class_">int</span>[heights.length + <span class="number">2</span>];  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; newHeights.length - <span class="number">1</span>; i++) &#123;  </span><br><span class="line">        newHeights[i] = heights[i - <span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    newHeights[heights.length + <span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">    newHeights[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newHeights.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; newHeights[i] &lt; newHeights[stack.peek()]) &#123;  </span><br><span class="line">            <span class="comment">// 当前元素的前一个元素  </span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">mid</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">            <span class="comment">// 右侧数据与左侧数据的差值  </span></span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> i - stack.peek() - <span class="number">1</span>;  </span><br><span class="line">            area = Math.max(area, w * newHeights[mid]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        stack.push(i);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> area;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：42 看解析。84 看解析。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-13 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-16 完成&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="单调栈" scheme="https://kiml.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十五天-739每日温度、496下一个更大元素 I、503下一个更大元素II</title>
    <link href="https://kiml.github.io/posts/d0198d2/"/>
    <id>https://kiml.github.io/posts/d0198d2/</id>
    <published>2024-07-11T02:53:32.000Z</published>
    <updated>2024-07-16T09:44:58.106Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：739 看解析。496 看解析。503 根据 739 写出。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-11 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="739-每日温度">739 每日温度</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/daily-temperatures" >https://leetcode.cn/problems/daily-temperatures<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="496-下一个更大元素-I">496 下一个更大元素 I</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/next-greater-element-i" >https://leetcode.cn/problems/next-greater-element-i<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="503-下一个更大元素-II">503 下一个更大元素 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/next-greater-element-ii" >https://leetcode.cn/problems/next-greater-element-ii<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nextGreaterElements(<span class="type">int</span>[] nums) &#123;  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];  </span><br><span class="line">    Arrays.fill(result, -<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length * <span class="number">2</span>; i++) &#123;  </span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i % nums.length] &gt; nums[stack.peek()]) &#123;  </span><br><span class="line">            result[stack.peek()] = nums[i % nums.length];  </span><br><span class="line">            stack.pop();  </span><br><span class="line">        &#125;  </span><br><span class="line">        stack.push(i % nums.length);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="739-每日温度-2">739 每日温度</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6.html" >https://programmercarl.com/0739.每日温度.html<i class="fas fa-external-link-alt"></i></a>)</p><ul class="lvl-0"><li class="lvl-2"><p>情况一：当前遍历的元素 <code>T[i]</code> 小于栈顶元素 <code>T[st.top()]</code> 的情况</p></li><li class="lvl-2"><p>情况二：当前遍历的元素 <code>T[i]</code> 等于栈顶元素 <code>T[st.top()]</code> 的情况</p></li><li class="lvl-2"><p>情况三：当前遍历的元素 <code>T[i]</code> 大于栈顶元素 <code>T[st.top()]</code> 的情况</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;  </span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];  </span><br><span class="line">  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; temperatures.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 当前元素小于等于栈顶元素，直接继续放入  </span></span><br><span class="line">        <span class="keyword">if</span> (temperatures[i] &lt;= temperatures[stack.peek()]) &#123;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        <span class="comment">// 当前元素大于栈顶元素，弹出元素，计算result，（直到当前元素不大于栈顶元素），将当前元素加入栈</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peek()]) &#123;  </span><br><span class="line">                result[stack.peek()] = i - stack.peek();  </span><br><span class="line">                stack.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化版本</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;  </span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];  </span><br><span class="line">  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; temperatures.length; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peek()]) &#123;  </span><br><span class="line">                result[stack.peek()] = i - stack.peek();  </span><br><span class="line">                stack.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">        stack.push(i);    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="496-下一个更大元素-I-2">496 下一个更大元素 I</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0496.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0I.html" >https://programmercarl.com/0496.下一个更大元素I.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length];  </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    Arrays.fill(result, -<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) &#123;  </span><br><span class="line">        map.put(nums1[i], i);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums2.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (nums2[i] &lt;= nums2[stack.peek()]) &#123;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">// 栈中保存了上个需要比较的对象</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums2[i] &gt; nums2[stack.peek()]) &#123;  </span><br><span class="line">                <span class="comment">// num1中包含整这个元素  </span></span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(nums2[stack.peek()])) &#123;  </span><br><span class="line">                    <span class="comment">// result中的对应下标为这个元素的后一位  </span></span><br><span class="line">                    result[map.get(nums2[stack.peek()])] = nums2[i];  </span><br><span class="line">                &#125;  </span><br><span class="line">                stack.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="503-下一个更大元素-II-2">503 下一个更大元素 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0503.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0II.html" >https://programmercarl.com/0503.下一个更大元素II.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：739 看解析。496 看解析。503 根据 739 写出。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-11 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="单调栈" scheme="https://kiml.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十四天-647回文子串、516最长回文子序列</title>
    <link href="https://kiml.github.io/posts/aa7c5f5/"/>
    <id>https://kiml.github.io/posts/aa7c5f5/</id>
    <published>2024-07-09T09:13:45.000Z</published>
    <updated>2024-07-10T14:19:12.457Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：647 看解析，516 看解析</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-07-09 初始记录</span><br><span class="line">24-07-10 完成</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="647-回文子串">647 回文子串</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/palindromic-substrings" >https://leetcode.cn/problems/palindromic-substrings<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="516-最长回文子序列">516 最长回文子序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/longest-palindromic-subsequence" >https://leetcode.cn/problems/longest-palindromic-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：表示区间范围 <code>[i,j]</code> （注意是左闭右闭）的子串的最长回文子串的长度。</p></li><li class="lvl-3"><p>递推公式：<code>s[i]</code> 与 <code>s[j]</code> 相等，<code>s[i]</code> 与 <code>s[j]</code> 不相等这两种情况：不相等取左右指针向内移动的最大值；相等 <code>dp[i][j] = dp[i + 1][j - 1] + 2;  </code></p></li><li class="lvl-3"><p>dp 数组的初始化：相等时，取 1。</p></li><li class="lvl-3"><p>遍历顺序：<strong>从下到上，从左到右遍历</strong></p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestPalindromeSubseq</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()][s.length()];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;  </span><br><span class="line">        dp[i][i] = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> max= <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; s.length(); j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">            max = Math.max(dp[i][j], max);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> max;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="647-回文子串-2">647 回文子串</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0647.%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html" >https://programmercarl.com/0647.回文子串.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：表示区间范围 <code>[i,j]</code> （注意是左闭右闭）的子串是否是回文子串，如果是 <code>dp[i][j]</code> 为 true，否则为 false。</p></li><li class="lvl-3"><p>递推公式：<code>s[i]</code> 与 <code>s[j]</code> 相等，<code>s[i]</code> 与 <code>s[j]</code> 不相等这两种情况：不相等即为 false；相等分为三种情况：下标 i 与 j 相同，同一个字符返回 true；下标 i 与 j 相差为 1，返回 true；i 与 j 相差大于 1 的时候，判断 <code>dp[i + 1][j - 1]</code> 是否为 true</p></li><li class="lvl-3"><p>dp 数组的初始化：全为 false</p></li><li class="lvl-3"><p>遍历顺序：<strong>从下到上，从左到右遍历</strong></p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubstrings</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length()][s.length()];  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; s.length(); j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;  </span><br><span class="line">                dp[i][j] = <span class="literal">false</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (j - i &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (dp[i][j]) &#123;  </span><br><span class="line">                num++;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> num;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="516-最长回文子序列-2">516 最长回文子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0516.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0516.最长回文子序列.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：647 看解析，516 看解析&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-09 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-10 完成&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十三天-115不同的子序列、583两个字符串的删除操作、72编辑距离</title>
    <link href="https://kiml.github.io/posts/ca280c35/"/>
    <id>https://kiml.github.io/posts/ca280c35/</id>
    <published>2024-07-08T08:02:07.000Z</published>
    <updated>2024-07-08T13:25:23.863Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：115 不会、583 根据 115AC、72 不会</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-08 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="115-不同的子序列">115 不同的子序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/distinct-subsequences/" >https://leetcode.cn/problems/distinct-subsequences/<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="583-两个字符串的删除操作">583 两个字符串的删除操作</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/delete-operation-for-two-strings/" >https://leetcode.cn/problems/delete-operation-for-two-strings/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：s 到 i - 1；t 到 j - 1 位置的删除相同需要的最小步数。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1]; </code>（即不加这个元素时的子序列个数 + 加上这个元素的子序列个数）， 如果当前位置元素不同：<code>dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1); </code>（画图即当前位置的上左再去除一个元素并取较小值）。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 、<code>dp[0][j]</code> 都是与元素个数有关。</p></li><li class="lvl-3"><p>遍历顺序：从上到下，从左到右。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[word1.length() + <span class="number">1</span>][word2.length() + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i][<span class="number">0</span>] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp[<span class="number">0</span>].length; i++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][i] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= word1.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= word2.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j] + <span class="number">1</span>, dp[i][j - <span class="number">1</span>] + <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[word1.length()][word2.length()];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="72-编辑距离">72 编辑距离</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/edit-distance" >https://leetcode.cn/problems/edit-distance<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="看解析">看解析</h2><h3 id="115-不同的子序列-2">115 不同的子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0115.%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0115.不同的子序列.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：s 到 i - 1；t 到 j - 1 位置的子序列个数。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]; </code>（即不加这个元素时的子序列个数 + 加上这个元素的子序列个数）， 如果当前位置元素不同：<code>dp[i][j] = dp[i - 1][j];</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 一定都是 1，因为也就是把以 i-1 为结尾的 s，删除所有元素，出现空字符串的个数就是 1。<code>dp[0][j]</code> 一定都是 0。<code>dp[0][0]</code> 应该是 1。</p></li><li class="lvl-3"><p>遍历顺序：从上到下，从左到右。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDistinct</span><span class="params">(String s, String t)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[s.length() + <span class="number">1</span>][t.length() + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= t.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == t.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[s.length()][t.length()];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="583-两个字符串的删除操作-2">583 两个字符串的删除操作</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0583.%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.html" >https://programmercarl.com/0583.两个字符串的删除操作.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="72-编辑距离-2">72 编辑距离</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0072.%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB.html" >https://programmercarl.com/0072.编辑距离.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：word1 到 i - 1；word2 到 j - 1 位置的最小编辑数。</p></li><li class="lvl-3"><p>递推公式：需要确认四种情况：<code>word1[i - 1] == word2[j - 1]</code> 时，不操作；<code>word1[i - 1] != word2[j - 1]</code>，增删换。具体公式看代码。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 、<code>dp[0][j]</code> 都是与元素个数有关，即删除所有元素。</p></li><li class="lvl-3"><p>遍历顺序：从上到下，从左到右。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[word1.length() + <span class="number">1</span>][word2.length() + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i][<span class="number">0</span>] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp[<span class="number">0</span>].length; i++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][i] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= word1.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= word2.length(); j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="comment">// 三数比较  </span></span><br><span class="line">                <span class="comment">// word1删除一个元素，那么就是以下标i - 2为结尾的word1 与 j-1为结尾的word2的最近编辑距离 再加上一个操作。  </span></span><br><span class="line">                <span class="comment">// word2删除一个元素，那么就是以下标i - 1为结尾的word1 与 j-2为结尾的word2的最近编辑距离 再加上一个操作。  </span></span><br><span class="line">                <span class="comment">// 替换元素，word1替换word1[i - 1]，使其与word2[j - 1]相同，此时不用增删加元素。  </span></span><br><span class="line">                dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]), Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[word1.length()][word2.length()];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：115 不会、583 根据 115AC、72 不会&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-08 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十二天-1143最长公共子序列、1035不相交的线、53最大子序和、392判断子序列</title>
    <link href="https://kiml.github.io/posts/2b15070f/"/>
    <id>https://kiml.github.io/posts/2b15070f/</id>
    <published>2024-07-05T06:14:16.000Z</published>
    <updated>2024-07-08T13:12:56.825Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：1143AC（方法不是最简的）、1035AC（和上一题一样）、53AC、392AC（根据 1143）</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24-07-05 初始记录</span><br><span class="line">24-07-06 1143</span><br><span class="line">24-07-07 1143优化、1035、53、392</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="1143-最长公共子序列">1143 最长公共子序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/longest-common-subsequence/" >https://leetcode.cn/problems/longest-common-subsequence/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：text1 到 i；text2 到 j 位置的最长重复数组。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1] + 1; </code>， 如果当前位置元素不同：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：针对初始元素是否相同及 i = 0 和 j = 0 的两种情况，都需要分别判断。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[text1.length()][text2.length()];  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; text1.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; text2.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i) == text2.charAt(j)) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;  </span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;  </span><br><span class="line">                    maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">                    <span class="keyword">continue</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;  </span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;  </span><br><span class="line">                    <span class="keyword">continue</span>;  </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;  </span><br><span class="line">                    dp[i][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];  </span><br><span class="line">                    maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">                    <span class="keyword">continue</span>;  </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;  </span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][<span class="number">0</span>];  </span><br><span class="line">                    maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">                    <span class="keyword">continue</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">            maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> maxLength;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1035-不相交的线">1035 不相交的线</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/uncrossed-lines" >https://leetcode.cn/problems/uncrossed-lines<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：text1 到 i - 1；text2 到 j - 1 位置的最长重复数组。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1] + 1; </code>， 如果当前位置元素不同：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：i = 0 或 j = 0 时，dp 值为 0</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxUncrossedLines</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length + <span class="number">1</span>][nums2.length + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums1.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= nums2.length; j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前位置加入计数  </span></span><br><span class="line">            <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// System.out.println(Arrays.deepToString(dp));  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[nums1.length][nums2.length];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="53-最大子序和">53 最大子序和</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/maximum-subarray/" >https://leetcode.cn/problems/maximum-subarray/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：数组长度为 i 时的最大子序和。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]); </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：i = 0 时，取 <code>nums[0]</code> 的值</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];  </span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> dp[<span class="number">0</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">1</span>] + nums[i], nums[i]);  </span><br><span class="line">        max = Math.max(max, dp[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> max;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="392-判断子序列">392 判断子序列</h3><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：s 到 i - 1；t 到 j - 1 位置的相同子序列长度。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1] + 1; </code>， 如果当前位置元素不同：<code>dp[i][j] = dp[i][j - 1]; </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：i = 0 或 j = 0 时，dp 值为 0</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/is-subsequence" >https://leetcode.cn/problems/is-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[s.length() + <span class="number">1</span>][t.length() + <span class="number">1</span>];  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= t.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == t.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[s.length()][t.length()] == s.length();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="1143-最长公共子序列-2">1143 最长公共子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/1143.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/1143.最长公共子序列.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>二维数组优化</p><ol><li class="lvl-7">dp 数组的定义修改为 <code>dp[i][j]</code>：长度为 <code>[0, i - 1]</code> 的字符串 text1 与长度为 <code>[0, j - 1]</code> 的字符串 text2 的最长公共子序列为 <code>dp[i][j]</code>（即多）</li><li class="lvl-7">初始化即 i 为 0，j 为 0 时，<code>dp[i][j]</code> 的值也为 0</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[text1.length() + <span class="number">1</span>][text2.length() + <span class="number">1</span>];  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= text1.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= text2.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// System.out.println(Arrays.deepToString(dp));  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[text1.length()][text2.length()];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>一维数组优化</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 多从二维dp数组过程分析  </span></span><br><span class="line">        <span class="comment">// 关键在于  如果记录  dp[i - 1][j - 1]</span></span><br><span class="line">        <span class="comment">// 因为 dp[i - 1][j - 1]  &lt;!=&gt;  dp[j - 1]  &lt;=&gt;  dp[i][j - 1]</span></span><br><span class="line">        <span class="type">int</span> [] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n2 + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++)&#123;</span><br><span class="line">            <span class="comment">// 这里pre相当于 dp[i - 1][j - 1]</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> dp[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n2; j++)&#123;</span><br><span class="line">                <span class="comment">//用于给pre赋值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> dp[j];</span><br><span class="line">                <span class="keyword">if</span>(text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="comment">//这里pre相当于dp[i - 1][j - 1]   千万不能用dp[j - 1] !!</span></span><br><span class="line">                    dp[j] = pre + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// dp[j]     相当于   dp[i - 1][j]</span></span><br><span class="line">                    <span class="comment">// dp[j - 1] 相当于   dp[i][j - 1]</span></span><br><span class="line">                    dp[j] = Math.max(dp[j], dp[j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//更新dp[i - 1][j - 1], 为下次使用做准备</span></span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1035-不相交的线-2">1035 不相交的线</h3><p>解析：(<a class="link"   href="https://programmercarl.com/1035.%E4%B8%8D%E7%9B%B8%E4%BA%A4%E7%9A%84%E7%BA%BF.html" >https://programmercarl.com/1035.不相交的线.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="53-最大子序和-2">53 最大子序和</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html" >https://programmercarl.com/0053.最大子序和（动态规划）.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="392-判断子序列-2">392 判断子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0392.%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0392.判断子序列.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：1143AC（方法不是最简的）、1035AC（和上一题一样）、53AC、392AC（根据 1143）&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-05 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-06 1143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-07 1143优化、1035、53、392&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十一天-300最长递增子序列、674最长连续递增序列、718最长重复子数组</title>
    <link href="https://kiml.github.io/posts/825964fb/"/>
    <id>https://kiml.github.io/posts/825964fb/</id>
    <published>2024-07-01T03:04:29.000Z</published>
    <updated>2024-07-03T10:51:56.018Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：300 看解析，674AC，718看解析</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-01 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="300-最长递增子序列">300 最长递增子序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/longest-increasing-subsequence" >https://leetcode.cn/problems/longest-increasing-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：<code>dp[i]</code> 表示第 i 个下标前的最长递增子序列的长度</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.max(dp[i], dp[j] + 1)</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp</code> 数组所有元素的初始化值都为 1。</p></li><li class="lvl-4"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-4"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];  </span><br><span class="line">  </span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;  </span><br><span class="line">                dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        maxLength = Math.max(maxLength, dp[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> maxLength;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="674-最长连续递增序列">674 最长连续递增序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/longest-continuous-increasing-subsequence" >https://leetcode.cn/problems/longest-continuous-increasing-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：<code>dp[i]</code> 表示第 i 个下标前的最长连续递增子序列的长度</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.max(dp[i], dp[i - 1] + 1)</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp</code> 数组所有元素的初始化值都为 1。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLengthOfLCIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];  </span><br><span class="line">  </span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            dp[i] = Math.max(dp[i], dp[i - <span class="number">1</span>] + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        maxLength = Math.max(maxLength, dp[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> maxLength;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="718-最长重复子数组">718 最长重复子数组</h3><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：num1 到 i - 1；num2 到 j - 1 位置的最长重复数组。</p></li><li class="lvl-3"><p>递推公式：<code>dp[i][j] = dp[i - 1][j - 1] + 1; </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp</code> 数组所有元素的初始化值都为 0。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）题目链接：(<a class="link"   href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray" >https://leetcode.cn/problems/maximum-length-of-repeated-subarray<i class="fas fa-external-link-alt"></i></a>)</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLength</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length + <span class="number">1</span>][nums2.length + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums1.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= nums2.length; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> maxLength;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="300-最长递增子序列-2">300 最长递增子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0300.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0300.最长上升子序列.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="674-最长连续递增序列-2">674 最长连续递增序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0674.%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0674.最长连续递增序列.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="718-最长重复子数组-2">718 最长重复子数组</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0718.%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84.html" >https://programmercarl.com/0718.最长重复子数组.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：300 看解析，674AC，718看解析&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-01 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【代码模板】二维码的生成</title>
    <link href="https://kiml.github.io/posts/5ee0f6a5/"/>
    <id>https://kiml.github.io/posts/5ee0f6a5/</id>
    <published>2024-06-28T09:57:09.000Z</published>
    <updated>2024-07-23T13:27:06.532Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>ZXing 是一个开源的，用 Java 编写的多格式的 1D / 2D 条码图像处理库，使用 ZXing 可以生成、识别 QR Code（二维码）。常用的二维码处理库还有 zbar，近几年已经不再更新代码，下边介绍 ZXing 生成二维码的方法。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-28 初始记录</span><br></pre></td></tr></table></figure><h2 id="ZXing">ZXing</h2><span id="more"></span><ol><li class="lvl-3"><p>引入依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 二维码生成&amp;识别组件--&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.zxing<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javase<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>生成二维码方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">QRCodeUtil</span> &#123;  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 生成二维码  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 二维码对应的URL  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> width   二维码图片宽度  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> height  二维码图片高度  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 二维码二进制流  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createQRCode</span><span class="params">(String content, <span class="type">int</span> width, <span class="type">int</span> height)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">resultImage</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        <span class="comment">// 除了尺寸，传入内容不能为空  </span></span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(content)) &#123;  </span><br><span class="line">            <span class="type">ServletOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">            <span class="type">ByteArrayOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();  </span><br><span class="line">            <span class="comment">// 二维码参数  </span></span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;rawtypes&quot;)</span>  </span><br><span class="line">            HashMap&lt;EncodeHintType, Comparable&gt; hints = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">            <span class="comment">// 指定字符编码为“utf-8”  </span></span><br><span class="line">            hints.put(EncodeHintType.CHARACTER_SET, <span class="string">&quot;utf-8&quot;</span>);  </span><br><span class="line">            <span class="comment">// L M Q H四个纠错等级从低到高，指定二维码的纠错等级为M  </span></span><br><span class="line">            <span class="comment">// 纠错级别越高，可以修正的错误就越多，需要的纠错码的数量也变多，相应的二维吗可储存的数据就会减少  </span></span><br><span class="line">            hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.M);  </span><br><span class="line">            <span class="comment">// 设置图片的边距  </span></span><br><span class="line">            hints.put(EncodeHintType.MARGIN, <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                <span class="comment">// zxing生成二维码核心类  </span></span><br><span class="line">                <span class="type">QRCodeWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">QRCodeWriter</span>();  </span><br><span class="line">                <span class="comment">// 把输入文本按照指定规则转成二维吗  </span></span><br><span class="line">                <span class="type">BitMatrix</span> <span class="variable">bitMatrix</span> <span class="operator">=</span> writer.encode(content, BarcodeFormat.QR_CODE, width, height, hints);  </span><br><span class="line">                <span class="comment">// 生成二维码图片流  </span></span><br><span class="line">                <span class="type">BufferedImage</span> <span class="variable">bufferedImage</span> <span class="operator">=</span> MatrixToImageWriter.toBufferedImage(bitMatrix);  </span><br><span class="line">                <span class="comment">// 输出流  </span></span><br><span class="line">                ImageIO.write(bufferedImage, <span class="string">&quot;png&quot;</span>, os);  </span><br><span class="line">                <span class="comment">/**  </span></span><br><span class="line"><span class="comment">                 * 原生转码前面没有 data:image/png;base64 这些字段，返回给前端是无法被解析，所以加上前缀  </span></span><br><span class="line"><span class="comment">                 */</span>  </span><br><span class="line">                resultImage = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;data:image/png;base64,&quot;</span> + EncryptUtil.encodeBase64(os.toByteArray()));  </span><br><span class="line">                <span class="keyword">return</span> resultImage;  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">                e.printStackTrace();  </span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(CommonErrorCode.E_200007);  </span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (stream != <span class="literal">null</span>) &#123;  </span><br><span class="line">                    stream.flush();  </span><br><span class="line">                    stream.close();  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
ZXing 是一个开源的，用 Java 编写的多格式的 1D / 2D 条码图像处理库，使用 ZXing 可以生成、识别 QR Code（二维码）。常用的二维码处理库还有 zbar，近几年已经不再更新代码，下边介绍 ZXing 生成二维码的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-28 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;ZXing&quot;&gt;ZXing&lt;/h2&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十天-188买卖股票的最佳时机IV、309最佳买卖股票时机含冷冻期、714买卖股票的最佳时机含手续费</title>
    <link href="https://kiml.github.io/posts/ab0ba29f/"/>
    <id>https://kiml.github.io/posts/ab0ba29f/</id>
    <published>2024-06-28T01:12:43.000Z</published>
    <updated>2024-06-28T03:31:07.446Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：188 根据 123AC 了。309用另一种方法AC了。714AC。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-28 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="188-买卖股票的最佳时机-IV">188 买卖股票的最佳时机 IV</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv" >https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iv<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span>[] prices)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">2</span> * k];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 初始化数据  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; k; i++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][i * <span class="number">2</span>] = -prices[<span class="number">0</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i]);  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; <span class="number">2</span> * k; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j % <span class="number">2</span> == <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="comment">// 偶数买入  </span></span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] - prices[i]);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="comment">// 奇数卖出  </span></span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + prices[i]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">2</span> * k - <span class="number">1</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="309-最佳买卖股票时机含冷冻期">309 最佳买卖股票时机含冷冻期</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown" >https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-cooldown<i class="fas fa-external-link-alt"></i></a>)</p><p>思路：买卖股票 + 打家劫舍结合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;  </span><br><span class="line">    <span class="comment">// 0 表示持有股票的状态; 1 表示不持有股票的状态  </span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">2</span>];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;  </span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i]);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="comment">// 持有：前一天持有；前一天不持有（不可能）：前两天不持有  </span></span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">2</span>][<span class="number">1</span>] - prices[i]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 不持有：前一天不持有；前一天持有  </span></span><br><span class="line">        dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">1</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="714-买卖股票的最佳时机含手续费">714 买卖股票的最佳时机含手续费</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee" >https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-with-transaction-fee<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加上手续费就行</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices, <span class="type">int</span> fee)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">2</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 假设买入的时候支付手续费  </span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>] - fee;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i] - fee);  </span><br><span class="line">        dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">1</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="188-买卖股票的最佳时机-IV-2">188 买卖股票的最佳时机 IV</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0188.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIV.html" >https://programmercarl.com/0188.买卖股票的最佳时机IV.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="309-最佳买卖股票时机含冷冻期-2">309 最佳买卖股票时机含冷冻期</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0309.%E6%9C%80%E4%BD%B3%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E6%97%B6%E6%9C%BA%E5%90%AB%E5%86%B7%E5%86%BB%E6%9C%9F.html" >https://programmercarl.com/0309.最佳买卖股票时机含冷冻期.html<i class="fas fa-external-link-alt"></i></a>)</p><p><strong>注意这里的每一个状态，例如状态一，是持有股票股票状态并不是说今天一定就买入股票，而是说保持买入股票的状态即：可能是前几天买入的，之后一直没操作，所以保持买入股票的状态</strong>。</p><p><strong>达到买入股票状态</strong>（状态一）即：<code>dp[i][0]</code>，有两个具体操作：</p><ul class="lvl-0"><li class="lvl-2"><p>操作一：前一天就是持有股票状态（状态一），<code>dp[i][0] = dp[i - 1][0]</code></p></li><li class="lvl-2"><p>操作二：今天买入了，有两种情况</p><ul class="lvl-2"><li class="lvl-6">前一天是冷冻期（状态四），<code>dp[i - 1][3] - prices[i]</code></li><li class="lvl-6">前一天是保持卖出股票的状态（状态二），<code>dp[i - 1][1] - prices[i]</code></li></ul></li></ul><p>那么 <code>dp[i][0] = max(dp[i - 1][0], dp[i - 1][3] - prices[i], dp[i - 1][1] - prices[i]);</code></p><p><strong>达到保持卖出股票状态</strong>（状态二）即：dp[i][1]，有两个具体操作：</p><ul class="lvl-0"><li class="lvl-2"><p>操作一：前一天就是状态二</p></li><li class="lvl-2"><p>操作二：前一天是冷冻期（状态四），<code>dp[i][1] = max(dp[i - 1][1], dp[i - 1][3]);</code></p></li></ul><p><strong>达到今天就卖出股票状态</strong>（状态三），即：<code>dp[i][2]</code>，只有一个操作：</p><p>昨天一定是持有股票状态（状态一），今天卖出，即：<code>dp[i][2] = dp[i - 1][0] + prices[i]</code>;</p><p><strong>达到冷冻期状态</strong>（状态四），即：<code>dp[i][3]</code>，只有一个操作：</p><p>昨天卖出了股票（状态三）， <code>dp[i][3] = dp[i - 1][2];</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices == <span class="literal">null</span> || prices.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// bad case</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>][<span class="number">0</span>], dp[<span class="number">0</span>][<span class="number">1</span>] + prices[<span class="number">1</span>]);</span><br><span class="line">        dp[<span class="number">1</span>][<span class="number">1</span>] = Math.max(dp[<span class="number">0</span>][<span class="number">1</span>], -prices[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; prices.length; i++) &#123;</span><br><span class="line">            <span class="comment">// dp公式</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] + prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">2</span>][<span class="number">0</span>] - prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="714-买卖股票的最佳时机含手续费-2">714 买卖股票的最佳时机含手续费</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0714.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA%E5%90%AB%E6%89%8B%E7%BB%AD%E8%B4%B9%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html" >https://programmercarl.com/0714.买卖股票的最佳时机含手续费（动态规划）.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：188 根据 123AC 了。309用另一种方法AC了。714AC。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-28 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十九天-121买卖股票的最佳时机、122买卖股票的最佳时机II、123买卖股票的最佳时机III</title>
    <link href="https://kiml.github.io/posts/f80b512c/"/>
    <id>https://kiml.github.io/posts/f80b512c/</id>
    <published>2024-06-27T01:13:33.000Z</published>
    <updated>2024-06-28T03:23:35.471Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：121 直接看的解析。122 可以写出。123 看了部分解析（主要是 dp 的定义那块）。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-27 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="121-买卖股票的最佳时机">121 买卖股票的最佳时机</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/" >https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/<i class="fas fa-external-link-alt"></i></a>)：可以进行一笔交易</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：<code>dp[i][0]</code> 表示第 i 天持有股票所得最多现金，<code>dp[i][1]</code> 表示第 i 天不持有股票所得最多现金。</p></li><li class="lvl-3"><p>递推公式：<code>dp[i][0] = Math.max(dp[i - 1][0], -prices[i]);dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] + prices[i]);</code>。（分为两种情况，当前持有/不持有）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0][0] = -prices[0]; dp[0][1] = 0;</code>。还有一点要注意：<strong>不持有股票状态所得金钱一定比持有股票状态得到的多！</strong></p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;  </span><br><span class="line">    <span class="comment">// `dp[i][0]` 表示第 i 天持有股票所得最多现金，`dp[i][1]` 表示第 i 天不持有股票所得最多现金。  </span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">2</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 初始化  </span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];  </span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 1. 求 dp[i][0]: 前一天也持有就为 dp[i - 1][0]，前一天不持有就为 -prices[i]        </span></span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i]);  </span><br><span class="line">        <span class="comment">// 2. 求 dp[i][1]: 前一天也不持有就为 dp[i - 1][1]，前一天持有就为 dp[i - 1][0] + prices[i]        </span></span><br><span class="line">        dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 手中不持有股票时，利润才会最大</span></span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="122-买卖股票的最佳时机-II">122 买卖股票的最佳时机 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii" >https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii<i class="fas fa-external-link-alt"></i></a>)：可以进行多笔交易</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：<code>dp[i][0]</code> 表示第 i 天持有股票所得最多现金，<code>dp[i][1]</code> 表示第 i 天不持有股票所得最多现金。</p></li><li class="lvl-3"><p><mark>递推公式</mark>：<code>dp[i][0] = Math.max(dp[i - 1][0], dp[i - 1][1] - prices[i]); dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] + prices[i]);</code>。（与上一题的唯一区别为 <code>dp[i][0]</code> 的推导公式，由于可以持续买入卖出，当天持有的价格为<strong>前一天不持有的价格 - 当天价格</strong>）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0][0] = -prices[0]; dp[0][1] = 0;</code>。还有一点要注意：<strong>不持有股票状态所得金钱一定比持有股票状态得到的多！</strong></p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;  </span><br><span class="line">    <span class="comment">// `dp[i][0]` 表示第 i 天持有股票所得最多现金，`dp[i][1]` 表示第 i 天不持有股票所得最多现金。  </span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">2</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 初始化  </span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];  </span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 1. 求 dp[i][0]: 前一天也持有就为 dp[i - 1][0]，前一天不持有就为 dp[i - 1][1] - prices[i]        </span></span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i]);  </span><br><span class="line">        <span class="comment">// 2. 求 dp[i][1]: 前一天也不持有就为 dp[i - 1][1]，前一天持有就为 dp[i - 1][0] + prices[i]        </span></span><br><span class="line">        dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="123-买卖股票的最佳时机-III">123 买卖股票的最佳时机 III</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/" >https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-iii/<i class="fas fa-external-link-alt"></i></a>)：可以进行两笔交易</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：当天的状态一共有 5 种：没有操作，不计入。<code>dp[i][0]</code> 表示第 i 天第一次持有股票所得最多现金，<code>dp[i][1]</code> 表示第 i 天第一次不持有股票所得最多现金，<code>dp[i][2]</code> 表示第 i 天第二次持有股票所得最多现金，<code>dp[i][2]</code> 表示第 i 天第二次不持有股票所得最多现金。（这题重点把这个写出来，后面就能做题了）</p></li><li class="lvl-3"><p><mark>递推公式</mark>：<code>dp[i][0] = Math.max(dp[i - 1][0], -prices[i]); dp[i][1] = Math.max(dp[i - 1][1], dp[i - 1][0] + prices[i]); dp[i][2] = Math.max(dp[i - 1][2], dp[i - 1][1] - prices[i]); dp[i][3] = Math.max(dp[i - 1][3], dp[i - 1][2] + prices[i]);</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0][0] = -prices[0]; dp[0][2] = -prices[0];</code>。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;  </span><br><span class="line">    <span class="comment">// `dp[i][0]` 表示第 i 天第一次持有股票所得最多现金，`dp[i][1]` 表示第 i 天第一次不持有股票所得最多现金，`dp[i][2]` 表示第 i 天第二次持有股票所得最多现金，`dp[i][2]` 表示第 i 天第二次不持有股票所得最多现金 </span></span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[prices.length][<span class="number">4</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 初始化  </span></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = -prices[<span class="number">0</span>];  </span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">2</span>] = -prices[<span class="number">0</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 1. 求 dp[i][0]: 前一天也持有就为 dp[i - 1][0]，前一天不持有就为 -prices[i]        </span></span><br><span class="line">        dp[i][<span class="number">0</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">0</span>], -prices[i]);  </span><br><span class="line">        <span class="comment">// 2. 求 dp[i][1]: 前一天也不持有就为 dp[i - 1][1]，前一天持有就为 dp[i - 1][0] + prices[i]        </span></span><br><span class="line">        dp[i][<span class="number">1</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">1</span>], dp[i - <span class="number">1</span>][<span class="number">0</span>] + prices[i]);  </span><br><span class="line">        <span class="comment">// 3. 求 dp[i][2]: 前一天也持有为 dp[i - 1][2]，前一天不持有就为 dp[i - 1][1] - prices[i]        </span></span><br><span class="line">        dp[i][<span class="number">2</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">2</span>], dp[i - <span class="number">1</span>][<span class="number">1</span>] - prices[i]);  </span><br><span class="line">        <span class="comment">// 4. 求 dp[i][3]: 前一天也不持有为 dp[i - 1][3]，前一天持有就为 dp[i - 1][2] + prices[i]        </span></span><br><span class="line">        dp[i][<span class="number">3</span>] = Math.max(dp[i - <span class="number">1</span>][<span class="number">3</span>], dp[i - <span class="number">1</span>][<span class="number">2</span>] + prices[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[prices.length - <span class="number">1</span>][<span class="number">3</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="121-买卖股票的最佳时机-2">121 买卖股票的最佳时机</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0121.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA.html" >https://programmercarl.com/0121.买卖股票的最佳时机.html<i class="fas fa-external-link-alt"></i></a>)</p><p>补充贪心算法的思路：如果第 i 天卖出股票，则最大利润为 (该天的股价 - 前面天数中最小的股价)，然后与已知的最大利润比较，如果大于则更新当前最大利润的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 贪心解法  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">minPrice</span> <span class="operator">=</span> Integer.MAX_VALUE;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxProfit</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> price : prices) &#123;  </span><br><span class="line">        minPrice = Math.min(price, minPrice);  </span><br><span class="line">        maxProfit = Math.max(maxProfit, price - minPrice);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> maxProfit;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="122-买卖股票的最佳时机-II-2">122 买卖股票的最佳时机 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html" >https://programmercarl.com/0122.买卖股票的最佳时机II（动态规划）.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="123-买卖股票的最佳时机-III-2">123 买卖股票的最佳时机 III</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0123.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII" >https://programmercarl.com/0123.买卖股票的最佳时机III<i class="fas fa-external-link-alt"></i></a>)</p><p>版本二：（<em>不做要求</em>）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>]; </span><br><span class="line">    <span class="comment">// 存储两次交易的状态就行了</span></span><br><span class="line">    <span class="comment">// dp[0]代表第一次交易的买入</span></span><br><span class="line">    dp[<span class="number">0</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// dp[1]代表第一次交易的卖出</span></span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// dp[2]代表第二次交易的买入</span></span><br><span class="line">    dp[<span class="number">2</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// dp[3]代表第二次交易的卖出</span></span><br><span class="line">    dp[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= prices.length; i++)&#123;</span><br><span class="line">        <span class="comment">// 要么保持不变，要么没有就买，有了就卖</span></span><br><span class="line">        dp[<span class="number">0</span>] = Math.max(dp[<span class="number">0</span>], -prices[i-<span class="number">1</span>]);</span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(dp[<span class="number">1</span>], dp[<span class="number">0</span>]+prices[i-<span class="number">1</span>]);</span><br><span class="line">        <span class="comment">// 这已经是第二次交易了，所以得加上前一次交易卖出去的收获</span></span><br><span class="line">        dp[<span class="number">2</span>] = Math.max(dp[<span class="number">2</span>], dp[<span class="number">1</span>]-prices[i-<span class="number">1</span>]);</span><br><span class="line">        dp[<span class="number">3</span>] = Math.max(dp[<span class="number">3</span>], dp[<span class="number">2</span>]+ prices[i-<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：121 直接看的解析。122 可以写出。123 看了部分解析（主要是 dp 的定义那块）。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-27 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十八天-198打家劫舍、213打家劫舍II、337打家劫舍III</title>
    <link href="https://kiml.github.io/posts/f5901d56/"/>
    <id>https://kiml.github.io/posts/f5901d56/</id>
    <published>2024-06-26T01:35:36.000Z</published>
    <updated>2024-06-28T01:09:01.615Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：都是看了解析写出。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-26 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="198-打家劫舍">198 打家劫舍</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/house-robber" >https://leetcode.cn/problems/house-robber<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：下标 i 及之前的房间能偷的最大金币数。</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i])</code>。（分为两种情况，偷/不偷）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = num[0], dp[1] = Math.max(num[0], num[1])</code>。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];  </span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    dp[<span class="number">1</span>] = Math.max(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="213-打家劫舍-II">213 打家劫舍 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/house-robber-ii" >https://leetcode.cn/problems/house-robber-ii<i class="fas fa-external-link-alt"></i></a>)</p><p>本题的递推与上一题相同。区别在于要不要统计头尾。思路是去除尾和去除头分别求一次最大值。然后选较大的那个。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE213</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">rob</span> <span class="operator">=</span> rob(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">200</span>, <span class="number">3</span>, <span class="number">140</span>, <span class="number">20</span>, <span class="number">10</span>&#125;);  </span><br><span class="line">        System.out.println(rob);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> nums[<span class="number">0</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> Math.max(rob1(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>), rob1(nums, <span class="number">1</span>, nums.length));  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;  </span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[end - start];  </span><br><span class="line">  </span><br><span class="line">        dp[<span class="number">0</span>] = nums[start];  </span><br><span class="line">        <span class="keyword">if</span> (dp.length == <span class="number">1</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> dp[<span class="number">0</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        dp[<span class="number">1</span>] = Math.max(nums[start], nums[start + <span class="number">1</span>]);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">            dp[i] = Math.max(dp[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + nums[start + <span class="number">2</span>]);  </span><br><span class="line">            start++;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> dp[dp.length - <span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 方法二：直接交换  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">rob1</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span> &#123;  </span><br><span class="line">        <span class="comment">// x为上上层的最大值，y为上一层的最大值。  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>, y = <span class="number">0</span>;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; end; i++) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> Math.max(x + nums[i], y);  </span><br><span class="line">            x = y;  </span><br><span class="line">            y = temp;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> y;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="337-打家劫舍-III">337 打家劫舍 III</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/house-robber-iii" >https://leetcode.cn/problems/house-robber-iii<i class="fas fa-external-link-alt"></i></a>)</p><p>动态规划其实就是使用状态转移容器来记录状态的变化，这里可以使用一个长度为 2 的数组，记录当前节点偷与不偷所得到的的最大金钱。</p><p><strong>这道题目算是树形 dp 的入门题目，因为是在树上进行状态转移，我们在讲解二叉树的时候说过递归三部曲，那么下面我以递归三部曲为框架，其中融合动规五部曲的内容来进行讲解</strong>。</p><p><strong>递归三部曲：</strong></p><ol><li class="lvl-3"><p>确定递归函数的参数和返回值。求一个节点两个状态的金钱值，返回值就是一个长度为 2 的数组。<strong>本题 dp 数组就是一个长度为 2 的数组</strong></p></li><li class="lvl-3"><p>确定终止条件。遇到空节点返回。</p></li><li class="lvl-3"><p>确定遍历顺序。后序遍历。</p></li></ol><p><strong>动规五部曲：</strong></p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：下标 0 表示不偷的最大，下标 1 表示偷的最大。</p></li><li class="lvl-3"><p>递推公式即单层递归的逻辑：<code>dp[0] = cur-&gt;val + left[0] + right[0]</code>，<code>dp[1] = max(left[0], left[1]) + max(right[0], right[1])</code>。（分为两种情况，偷/不偷：<em>偷当前节点 <code>dp[1]</code>，值为当前节点值 + 不偷左右的节点的值；不偷当前节点 <code>dp[0]</code>，值为左孩子偷/不偷的最大值 + 右孩子偷/不偷的最大值</em>）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 0, dp[1] = 0</code>，这里的初始化与递归的终止条件相。</p></li><li class="lvl-3"><p>遍历顺序：后序遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">rob</span><span class="params">(TreeNode root)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span>[] dp = robDFS(root);  </span><br><span class="line">    <span class="keyword">return</span> Math.max(dp[<span class="number">0</span>], dp[<span class="number">1</span>]);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span>[] robDFS(TreeNode root) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>[] left = robDFS(root.left);  </span><br><span class="line">    <span class="type">int</span>[] right = robDFS(root.right);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;Math.max(left[<span class="number">0</span>], left[<span class="number">1</span>]) + Math.max(right[<span class="number">0</span>], right[<span class="number">1</span>]), root.val + left[<span class="number">0</span>] + right[<span class="number">0</span>]&#125;;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="198-打家劫舍-2">198 打家劫舍</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0198.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D.html" >https://programmercarl.com/0198.打家劫舍.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="213-打家劫舍-II-2">213 打家劫舍 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0213.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DII.html" >https://programmercarl.com/0213.打家劫舍II.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="337-打家劫舍-III-2">337 打家劫舍 III</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0337.%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8DIII.html" >https://programmercarl.com/0337.打家劫舍III.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：都是看了解析写出。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-26 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="树形dp" scheme="https://kiml.github.io/tags/%E6%A0%91%E5%BD%A2dp/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十七天-322零钱兑换、279完全平方数、139单词拆分</title>
    <link href="https://kiml.github.io/posts/f80db845/"/>
    <id>https://kiml.github.io/posts/f80db845/</id>
    <published>2024-06-25T01:07:33.000Z</published>
    <updated>2024-06-25T08:39:26.748Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：322 递推公式看了题解。279 与 322 一样，AC 了。139 用回溯超时。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-25 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="322-零钱兑换">322 零钱兑换</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/coin-change" >https://leetcode.cn/problems/coin-change<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：填满 i（包括 i）这么大容积的包，需要的最小个数为 <code>dp[i]</code></p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.min(dp[i], dp[i - coin] + 1)</code>。（这里比较难想，<mark>背包放这个硬币的计算为不放的结果加一</mark>）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 0</code>。背包大小为 0，方法数也为 0。（<em>根据题中给出的示例 3</em>）</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历（<em>完全背包</em>）。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：  </span></span><br><span class="line"><span class="comment"> * 1. 硬币获取可以重复（完全背包）  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> coins 硬币数组  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> amount 数量  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">coinChange</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> amount)</span> &#123;  </span><br><span class="line">    <span class="comment">// dp 表示凑成金额所需要的最小个数  </span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];  </span><br><span class="line">    Arrays.fill(dp, amount + <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> coin; i &lt; dp.length; i++) &#123;  </span><br><span class="line">            <span class="keyword">if</span>(dp[i - coin] != amount + <span class="number">1</span>) &#123;  </span><br><span class="line">                dp[i] = Math.min(dp[i], dp[i- coin] + <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[amount] == amount + <span class="number">1</span> ? -<span class="number">1</span> : dp[amount];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="279-完全平方数">279 完全平方数</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/perfect-squares" >https://leetcode.cn/problems/perfect-squares<i class="fas fa-external-link-alt"></i></a>)</p><p>和上题完全一样，区别只有取值数组的值需要自己计算。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：背包大小为n，从1-根号n之间取数  </span></span><br><span class="line"><span class="comment"> * 1. 数可以重复取值，完全背包  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 和为n  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numSquares</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="comment">// dp[i] 表示和为n的完全平方数的最小数量  </span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">    Arrays.fill(dp, n + <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> (<span class="type">int</span>) Math.sqrt(n);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= num; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i * i; j &lt; dp.length; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (dp[j - i * i] != n + <span class="number">1</span>) &#123;  </span><br><span class="line">                dp[j] = Math.min(dp[j], dp[j - i * i] + <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[n];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="139-单词拆分">139 单词拆分</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/word-break" >https://leetcode.cn/problems/word-break<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回溯方法。这样写会超时🤕</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;  </span><br><span class="line">    wordDict.sort(Comparator.comparingInt(String::length));  </span><br><span class="line">    <span class="keyword">return</span> wordBreakBFS(s, wordDict, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;());  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">wordBreakBFS</span><span class="params">(String s, List&lt;String&gt; wordDict, List&lt;String&gt; word)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">join</span> <span class="operator">=</span> String.join(<span class="string">&quot;&quot;</span>, word);  </span><br><span class="line">    <span class="keyword">if</span> (s.length() &lt;= join.length()) &#123;  </span><br><span class="line">        <span class="keyword">return</span> s.equals(String.join(<span class="string">&quot;&quot;</span>, word));  </span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!s.startsWith(join)) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (String string : wordDict) &#123;  </span><br><span class="line">        word.add(string);  </span><br><span class="line">        <span class="type">boolean</span> <span class="variable">b</span> <span class="operator">=</span> wordBreakBFS(s, wordDict, word);  </span><br><span class="line">        <span class="keyword">if</span> (b) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        word.remove(word.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="322-零钱兑换-2">322 零钱兑换</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0322.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2.html" >https://programmercarl.com/0322.零钱兑换.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="279-完全平方数-2">279 完全平方数</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0279.%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0.html" >https://programmercarl.com/0279.完全平方数.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="139-单词拆分-2">139 单词拆分</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0139.%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86.html" >https://programmercarl.com/0139.单词拆分.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：字符串长度为 i，<code>dp[i]</code> 表示是否可以拆分，可以返回 true。</p></li><li class="lvl-3"><p>递推公式：如果 <code>dp[j]</code> 为 true，并且字符串下标 <code>j-i</code> 截取的字符在字典内，说明可以拆分。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = true</code>。初始值为了保证后续计算不会一直为 false。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历（<em>完全背包</em>）。由于是排列问题，所以先遍历背包大小。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态规划</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span>[] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length() + <span class="number">1</span>];  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="literal">true</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (String word : wordDict) &#123;  </span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> word.length();  </span><br><span class="line">            <span class="keyword">if</span> (i &gt;= len &amp;&amp; dp[i - len] &amp;&amp; word.equals(s.substring(i - len, i))) &#123;  </span><br><span class="line">                dp[i] = <span class="literal">true</span>;  </span><br><span class="line">                <span class="keyword">break</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[s.length()];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 回溯记忆法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] memo;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">wordBreak</span><span class="params">(String s, List&lt;String&gt; wordDict)</span> &#123;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()];</span><br><span class="line">        set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;(wordDict);</span><br><span class="line">        <span class="keyword">return</span> backtracking(s, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">backtracking</span><span class="params">(String s, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="comment">// System.out.println(startIndex);</span></span><br><span class="line">        <span class="keyword">if</span> (startIndex == s.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (memo[startIndex] == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">sub</span> <span class="operator">=</span> s.substring(startIndex, i + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 拆分出来的单词无法匹配</span></span><br><span class="line">            <span class="keyword">if</span> (!set.contains(sub)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;                </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">res</span> <span class="operator">=</span> backtracking(s, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (res) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 这里是关键，找遍了startIndex~s.length()也没能完全匹配，标记从startIndex开始不能找到</span></span><br><span class="line">        memo[startIndex] = -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;状态：322 递推公式看了题解。279 与 322 一样，AC 了。139 用回溯超时。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-25 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="完全背包" scheme="https://kiml.github.io/tags/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>面试 Redis</title>
    <link href="https://kiml.github.io/posts/25de1bd9/"/>
    <id>https://kiml.github.io/posts/25de1bd9/</id>
    <published>2024-06-24T13:09:59.000Z</published>
    <updated>2024-06-25T07:51:44.404Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br><br>❗表示必掌握，❔表示基本不会问</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-24 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="什么是-Redis">什么是 Redis</h2><p>Redis(Remote Dictionary Server) 是一个使用 C 语言编写的，开源的（BSD 许可）高性能非关系型（NoSQL）的键值对数据库。</p><p>Redis 可以存储键和五种不同类型的值之间的映射。键的类型只能为字符串，值支持五种数据类型：字符串、列表、集合、散列表、有序集合。</p><h3 id="什么是-NoSQL？">什么是 NoSQL？</h3><p>NoSQL 的全称是 Not-Only SQL，指的是非关系型数据库，它是关系型数据库的补充，没有表与表之间的关系，主要用于海量数据的处理问题。</p><h3 id="除了-Redis，你还了解其它的-NoSQL-吗">除了 Redis，你还了解其它的 NoSQL 吗?</h3><p>nosql 数据库有很多，比如 HBase、MongoDB、Memcached 等，Redis 相比于其他的 nosql 而言，效率高，数据结构比较丰富。</p><ul class="lvl-0"><li class="lvl-2"><p>MongoDB</p><ul class="lvl-2"><li class="lvl-6">高性能、无模式的文档型数据库 (一个文档相当于关系数据库中的一条记录，格式是 xml 或者 json 等)，支持二级索引，非常适合文档化格式的存储及查询。MongoDB 的官方定位是通用数据库，确实和 MySQL 有些像，现在也很流行，但它还是有事务、join 等短板，在事务、复杂查询应用下无法取代关系型数据库。但 MongoDB 更注重庞大数据的存储和操作，但不适合用于临时存储的缓存，如果将数据做缓存使用，还是 Redis 性能更高。</li></ul></li><li class="lvl-2"><p>Redis</p><ul class="lvl-2"><li class="lvl-6">内存型 Key/Value 系统，读写性能非常好，支持操作原子性，很适合用来做高速缓存。</li></ul></li><li class="lvl-2"><p>HBase</p><ul class="lvl-2"><li class="lvl-6">存储容量大，一个表可以容纳上亿行、上百万列，可应对超大数据量要求扩展简单的需求。</li></ul></li></ul><h2 id="Redis-有哪些优缺点？">Redis 有哪些优缺点？</h2><p>优点</p><ul class="lvl-0"><li class="lvl-2"><p>读写性能优异。Redis 能读的速度是 110000 次/s，写的速度是 81000 次/s。</p></li><li class="lvl-2"><p>支持数据持久化。支持 AOF 和 RDB 两种持久化方式。</p></li><li class="lvl-2"><p>支持事务。Redis 的所有操作都是原子性的，同时 Redis 还支持对几个操作合并后的原子性执行。</p></li><li class="lvl-2"><p>数据结构丰富。除了支持 string 类型的 value 外还支持 hash、set、zset、list 等数据结构。</p></li><li class="lvl-2"><p>支持主从复制。主机会自动将数据同步到从机，可以进行读写分离。缺点</p></li><li class="lvl-2"><p>数据库容量受到物理内存的限制，不能用作海量数据的高性能读写。因此 Redis 适合的场景主要局限在较小数据量的高性能操作和运算上。</p></li><li class="lvl-2"><p>Redis 不具备自动容错和恢复功能。主机从机的宕机都会导致前端部分读写请求失败，需要等待机器重启或者手动切换前端的 IP 才能恢复。</p></li><li class="lvl-2"><p>数据不同步。主机宕机，宕机前有部分数据未能及时同步到从机，切换 IP 后还会引入数据不一致的问题，降低了系统的可用性。</p></li><li class="lvl-2"><p>Redis 较难支持在线扩容，在集群容量达到上限时在线扩容会变得很复杂。为避免这一问题，运维人员在系统上线时必须确保有足够的空间，这对资源造成了很大的浪费。</p></li></ul><h2 id="为什么要用-Redis-为什么要用缓存？">为什么要用 Redis/为什么要用缓存？</h2><p><strong>高性能</strong><br>假如用户第一次访问数据库中的某些数据。这个过程会比较慢，因为是从硬盘上读取的。将该用户访问的数据存在数缓存中，这样下一次再访问这些数据的时候就可以直接从缓存中获取了。操作缓存就是直接操作内存，所以速度相当快。如果数据库中的对应数据改变的之后，同步改变缓存中相应的数据即可！<br><strong>高并发</strong><br>直接操作缓存能够承受的请求是远远大于直接访问数据库的，所以我们可以考虑把数据库中的部分数据转移到缓存中去，这样用户的一部分请求会直接到缓存这里而不用经过数据库。</p><h2 id="为什么要用-Redis-而不用-map-guava-做缓存">为什么要用 Redis 而不用 map/guava 做缓存?</h2><p>缓存分为本地缓存和分布式缓存。以 Java 为例，使用自带的 map 或者 guava 实现的是本地缓存，最主要的特点是轻量以及快速，生命周期随着 jvm 的销毁而结束，并且在多实例的情况下，每个实例都需要各自保存一份缓存，缓存不具有一致性。</p><p>使用 redis 或 memcached 之类的称为分布式缓存，在多实例的情况下，各实例共用一份缓存数据，缓存具有一致性。缺点是需要保持 redis 或 memcached 服务的高可用，整个程序架构上较为复杂。</p><h3 id="redis-与-Memcached-的区别是什么？为什么不选-Memcached">redis 与 Memcached 的区别是什么？为什么不选 Memcached?</h3><ol><li class="lvl-3"><p>memcached 所有的值均是简单的字符串，且只支持 k/v 类型，redis 作为其替代者，支持更为丰富的数据类型。</p></li><li class="lvl-3"><p>redis 可以持久化其数据，memcached 只用做缓存提升性能，不能做持久化。</p></li><li class="lvl-3"><p>memcached 存储数据有限制：1M 【大于 1M，认为就行分割】（内存碎片）</p></li><li class="lvl-3"><p>memcached 集群数据没有复制和同步机制（崩溃不会影响程序，会从数据库中取数据）。</p></li><li class="lvl-3"><p>memcached 内存不能及时回收，它只有 LRU(算法) 这一种方式，而 redis 有多种内存回收方式。</p></li></ol><h2 id="Redis-为什么这么快？">Redis 为什么这么快？</h2><ol><li class="lvl-3"><p>完全基于内存，绝大部分请求是纯粹的内存操作，非常快速。数据存在内存中，类似于 HashMap，HashMap 的优势就是查找和操作的时间复杂度都是 O(1)；</p></li><li class="lvl-3"><p>数据结构简单，对数据操作也简单，Redis 中的数据结构是专门进行设计的；</p></li><li class="lvl-3"><p>采用单线程，避免了不必要的上下文切换和竞争条件，也不存在多进程或者多线程导致的切换而消耗 CPU，不用去考虑各种锁的问题，不存在加锁释放锁操作，没有因为可能出现死锁而导致的性能消耗；</p></li><li class="lvl-3"><p>使用多路 I/O 复用模型，非阻塞 IO；</p></li><li class="lvl-3"><p>使用底层模型不同，它们之间底层实现方式以及与客户端之间通信的应用协议不一样，Redis 直接自己构建了 VM 机制 ，因为一般的系统调用系统函数的话，会浪费一定的时间去移动和请求；</p></li></ol><h2 id="Redis-的主要缺点是什么？">Redis 的主要缺点是什么？</h2><ol><li class="lvl-3"><p>[[07 Redis面试#在工作中，如果数据库修改了数据，那就跟redis数据不同步了，此时该办？（缓存双写一致性问题）|缓存和数据库双写一致性问题]]</p></li><li class="lvl-3"><p>[[07 Redis面试#缓存雪崩|缓存雪崩问题]]</p></li><li class="lvl-3"><p>[[07 Redis面试#缓存穿透|缓存穿透问题]]</p></li><li class="lvl-3"><p>[[07 Redis面试#那怎么解决缓存的并发竞争问题？比如多个子系统去set一个key但最后执行顺序和我们期望顺序不一样。|缓存的并发竞争问题]]</p></li></ol><h2 id="数据类型">数据类型</h2><h3 id="Redis-的数据类型有哪些？它的数据操作是怎么样的？">Redis 的数据类型有哪些？它的数据操作是怎么样的？</h3><ul class="lvl-0"><li class="lvl-2"><p>数据类型</p><ul class="lvl-2"><li class="lvl-6">string、hash、list(有序、可重复)、set(无序、不可重复)、zset(不可重复，基于 score 实现排序)</li></ul></li><li class="lvl-2"><p>数据操作</p><ul class="lvl-2"><li class="lvl-6">Redis 中的数据存储方式是 key-value 形式</li><li class="lvl-6">Redis 不能保存 JAVA 对象，需要转为 JSON 对象后存入 Redis</li></ul></li></ul><table><thead><tr><th>数据类型</th><th>可以存储的值</th><th>操作</th><th>应用场景</th></tr></thead><tbody><tr><td>String</td><td>字符串、整数或浮点数</td><td>1.对整个字符串或者字符串的其中一部分执行操作 2.对整数和浮点数执行自增或自减操作</td><td>做简单的键值对缓存</td></tr><tr><td>List</td><td>列表</td><td>1.从两端压入或弹出元素 2.对单个或多个元素进行修剪，只保留一个范围内的元素</td><td>存储一些列表型的数据结构，类似粉丝列表、文章的评论列表之类的数据</td></tr><tr><td>Set</td><td>无序集合</td><td>1.添加、获取、移除单个元素 2.检查一个元素是否在集合中 3.计算交集、并集、差集 从集合里面随机获取元素</td><td>交集、并集、差集的操作，比如两人的粉丝列表做交集</td></tr><tr><td>Hash</td><td>包含键值对的无序散列表</td><td>1.添加、获取、移除单个键值对 2.获取所有键值对 3.检查某个键是否存在</td><td>结构化的数据，比如一个对象</td></tr><tr><td>ZSet</td><td>有序集合</td><td>1.添加、获取、移除元素 2.根据分值范围或成员来获取元素 3.计算一个键的排名</td><td>去重，但可以排序，如获取前几名用户</td></tr></tbody></table><h3 id="Redis-的应用场景">Redis 的应用场景</h3><ol><li class="lvl-3"><p>计数器</p><ul class="lvl-2"><li class="lvl-6">可以对 String 进行自增自减运算，从而实现计数器功能。Redis 这种内存型数据库的读写性能非常高，很适合存储频繁读写的计数量。</li></ul></li><li class="lvl-3"><p>缓存</p><ul class="lvl-2"><li class="lvl-6">将热点数据放到内存中，设置内存的最大使用量以及淘汰策略来保证缓存的命中率。</li></ul></li><li class="lvl-3"><p>会话缓存</p><ul class="lvl-2"><li class="lvl-6">可以使用 Redis 来统一存储多台应用服务器的会话信息。当应用服务器不再存储用户的会话信息，也就不再具有状态，一个用户可以请求任意一个应用服务器，从而更容易实现高可用性以及可伸缩性。</li></ul></li><li class="lvl-3"><p>全页缓存（FPC）</p><ul class="lvl-2"><li class="lvl-6">除基本的会话 token 之外，Redis 还提供很简便的 FPC 平台。以 Magento 为例，Magento 提供一个插件来使用 Redis 作为全页缓存后端。此外，对 WordPress 的用户来说，Pantheon 有一个非常好的插件 wp-redis，这个插件能帮助你以最快速度加载你曾浏览过的页面。</li></ul></li><li class="lvl-3"><p>查找表</p><ul class="lvl-2"><li class="lvl-6">例如 DNS 记录就很适合使用 Redis 进行存储。查找表和缓存类似，也是利用了 Redis 快速的查找特性。但是查找表的内容不能失效，而缓存的内容可以失效，因为缓存不作为可靠的数据来源。</li></ul></li><li class="lvl-3"><p>消息队列 (发布/订阅功能)</p><ul class="lvl-2"><li class="lvl-6">List 是一个双向链表，可以通过 lpush 和 rpop 写入和读取消息。不过最好使用 Kafka、RabbitMQ 等消息中间件。</li></ul></li><li class="lvl-3"><p>分布式锁实现</p><ul class="lvl-2"><li class="lvl-6">在分布式场景下，无法使用单机环境下的锁来对多个节点上的进程进行同步。可以使用 Redis 自带的 SETNX 命令实现分布式锁，除此之外，还可以使用官方提供的 RedLock 分布式锁实现。</li></ul></li><li class="lvl-3"><p>其它</p><ul class="lvl-2"><li class="lvl-6">Set 可以实现交集、并集等操作，从而实现共同好友等功能。ZSet 可以实现有序性操作，从而实现排行榜等功能。</li></ul></li></ol><h3 id="Redis-应用场景（根据类型）">Redis 应用场景（根据类型）</h3><ul class="lvl-0"><li class="lvl-2"><p>String</p><ul class="lvl-2"><li class="lvl-6">适合最简单的 k-v 存储，类似于 memcached 的存储结构，短信验证码，配置信息等，就用这种类型来存储。</li></ul></li><li class="lvl-2"><p>Hash</p><ul class="lvl-2"><li class="lvl-6">一般 key 为 ID 或者唯一标示，value 对应的就是详情了。如商品详情，个人信息详情，新闻详情等。</li></ul></li><li class="lvl-2"><p>List</p><ul class="lvl-2"><li class="lvl-6">因为 list 是有序的，比较适合存储一些有序且数据相对固定的数据。如省市区表、字典表等。因为 list 是有序的，适合根据写入的时间来排序，如：最新的***，消息队列等。</li></ul></li><li class="lvl-2"><p>Set</p><ul class="lvl-2"><li class="lvl-6">可以简单的理解为 ID-List 的模式，如微博中一个人有哪些好友，set 最牛的地方在于，可以对两个 set 提供交集、并集、差集操作。例如：查找两个人共同的好友等。</li></ul></li><li class="lvl-2"><p>ZSet</p><ul class="lvl-2"><li class="lvl-6">自动会根据 score 的值进行排序。比较适合类似于 top 10 等不根据插入的时间来排序的数据。</li></ul></li></ul><h2 id="Redis-持久化">Redis 持久化</h2><h3 id="什么是-Redis-持久化？">什么是 Redis 持久化？</h3><ul class="lvl-0"><li class="lvl-2"><p>持久化就是把内存的数据写到磁盘中去，防止服务宕机了内存数据丢失。</p></li></ul><h3 id="Redis-的持久化机制是什么？各自的优缺点？">Redis 的持久化机制是什么？各自的优缺点？</h3><h4 id="RDB">RDB</h4><ul class="lvl-0"><li class="lvl-2"><p>简述</p><ul class="lvl-2"><li class="lvl-6">RDB 是二进制快照形式，数据体量小，保存效率高，但丢失风险也较大，因为它是定时定量更改才会自动持久化，无法实时存储，如果在快照之前丢失，则无法找回。</li></ul></li><li class="lvl-2"><p>优点</p><ol><li class="lvl-7">只有一个文件 dump.rdb，方便持久化。</li><li class="lvl-7">容灾性好，一个文件可以保存到安全的磁盘。</li><li class="lvl-7">性能最大化，fork 子进程来完成写操作，让主进程继续处理命令，所以是 IO 最大化。使用单独子进程来进行持久化，主进程不会进行任何 IO 操作，保证了 redis 的高性能</li><li class="lvl-7">相对于数据集大时，比 AOF 的启动效率更高。</li></ol></li><li class="lvl-2"><p>缺点</p><ol><li class="lvl-7">数据安全性低。RDB 是间隔一段时间进行持久化，如果持久化之间 redis 发生故障，会发生数据丢失。所以这种方式更适合数据要求不严谨的时候)</li></ol></li></ul><h4 id="AOF">AOF</h4><ul class="lvl-0"><li class="lvl-2"><p>简述</p><ul class="lvl-2"><li class="lvl-6">AOF 是过程命令形式，数据体量大 (可以用 AOF 重写解决该问题)，效率低于 RDB，记录每个操作，存储格式也更复杂，但数据相对完整 (最快可以每秒同步一次)，且弥补了 RDB 不能实时存储的缺点。</li></ul></li><li class="lvl-2"><p>优点</p><ol><li class="lvl-7">数据安全，aof 持久化可以配置 appendfsync 属性，有 always，每进行一次 命令操作就记录到 aof 文件中一次。</li><li class="lvl-7">通过 append 模式写文件，即使中途服务器宕机，可以通过 redis-check-aof 工具解决数据一致性问题。</li><li class="lvl-7">AOF 机制的 rewrite 模式。AOF 文件没被 rewrite 之前（文件过大时会对命令 进行合并重写），可以删除其中的某些命令（比如误操作的 flushall）)</li></ol></li><li class="lvl-2"><p>缺点</p><ol><li class="lvl-7">AOF 文件比 RDB 文件大，且恢复速度慢。</li><li class="lvl-7">数据集大的时候，比 rdb 启动效率低。</li></ol></li></ul><h5 id="AOF-数据体量大，那有什么办法可以解决这个问题吗？">AOF 数据体量大，那有什么办法可以解决这个问题吗？</h5><ul class="lvl-0"><li class="lvl-2"><p>Redis 中引入了 AOF 重写机制可以压缩文件体积——执行压缩命令即可。</p></li><li class="lvl-2"><p>AOF 重写可以降低磁盘占用量，也能提高数据恢复效率，它会对同一数据的多条写命令合并为一条写命令，且为了防止数据量过大造成缓冲区溢出，每条指令最多为 64 个元素。</p></li><li class="lvl-2"><p>AOF 重写其实是一个同步开启的子进程，Redis 执行指令时，子进程也会开启重写，主进程会将写入的数据同步到子进程，子进程则开始重写 AOF 文件，写完后再返回给主进程，完成 AOF 重写。</p></li></ul><h4 id="选用">选用</h4><ul class="lvl-0"><li class="lvl-2"><p>AOF 文件比 RDB 更新频率高，优先使用 AOF 还原数据。</p></li><li class="lvl-2"><p>AOF 比 RDB 更安全也更大</p></li><li class="lvl-2"><p>RDB 性能比 AOF 好</p></li><li class="lvl-2"><p>如果两个都配了优先加载 AOF</p></li><li class="lvl-2"><p>如果对数据非常敏感用 AOF，如果追求大数据集的恢复速度选 RDB。</p></li></ul><h3 id="Redis-持久化数据和缓存怎么做扩容？">Redis 持久化数据和缓存怎么做扩容？</h3><ul class="lvl-0"><li class="lvl-2"><p>如果 Redis 被当做缓存使用，使用一致性哈希实现动态扩容缩容。</p></li><li class="lvl-2"><p>如果 Redis 被当做一个持久化存储使用，必须使用固定的 keys-to-nodes 映射关系，节点的数量一旦确定不能变化。否则的话 (即 Redis 节点需要动态变化的情况），必须使用可以在运行时进行数据再平衡的一套系统，而当前只有 Redis 集群可以做到这样。</p></li></ul><h2 id="数据删除">数据删除</h2><h3 id="Redis-是怎么进行数据删除的？过期删除策略？">Redis 是怎么进行数据删除的？过期删除策略？</h3><h4 id="三种过期策略">三种过期策略</h4><h5 id="定时删除">定时删除</h5><ul class="lvl-0"><li class="lvl-2"><p>创建一个定时器，当 key 设置过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作。</p></li><li class="lvl-2"><p>这样的好处是及时快速释放内存，坏处时，消耗过多的处理器性能。</p></li></ul><h5 id="惰性删除">惰性删除</h5><ul class="lvl-0"><li class="lvl-2"><p>定时删除策略中，从删除方法来看，必然会导致有 key 过期了但未从 redis 中删除的情况。</p></li><li class="lvl-2"><p>面对这种情况，redis 在操作一个 key 时，会先判断这个值是否过期，若已过期，则删除该 key；若未过期，则进行后续操作。</p></li></ul><h5 id="定期删除（常用）">定期删除（常用）</h5><ul class="lvl-0"><li class="lvl-2"><p>Redis 默认会每秒进行十次过期扫描，过期扫描不会遍历过期字典中所有的 key，而是采用了一种简单的贪心策略。</p><ol><li class="lvl-7">从过期字典中随机 20 个 key；</li><li class="lvl-7">删除这 20 个 key 中已经过期的 key；</li><li class="lvl-7">如果过期的 key 比率超过 1/4，那就重复步骤 1；</li><li class="lvl-7">同时，为了保证过期扫描不会出现循环过度，导致线程卡死现象，算法还增加了扫描时间的上限，默认不会超过 25ms。</li><li class="lvl-7">如果某一时刻，有大量 key 同时过期，Redis 会持续扫描过期字典，造成客户端响应卡顿，因此设置过期时间时，就尽量避免这个问题，在设置过期时间时，可以给过期时间设置一个随机范围，避免同一时刻过期。</li></ol></li><li class="lvl-2"><p>(expires 字典会保存所有设置了过期时间的 key 的过期时间数据，其中，key 是指向键空间中的某个键的指针，value 是该键的毫秒精度的 UNIX 时间戳表示的过期时间。键空间是指该 Redis 集群中保存的所有键。)<br><strong>Redis 中同时使用了惰性过期和定期过期两种过期策略。</strong></p></li></ul><h3 id="怎么判断一个-Key-还有多少时间">怎么判断一个 Key 还有多少时间</h3><ul class="lvl-0"><li class="lvl-2"><p>TTL 命令（命令行）</p><ul class="lvl-2"><li class="lvl-6">正数 -&gt; 剩余时间</li><li class="lvl-6">-1 -&gt; 永久 Key</li><li class="lvl-6">-2 -&gt; Key 已经过期或者不存在</li></ul></li></ul><h3 id="如何配置定期删除执行时间间隔？">如何配置定期删除执行时间间隔？</h3><ul class="lvl-0"><li class="lvl-2"><p>redis 的定时任务默认是 10s 执行一次，如果要修改这个值，可以在 redis.conf 中修改 hz 的值。</p></li><li class="lvl-2"><p>redis.conf 中，hz 默认设为 10，提高它的值将会占用更多的 cpu，当然相应的 redis 将会更快的处理同时到期的许多 key，以及更精确的去处理超时。</p></li><li class="lvl-2"><p>hz 的取值范围是 1~500，通常不建议超过 100，只有在请求延时非常低的情况下可以将值提升到 100。</p></li></ul><h3 id="单线程的-redis，如何知道要运行定时任务">单线程的 redis，如何知道要运行定时任务</h3><ul class="lvl-0"><li class="lvl-2"><p>redis 是单线程的，线程不但要处理定时任务，还要处理客户端请求，线程不能阻塞在定时任务或处理客户端请求上，那么，redis 是如何知道何时该运行定时任务的呢？</p></li><li class="lvl-2"><p>Redis 的定时任务会记录在一个称为最小堆的数据结构中。这个堆中，最快要执行的任务排在堆的最上方。在每个循环周期，Redis 都会将最小堆里面已经到点的任务立即进行处理。处理完毕后，将最快要执行的任务还需要的时间记录下来，这个时间就是接下来处理客户端请求的最大时长，若达到了该时长，则暂时不处理客户端请求而去运行定时任务。</p></li></ul><h3 id="Redis-key-的过期时间和永久有效分别怎么设置？">Redis key 的过期时间和永久有效分别怎么设置？</h3><ul class="lvl-0"><li class="lvl-2"><p>EXPIRE 和 PERSIST 命令。</p></li></ul><h2 id="内存淘汰">内存淘汰</h2><h3 id="Redis-的内存淘汰策略有哪些？">Redis 的内存淘汰策略有哪些？</h3><ul class="lvl-0"><li class="lvl-2"><p>Redis 的内存淘汰策略是指在 Redis 的用于缓存的内存不足时，怎么处理需要新写入且需要申请额外空间的数据。</p></li></ul><table><thead><tr><th>操作的数据集</th><th>内存淘汰策略</th><th>说明</th></tr></thead><tbody><tr><td><strong>设置过期时间的键空间选择性移除</strong>（可能会过期的数据集 server.db[i].expires）</td><td>volatile-lru</td><td>淘汰最近一次使用时间距现在<strong>最久</strong>的数据（Least Recently Used）<strong>最常用</strong></td></tr><tr><td></td><td>volatile-lfu</td><td>淘汰使用<strong>次数最少</strong>的数据（Least Frequently Used）</td></tr><tr><td></td><td>volatile-ttl</td><td>淘汰过期时间最近的数据</td></tr><tr><td></td><td>volatile-random</td><td>淘汰随机数据</td></tr><tr><td><strong>全局的键空间选择性移除</strong>（所有数据集）</td><td>allkeys-lru</td><td>淘汰最近一次使用时间距现在最久的数据</td></tr><tr><td></td><td>allkeys-lfu</td><td>淘汰使用次数最少的数据</td></tr><tr><td></td><td>allkeys-random</td><td>淘汰随机数据</td></tr><tr><td><strong>放弃数据驱逐</strong></td><td>no-enviction</td><td>禁止驱逐数据（redis4.0 中默认策略），会引发错误 OOM(Out Of Memory)</td></tr></tbody></table><ul class="lvl-0"><li class="lvl-2"><p><strong>总结</strong></p><ul class="lvl-2"><li class="lvl-6">Redis 的内存淘汰策略的选取并不会影响过期的 key 的处理。内存淘汰策略用于处理内存不足时的需要申请额外空间的数据；过期策略用于处理过期的缓存数据。</li></ul></li></ul><h3 id="MySQL-里有-2000w-数据，redis-中只存-20w-的数据，如何保证-redis-中的数据都是热点数据？">MySQL 里有 2000w 数据，redis 中只存 20w 的数据，如何保证 redis 中的数据都是热点数据？</h3><ul class="lvl-0"><li class="lvl-2"><p>redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略 (上面的 allkeys-lru，移除最近最少使用的 key)。</p></li></ul><h3 id="Redis-主要消耗什么物理资源？">Redis 主要消耗什么物理资源？</h3><ul class="lvl-0"><li class="lvl-2"><p>内存。</p></li></ul><h3 id="Redis-的内存用完了会发生什么？">Redis 的内存用完了会发生什么？</h3><ul class="lvl-0"><li class="lvl-2"><p>如果达到设置的上限，Redis 的写命令会返回错误信息（但是读命令还可以正常返回。）或者你可以配置内存淘汰机制，当 Redis 达到内存上限时会冲刷掉旧的内容。</p></li></ul><h3 id="Redis-如何做内存优化？">Redis 如何做内存优化？</h3><ul class="lvl-0"><li class="lvl-2"><p>可以好好利用 Hash,list,sorted set,set 等集合类型数据，因为通常情况下很多小的 Key-Value 可以用更紧凑的方式存放到一起。尽可能使用散列表（hashes），散列表（是说散列表里面存储的数少）使用的内存非常小，所以你应该尽可能的将你的数据模型抽象到一个散列表里面。比如你的 web 系统中有一个用户对象，不要为这个用户的名称，姓氏，邮箱，密码设置单独的 key，而是应该把这个用户的所有信息存储到一张散列表里面</p></li></ul><h2 id="集群方案">集群方案</h2><h3 id="说一说-Redis-的主从复制">说一说 Redis 的主从复制</h3><ul class="lvl-0"><li class="lvl-2"><p>对于大型网站来说，每秒需要读取的数据远远超过单台 redis 服务所能承受的压力，而写入的数据相对来说较少，这时候用 redis 的主从复制模式可以很好的提升同一个内容的读取速度。</p></li><li class="lvl-2"><p>redis 主从复制模式其实是一个读写分离模型，将主服务器用来处理写操作，从服务器只提供读操作，不过主从复制是所有内容完全一致的，而不是分库分表的，严格来说不算集群。</p></li><li class="lvl-2"><p>主从复制模式最大的问题是只有一个主节点，没有实现高可用，所以还需要哨兵机制来实现高可用。</p></li></ul><h4 id="主从同步过程">主从同步过程</h4><ul class="lvl-0"><li class="lvl-2"><p>当启动一个 slave node 的时候，它会发送一个 <code>PSYNC &lt;runid&gt; &lt;offset&gt;</code> 命令给 master node。</p></li><li class="lvl-2"><p>如果这是 slave node 初次连接到 master node，那么会触发一次 <code>full resynchronization</code> 全量复制（<strong>接收命令判断 runid 是否匹配，判定 offset 是否在复制缓冲区中</strong>）。此时 master 会启动一个后台线程，开始生成一份 <code>RDB</code> 快照文件，</p><ul class="lvl-2"><li class="lvl-6">同时还会将从客户端 client 新收到的所有写命令缓存在 <code>replication buffer</code>（redis server 会为每一个连接到自己的客户端创建一个 replication buffer，用来缓存主库执行的命令）中。<code>RDB</code> 文件生成完毕后， master 会将这个 <code>RDB</code> 发送给 slave，slave 会先<strong>写入本地磁盘，然后再从本地磁盘加载到内存</strong>中，过程中基于旧的数据对外提供服务。<ul class="lvl-4"><li class="lvl-10">如果 <code>replication buffer</code> 写满了（client-output-buffer-limit），无论客户端是普通客户端还是从库，只能断开跟这个客户端的连接了。这样从库全量同步失败，只能再次尝试全量同步。</li></ul></li><li class="lvl-6">接着 master 会将内存中缓存的写命令发送到 slave，slave 也会同步这些数据。<ul class="lvl-4"><li class="lvl-10">如果 slave node 开启了 AOF，那么立即执行重写 AOF</li></ul></li></ul></li><li class="lvl-2"><p>slave node 如果跟 master node 有网络故障，断开了连接，会自动重连，连接之后 master node 仅会复制给 slave 部分缺少的数据。（主库的写命令，除了传给从库后，还会写入 <code>repl_backlog_buffer</code>）</p><ul class="lvl-2"><li class="lvl-6">如果从给的 runid 和 offset 都是对的，那么主服务器就会从上次同步的 offset 位置开始进行增量同步</li><li class="lvl-6">如果 offset 已经小于了主的复制缓冲区中最小的那个偏移量，就会进行全量复制</li><li class="lvl-6">切换了主服务器也会进行全量复制</li></ul></li></ul><p>![[Pasted image 20221107210154.png|600]]</p><h3 id="什么是-Redis-哨兵？">什么是 Redis 哨兵？</h3><ul class="lvl-0"><li class="lvl-2"><p>sentinel(哨兵) 是用于监控 redis 集群中 Master 状态的工具，其本质就是一个独立运行的进程，是 Redis 的高可用解决方案。</p></li><li class="lvl-2"><p>sentinel 可以监视一个或者多个 redis master 服务，以及这些 master 服务的所有从服务；当某个 master 服务下线时，自动将该 master 下的某个从服务升级为 master 服务替代已下线的 master 服务继续处理请求，并且其余从节点开始从新的主节点复制数据。（它会直接修改配置文件，来实现修改主服务器）</p></li><li class="lvl-2"><p>在 redis 安装完成后，会有一个 redis-sentinel 的文件，这就是启动 sentinel 的脚本文件，同时还有一个 sentinel.conf 文件，这个是 sentinel 的配置文件。</p></li><li class="lvl-2"><p>但哨兵也可能会挂，所以需要对哨兵也实现高可用（<strong>集群</strong>）。</p></li></ul><h4 id="哨兵的核心知识">哨兵的核心知识</h4><ul class="lvl-0"><li class="lvl-2"><p>哨兵至少需要 3 个实例，来保证自己的健壮性。</p></li><li class="lvl-2"><p>哨兵 + redis 主从的部署架构，是不保证数据零丢失的，只能保证 redis 集群的高可用性。</p></li><li class="lvl-2"><p>对于哨兵 + redis 主从这种复杂的部署架构，尽量在测试环境和生产环境，都进行充足的测试和演练。</p></li></ul><h3 id="redis-cluster-集群">redis cluster 集群</h3><p>![[04 Redis面试 2022-11-07.excalidraw]]</p><h4 id="为什么要搭建-Redis-集群？">为什么要搭建 Redis 集群？</h4><ul class="lvl-0"><li class="lvl-2"><p>Redis 有内置集群 cluster，redis Cluster 是无中心节点的集群架构，本身就是去中心化的，也就是说，每个节点都保存各自的数据和整个集群的状态。每个节点都和其他所有节点连接，而且这些连接保持活跃，这样就保证了我们只需要连接集群中的任意一个节点，就可以获取到其他节点的数据。</p></li><li class="lvl-2"><p>cluster 集群中内置了哨兵机制，不需要再额外启动哨兵程序。</p></li><li class="lvl-2"><p>Redis cluster 为了保证数据的高可用，加入了主从模式，主节点只用来存，从节点只用来取，如果主节点挂掉了，就会在从节点中选取一个来充当主节点。当然，如果通过集群命令，还可以使现在任何一个节点写入。</p></li></ul><h5 id="Redis-集群工作流程">Redis 集群工作流程</h5><ol><li class="lvl-4"><p>通过哈希的方式，将数据分片，每个节点均分存储一定哈希槽 (哈希值) 区间的数据，默认分配了 16384 个槽位</p></li><li class="lvl-4"><p>每份数据分片会存储在多个互为主从的多节点上</p></li><li class="lvl-4"><p>数据写入先写主节点，再同步到从节点 (支持配置为阻塞同步)</p></li><li class="lvl-4"><p>同一分片多个节点间的数据不保持一致性</p></li><li class="lvl-4"><p>读取数据时，当客户端操作的 key 没有分配在该节点上时，redis 会返回转向指令，指向正确的节点</p></li><li class="lvl-4"><p>扩容时时需要需要把旧节点的数据迁移一部分到新节点在 redis cluster 架构下，每个 redis 要放开两个端口号，比如一个是 6379，另外一个就是 加 1w 的端口号，比如 16379。<br>16379 端口号是用来进行节点间通信的，也就是 cluster bus 的东西，cluster bus 的通信，用来进行故障检测、配置更新、故障转移授权。cluster bus 用了另外一种二进制的协议，<code>gossip</code> 协议，用于节点间进行高效的数据交换，占用更少的网络带宽和处理时间。</p></li></ol><h5 id="你知道哪些分布式寻址法？">你知道哪些分布式寻址法？</h5><ul class="lvl-0"><li class="lvl-2"><p>hash 算法（大量缓存重建）</p></li><li class="lvl-2"><p>一致性 hash 算法（自动缓存迁移）+ 虚拟节点（自动负载均衡）</p></li><li class="lvl-2"><p>redis cluster 的 hash slot （槽）算法</p></li></ul><h6 id="你了解一致性哈希吗？">你了解一致性哈希吗？</h6><ul class="lvl-0"><li class="lvl-2"><p>简单来说，一致性 Hash 算法将整个哈希值空间组织成一个虚拟的圆环，整个空间圆按顺时针方向布局，正上方点代表 0，也代表 2^32-1，即一共 2^32 个点组成的圆环称为 Hash 环。</p></li><li class="lvl-2"><p>一致性哈希算法可用于 Redis 的集群搭建，当然这种用法已经过时了，现在可以用 Redis cluster 的哈希槽来替代一致性哈希算法，实现集群搭建。</p></li><li class="lvl-2"><p>使用一致性哈希算法时，多个服务器也会落在这个 Hash 环上，并且能确定各自的位置，这样用户访问的时候，会根据用户 IP 计算出哈希值，对应到哈希环上，并顺时针行走，遇到的第一台服务器就是该用户被分配到的服务器。</p></li><li class="lvl-2"><p>但是一致性哈希会有数据倾斜的问题，也就是可能多台服务器聚集在相近的地方，这时就需要将服务器多构建几个虚拟节点，来分散到 Hash 环上的各个位置，来使数据分配的服务器较为均衡，设置的虚拟节点约多，数据分配的越是相对均匀。</p></li></ul><h4 id="Redis-集群是同步复制还是异步复制？是否会有写操作丢失情况？为什么？">Redis 集群是同步复制还是异步复制？是否会有写操作丢失情况？为什么？</h4><ul class="lvl-0"><li class="lvl-2"><p>异步复制。</p><ul class="lvl-2"><li class="lvl-6">Redis 主节点与从节点之间的数据复制是异步复制的，当客户端发送写请求给 master 节点的时候，客户端会直接返回 OK，然后主节点同步到各个从节点中。</li></ul></li><li class="lvl-2"><p>如果主节点没来得及同步给从节点时发生宕机，那么主节点内存中的数据就会丢失。</p></li></ul><h5 id="如果主节点中开启持久化，能不能保证数据不丢失呢？">如果主节点中开启持久化，能不能保证数据不丢失呢？</h5><ul class="lvl-0"><li class="lvl-2"><p>不能。</p><ul class="lvl-2"><li class="lvl-6">主节点宕机后（脑裂也会有相同的数据丢失问题），会自动启动哨兵机制，重新选举新的主节点，如果这时候旧的主节点恢复故障重启了，它就会去同步新的主节点数据，而这时新的主节点并没有同步那之前丢失的数据，旧的主节点的上的数据则会在同步新主节点上数据时，刷新掉，此时数据还是会丢失。</li></ul></li></ul><h5 id="怎么才能保证数据不丢失？或者如保证尽量少的数据丢失？">怎么才能保证数据不丢失？或者如保证尽量少的数据丢失？</h5><ul class="lvl-0"><li class="lvl-2"><p>没办法完全保证数据不丢失。但是可以通过设置主从节点间的同步复制延迟时间来尽量少的数据丢失。</p></li><li class="lvl-2"><p>比如，在 Redis 集群中，在 redis 配置文件中修改同步复制延迟的时间不超过 10s，一但延迟超过这个时间，说明主节点可能出了问题（不一定是宕机），那么配置生效，主节点只能读，不能再写入。</p><ul class="lvl-2"><li class="lvl-6">min-slaves-to-write 1</li><li class="lvl-6">min-slaves-max-lag 10</li><li class="lvl-6">要求至少有 1 个 slave，数据复制和同步的延迟不能超过 10 秒（这样脑裂最多就丢失 10s 数据）</li></ul></li><li class="lvl-2"><p>同时在客户端做降级处理，把数据写到本地磁盘。</p></li></ul><h4 id="什么是-Redis-脑裂？会存在什么问题？">什么是 Redis 脑裂？会存在什么问题？</h4><ul class="lvl-0"><li class="lvl-2"><p>一个集群中的 master 恰好网络故障，导致与 sentinal 联系不上了，sentinal 把另一个 slave 提升为了 master。此时就存在两个 master 了。</p></li><li class="lvl-2"><p>当我们发现的时候，停止掉其中的一个 master，手动切换成 slave，当它连接到提升后的 master 的时候，会开始同步数据，那么自己脑裂期间接收的写数据就被丢失了。</p></li></ul><h4 id="Redis-集群如何选择数据库？">Redis 集群如何选择数据库？</h4><ul class="lvl-0"><li class="lvl-2"><p>Redis 集群目前无法做数据库选择，默认在 0 数据库。</p></li></ul><h4 id="Redis-集群最大节点个数是多少？">Redis 集群最大节点个数是多少？</h4><ul class="lvl-0"><li class="lvl-2"><p>16384 个</p></li></ul><h4 id="生产环境中的-redis-是怎么部署的？">生产环境中的 redis 是怎么部署的？</h4><ul class="lvl-0"><li class="lvl-2"><p>redis cluster，10 台机器，5 台机器部署了 redis 主实例，另外 5 台机器部署了 redis 的从实例，每个主实例挂了一个从实例，5 个节点对外提供读写服务，每个节点的读写高峰 qps 可能可以达到每秒 5 万，5 台机器最多是 25 万读写请求/s。</p></li><li class="lvl-2"><p>机器是什么配置？32G 内存 + 8 核 CPU + 1T 磁盘，但是分配给 redis 进程的是 10g 内存，一般线上生产环境，redis 的内存尽量不要超过 10g，超过 10g 可能会有问题。</p></li><li class="lvl-2"><p>5 台机器对外提供读写，一共有 50g 内存。</p></li><li class="lvl-2"><p>因为每个主实例都挂了一个从实例，所以是高可用的，任何一个主实例宕机，都会自动故障迁移，redis 从实例会自动变成主实例继续提供读写服务。</p></li><li class="lvl-2"><p>你往内存里写的是什么数据？每条数据的大小是多少？商品数据，每条数据是 10kb。100 条数据是 1mb，10 万条数据是 1g。常驻内存的是 200 万条商品数据，占用内存是 20g，仅仅不到总内存的 50%。目前高峰期每秒就是 3500 左右的请求量。其实大型的公司，会有基础架构的 team 负责缓存集群的运维。</p></li></ul><h2 id="缓存异常">缓存异常</h2><h3 id="缓存预热">缓存预热</h3><ul class="lvl-0"><li class="lvl-2"><p>系统上线后，将相关的缓存数据直接加载到缓存系统。这样就可以避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题。用户直接查询事先被预热的缓存数据。<br><strong>解决方法</strong></p></li><li class="lvl-2"><p>自动：使用监听器（web/Spring boot）监听某个事件（项目启动/容器的创建），在事件触发时查询数据库，把一些热门数据提前缓存到 Redis 中</p></li><li class="lvl-2"><p>手动：使用单元测试脚本 动态的往 Redis 中进行数据的添加</p></li></ul><h3 id="缓存雪崩">缓存雪崩</h3><ul class="lvl-0"><li class="lvl-2"><p>缓存同一时间大面积的失效，所以，后面的请求都会落到数据库上，造成数据库短时间内承受大量请求而崩掉。<br><strong>解决方法</strong></p></li><li class="lvl-2"><p>设置缓存的失效时间尽量错开（比如 30 天 + 随机数 (s)），热门数据时间长点，不热门的时间短点。</p></li><li class="lvl-2"><p>设置多级缓存，Nginx 缓存 +redis 缓存 +ehcache 缓存……每一个缓存都是一个集群，相同的数据会在多种服务器进行缓存，可以 100% 解决缓存雪崩。</p></li><li class="lvl-2"><p>侧面解决：优化数据库，提升效率，使用页面静态技术（多级缓存）代替从 redis 中取值。</p></li><li class="lvl-2"><p>限流/降级</p></li><li class="lvl-2"><p>超热数据使用永久 Key（定期维护）</p></li></ul><h3 id="缓存穿透">缓存穿透</h3><ul class="lvl-0"><li class="lvl-2"><p>就是指反复查询一个数据库一定不存在的数据，导致数据库压力过大，这种情况一般只有恶意攻击才会出现。<br><strong>解决方法</strong></p></li><li class="lvl-2"><p>接口层增加校验，如用户鉴权校验，id 做基础校验，id&lt;=0 的直接拦截</p></li><li class="lvl-2"><p>从缓存取不到的数据，在数据库中也没有取到，这时也可以将 key-value 对写为 key-null，缓存有效时间可以设置短点，如 30 秒（设置太长会导致正常情况也没法使用）。这样可以防止攻击用户反复用同一个 id 暴力攻击</p></li><li class="lvl-2"><p>采用布隆过滤器（在海量数据中判断一个数据是否存在），将所有可能存在的数据哈希到一个足够大的 bitmap 中，一个一定不存在的数据会被这个 bitmap 拦截掉，从而避免了对底层存储系统的查询压力。根据 Hash 判断，如果数据不存在，那么一定不存在。</p></li><li class="lvl-2"><p>加密参数，符合加密规则的参数才会被接收</p></li></ul><h3 id="缓存击穿">缓存击穿</h3><ul class="lvl-0"><li class="lvl-2"><p>是指一个热点 key 的 redis 缓存失效，导致大量请求瞬间集中到数据库。和缓存雪崩不同的是，缓存击穿指并发查同一条数据，缓存雪崩是不同数据都过期了，很多数据都查不到从而查数据库。<br><strong>解决方法</strong></p></li><li class="lvl-2"><p>多级缓存</p></li><li class="lvl-2"><p>延长热点数据有效期。</p></li><li class="lvl-2"><p>限流/降级</p></li></ul><h3 id="缓存降级">缓存降级</h3><ul class="lvl-0"><li class="lvl-2"><p>当访问量剧增、服务出现问题（如响应时间慢或不响应）或非核心服务影响到核心流程的性能时，仍然需要保证服务还是可用的，即使是有损服务。系统可以根据一些关键数据进行自动降级，也可以配置开关实现人工降级。</p></li></ul><h3 id="热点数据和冷数据">热点数据和冷数据</h3><ul class="lvl-0"><li class="lvl-2"><p>热点数据，缓存才有价值</p><ul class="lvl-2"><li class="lvl-6">某 IM 产品，生日祝福模块，当天的寿星列表，缓存以后可能读取数十万次。某导航产品，我们将导航信息，缓存以后可能读取数百万次。</li></ul></li><li class="lvl-2"><p>对于冷数据而言，大部分数据可能还没有再次访问到就已经被挤出内存，不仅占用内存，而且价值不大。</p></li><li class="lvl-2"><p>频繁修改的数据，看情况考虑使用缓存</p><ul class="lvl-2"><li class="lvl-6">这个读取接口对数据库的压力很大，但是又是热点数据，这个时候就需要考虑通过缓存手段，减少数据库的压力，比如我们的某助手产品的，点赞数，收藏数，分享数等是非常典型的热点数据，但是又不断变化，此时就需要将数据同步保存到 Redis 缓存，减少数据库压力。</li></ul></li></ul><h2 id="线程模型">线程模型</h2><h3 id="为什么-Redis-是单线程的？">为什么 Redis 是单线程的？</h3><ul class="lvl-0"><li class="lvl-2"><p>Redis 的底层主要是三大部分：IO 多路复用程序 + 队列 + 文件事件分派器。而文件事件分派器就是用来分派执行任务的，且它是单线程的，所以说 Redis 也是单线程的。</p></li><li class="lvl-2"><p>此外，Redis 底层是基于 C 语言所写，且是基于内存运行，所以他的 IO 速度很快，相对来说主要要占用的是 CPU 的资源，如果实用多线程反而会因为线程的切换增大开销，降低效率，对于不是处理海量数据，多用于缓存使用的 Redis 来说，使用单线程是效率最优的。</p></li></ul><h3 id="redis-是单线程的，为什么还需要用它实现分布式锁？">redis 是单线程的，为什么还需要用它实现分布式锁？</h3><p>redis 单线程与分布式锁没有关系。redis 单线程只能保证在 redis 中的读写是按一定顺序执行（reids 不保证原子性，也不会回滚，某条命令运行失败也会继续执行），但在分布式中，是多台机器间的多进程调用，为了保证执行过程中，不被其他进程抢断执行，需要有一个第三方组件来实现分布式锁。即使数据就在 redis 中，也无法保证数据在进行其他服务处理的时候，被其他进程抢走。</p><h3 id="Redis-是单线程的，如何提高多核-CPU-的利用率？">Redis 是单线程的，如何提高多核 CPU 的利用率？</h3><p>可以在同一个服务器部署多个 Redis 的实例，并把他们当作不同的服务器来使用，在某些时候，无论如何一个服务器是不够的， 所以，如果你想使用多个 CPU，你可以考虑一下分区。</p><h2 id="Redis-分区">Redis 分区</h2><h3 id="为什么要做-Redis-分区">为什么要做 Redis 分区</h3><ul class="lvl-0"><li class="lvl-2"><p>分区可以让 Redis 管理更大的内存，Redis 将可以使用所有机器的内存，提升内存和计算能力。</p></li></ul><h3 id="怎么实现-Redis-分区？">怎么实现 Redis 分区？</h3><ul class="lvl-0"><li class="lvl-2"><p>Cluster 集群就很好的实现了 Redis 分区。客户端随机地请求任意一个 redis 实例，然后由 Redis 将请求转发给正确的 Redis 节点。Redis Cluster 实现了一种混合形式的查询路由，但并不是直接将请求从一个 redis 节点转发到另一个 redis 节点，而是在客户端的帮助下直接 redirected 到正确的 redis 节点。</p></li></ul><h3 id="Redis-分区的缺点是什么？">Redis 分区的缺点是什么？</h3><ul class="lvl-0"><li class="lvl-2"><p>涉及多个 key 的操作时可能会比较麻烦一点：比如两个集合 key 在不同的机子上，那就不能直接在 redis 中做交集。</p></li></ul><h3 id="Redis-分区和集群有什么区别？">Redis 分区和集群有什么区别？</h3><ul class="lvl-0"><li class="lvl-2"><p>分区是逻辑概念，即一个 master 可以分为一个 master+n 个 slave。</p></li><li class="lvl-2"><p>集群是系统结构，集群是分区概念的一种实现方式。</p></li></ul><h2 id="分布式问题">分布式问题</h2><h3 id="那怎么解决缓存的并发竞争问题？比如多个子系统去-set-一个-key-但最后执行顺序和我们期望顺序不一样">那怎么解决缓存的并发竞争问题？比如多个子系统去 set 一个 key 但最后执行顺序和我们期望顺序不一样</h3><ul class="lvl-0"><li class="lvl-2"><p>可以采用分布式锁（zookeeper 和 redis 都可以实现分布式锁）的方案。（如果不存在 Redis 的并发竞争 Key 问题，不要使用分布式锁，这样会影响性能）</p></li><li class="lvl-2"><p>基于 zookeeper 临时有序节点可以实现的分布式锁。大致思想为：每个客户端对某个方法加锁时，在 zookeeper 上的与该方法对应的指定节点的目录下，生成一个唯一的瞬时有序节点。 判断是否获取锁的方式很简单，只需要判断有序节点中序号最小的一个。 当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。完成业务流程后，删除对应的子节点释放锁。</p></li><li class="lvl-2"><p>在实践中，当然是从以可靠性为主。所以首推 Zookeeper。</p></li></ul><h3 id="说一说-Redis-分布式锁">说一说 Redis 分布式锁</h3><ul class="lvl-0"><li class="lvl-2"><p>首先，分布式锁是一种思想，是为了解决多机器多进程之间的同步问题，需要引入第三方来做锁处理。</p></li><li class="lvl-2"><p>Redis 分布式锁的加锁，其实就是给 Key 键设置一个值（SET lock_key random_value NX PX 5000，NX 表示键不存在时才设置），其他进程执行前会判断 Redis 中这个 Key 是否有值，如果发现这个 Key 有值了，就说明已有其他进程在执行，则循环等待，超时则获取失败。</p></li><li class="lvl-2"><p>解锁就是将 Key 键删除，为了保证解锁的原子性操作，用 Redis 自带的 LUA 脚本完成操作。</p></li><li class="lvl-2"><p>Redis 做为分布式锁的优点是性能高，缺点是不可靠，比如在 Redis 集群架构中，一旦主节点宕机，新的主节点会给新进程也加锁。</p></li><li class="lvl-2"><p>但不论如何，分布式锁一定会带来性能消耗问题，且实际中使用查询的比例远大于写的比例，除非是重要的敏感数据，不然为了更高的性能，一般会选择舍弃使用分布式锁。</p></li></ul><h3 id="这里为什么要用-Lua-脚本来完成解锁操作？">这里为什么要用 Lua 脚本来完成解锁操作？</h3><ul class="lvl-0"><li class="lvl-2"><p>Redis 只能保证单个指令进入 redis 是单线程原子性的，但不能保证多个命令之间的顺序是原子性的，但是 Lua 指令可以将这个命令绑定，相当于只有一个执行命令，保证它们是顺序执行的。</p></li></ul><h3 id="为什么-Redis-分布式解锁要何证原子性？">为什么 Redis 分布式解锁要何证原子性？</h3><ul class="lvl-0"><li class="lvl-2"><p>主要是怕误将其他客户端的锁解开。</p></li><li class="lvl-2"><p>比如客户端 A 加锁，一段时间之后客户端 A 解锁，在进入 unlock 后执行 jedis.del() 之前，锁突然过期了，此时客户端 B 尝试加锁成功，然后客户端 A 再执行 del() 方法，这时候客户端 A 已经执行过 Random_Value 的判断，虽然和客户端 B 的不一样，但我们总不能每一行代码都做一个值判断吧，这时候客户端 A 就会将客户端 B 的锁给解除了。</p></li></ul><h3 id="Redis-分布式锁应该注意什么？">Redis 分布式锁应该注意什么？</h3><ul class="lvl-0"><li class="lvl-2"><p>加锁的时候，应考虑到执行一半宕机或故障导致没能执行到解锁的命令，产生死锁，所以需要给定一个过期时间，防止死锁。</p></li><li class="lvl-2"><p>解锁要保证原子一致性。</p></li><li class="lvl-2"><p>redis 的解锁就是把 key 删除即可，但是删除的时候不能随便删，比如线程 A 不能删除线程 B 的 key，这个时候 value 就起到作用了，random_value 我们设置为随机值，每一个线程都生成一个随机值作为 random_value，删除 key 的时候先判断随机值是否和本线程的一致，一致的才可以删除。</p></li></ul><h2 id="Redis-事务">Redis 事务</h2><h3 id="Redis-事务的概念">Redis 事务的概念</h3><ul class="lvl-0"><li class="lvl-2"><p>Redis 事务的本质是通过 MULTI、EXEC、WATCH 等一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事务执行命令序列中。</p></li><li class="lvl-2"><p>总结说：redis 事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p></li></ul><h3 id="Redis-事务的三个阶段">Redis 事务的三个阶段</h3><ol><li class="lvl-4"><p>事务开始 MULTI</p></li><li class="lvl-4"><p>命令入队</p></li><li class="lvl-4"><p>事务执行 EXEC</p><ul class="lvl-2"><li class="lvl-6">事务执行过程中，如果服务端收到有 EXEC、DISCARD、WATCH、MULTI 之外的请求，将会把请求放入队列中排队</li></ul></li></ol><h3 id="Redis-事务相关问题">Redis 事务相关问题</h3><ul class="lvl-0"><li class="lvl-2"><p>Redis 事务功能是通过 MULTI、EXEC、DISCARD 和 WATCH 四个原语实现的。（Redis 事务很鸡肋）</p></li></ul><ol><li class="lvl-3"><p>Redis 会将一个事务中的所有命令序列化，然后按顺序执行。</p></li><li class="lvl-3"><p>redis 不支持回滚，“Redis 在事务失败时不进行回滚，而是继续执行余下的命令”， 所以 Redis 的内部可以保持简单且快速。</p></li><li class="lvl-3"><p>如果在一个事务中的命令出现错误，那么所有的命令都不会执行（就是除非你的命令写错了，导致所有命令不执行）；</p></li><li class="lvl-3"><p>如果在一个事务中出现运行错误，那么正确的命令会被执行。</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>WATCH 命令是一个乐观锁，可以为 Redis 事务提供 check-and-set （CAS）行为。 可以监控一个或多个键，一旦其中有一个键被修改（或删除），之后的事务就不会执行，监控一直持续到 EXEC 命令。</p></li><li class="lvl-2"><p>MULTI 命令用于开启一个事务，它总是返回 OK。 MULTI 执行之后，客户端可以继续向服务器发送任意多条命令，这些命令不会立即被执行，而是被放到一个队列中，当 EXEC 命令被调用时，所有队列中的命令才会被执行。</p></li><li class="lvl-2"><p>EXEC：执行所有事务块内的命令。返回事务块内所有命令的返回值，按命令执行的先后顺序排列。 当操作被打断时，返回空值 nil 。</p></li><li class="lvl-2"><p>通过调用 DISCARD，客户端可以清空事务队列，并放弃执行事务， 并且客户端会从事务状态中退出。</p></li><li class="lvl-2"><p>UNWATCH 命令可以取消 watch 对所有 key 的监控。</p></li></ul><h3 id="Redis-事务保证原子性吗？">Redis 事务保证原子性吗？</h3><p>Redis 中，单条命令是原子性执行的，但事务<strong>不保证原子性</strong>，且<strong>没有回滚</strong>，事务过程中任意命令执行失败，其余的命令仍会被执行。</p><h3 id="Redis-事务保证隔离性吗？">Redis 事务保证隔离性吗？</h3><p>Redis 是单进程程序，并且它保证在执行事务时，不会对事务进行中断，事务可以运行直到执行完所有事务队列中的命令为止。因此，Redis 的事务是总是<strong>带有隔离性</strong>的。</p><h2 id="其他问题">其他问题</h2><h3 id="在工作中，如果数据库修改了数据，那就跟-redis-数据不同步了，此时该办？（缓存双写一致性问题）">在工作中，如果数据库修改了数据，那就跟 redis 数据不同步了，此时该办？（缓存双写一致性问题）</h3><ul class="lvl-0"><li class="lvl-2"><p>第一种是硬编码方式；</p><ul class="lvl-2"><li class="lvl-6">让服务的更新和查询分先后进行执行，服务将数据库更新后，再查返更新后的数据，把更新后的数据再更新到 redis。如果有多个服务同时调用，就用 MQ 获取 Mysql 的 binlog 中的修改顺序，依次发送消息给 redis，MySQL 的顺序记录就是先后更改的执行顺序，MQ 根据这个顺序即可保证先后的更新顺序，让 redis 的更新顺序不出问题。</li></ul></li><li class="lvl-2"><p>第二种是 Redis 缓存二次开发解决（MyBatisPlus+redis 整合：餐饮项目中使用到）。</p><ul class="lvl-2"><li class="lvl-6">用 Mybatis 二级缓存对外开放的 cache 接口进行二次开发，Cache 支持 SPI 机制，通过注解来调动相关配置类，通过实现 Mybatis 二级缓存接口 Cache 集成 Redis 缓存，可以自动更新到 MySQL 数据到 Redis 缓存中。</li><li class="lvl-6">为了防止在读写的过程中出现高并发问题，还需要加上 ReentrantReadWriteLock 读写锁，ReentrantLock 只能进入一个线程，ReentrantReadWriteLock 允许多个线程访问，提高高并发，但只支持多个线程读，不支持同时读写或写写。</li><li class="lvl-6">但是以上方式也不能完全解决同步问题，仍存在分布式的高并发问题，如果需要完全保证一致性，就需要使用分布式锁，对每个事务上锁。但这样对系统资源消耗过大，得不偿失，毕竟读取的量是远大于增删改的量的。</li></ul></li></ul><h3 id="假如-Redis-里面有-1-亿个-key，其中有-10W-个-key-是以某个固定的已知前缀开头的，如何将它们全部找出来？">假如 Redis 里面有 1 亿个 key，其中有 10W 个 key 是以某个固定的已知前缀开头的，如何将它们全部找出来？</h3><ul class="lvl-0"><li class="lvl-2"><p>使用 keys 指令可以扫出指定模式的 key 列表。</p></li></ul><h4 id="如果这个-redis-正给线上的业务提供服务，那使用-keys-指令会有什么问题？">如果这个 redis 正给线上的业务提供服务，那使用 keys 指令会有什么问题？</h4><ul class="lvl-0"><li class="lvl-2"><p>由于 redis 是单线程的，而 keys 是遍历查询，每个数据都会遍历一次，所以 keys 指令去查找大量数据会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。</p></li><li class="lvl-2"><p>可替代方式是，可以使用 scan 指令，scan 指令可以无阻塞的提取出指定模式的 key 列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用 keys 指令长。</p></li><li class="lvl-2"><p>但这里要注意的是，scan 指令有一个坑，不会自动释放连接，需要手动释放连接。具体的解决方案我有做笔记。</p></li></ul><h4 id="scan-为什么可以不阻塞提取-key-列表？为什么会有重复问题？">scan 为什么可以不阻塞提取 key 列表？为什么会有重复问题？</h4><ul class="lvl-0"><li class="lvl-2"><p>Scan 命令其实是迭代器方式对数据进行遍历获取，但它是分次进行的，可以在中途返回查到的数据，做到不阻塞，且因为 redis 底层是 Hash 字典，会有扩容和缩容问题，所以 scan 每次都会往前退一定数索开始继续遍历，所以会有重复问题。（具体见笔记）。</p></li></ul><h3 id="使用-Redis-做过异步队列吗，是如何实现的？">使用 Redis 做过异步队列吗，是如何实现的？</h3><ul class="lvl-0"><li class="lvl-2"><p>使用 list 类型保存数据信息，rpush 生产消息，lpop 消费消息，当 lpop 没有消息时，可以 sleep 一段时间，然后再检查有没有信息，如果不想 sleep 的话，可以使用 blpop, 在没有信息的时候，会一直阻塞，直到信息的到来。redis 可以通过 pub/sub 主题订阅模式实现一个生产者，多个消费者，当然也存在一定的缺点，当消费者下线时，生产的消息会丢失。</p></li></ul><h3 id="Redis-如何实现延时队列？">Redis 如何实现延时队列？</h3><p>使用 sortedset，使用时间戳做 score，消息内容作为 key，调用 zadd 来生产消息，消费者使用 zrangbyscore 获取 n 秒之前的数据做轮询处理。</p><h3 id="Redis-回收进程如何工作的？">Redis 回收进程如何工作的？</h3><ol><li class="lvl-3"><p>一个客户端运行了新的命令，添加了新的数据。</p></li><li class="lvl-3"><p>Redis 检查内存使用情况，如果大于 maxmemory 的限制， 则根据设定好的策略进行回收。</p></li><li class="lvl-3"><p>一个新的命令被执行，等等。</p></li><li class="lvl-3"><p>所以我们不断地穿越内存限制的边界，通过不断达到边界然后不断地回收回到边界以下。</p></li><li class="lvl-3"><p>如果一个命令的结果导致大量内存被使用（例如很大的集合的交集保存到一个新的键），不用多久内存限制就会被这个内存使用量超越。</p></li></ol><h3 id="Redis-回收使用的是什么算法？">Redis 回收使用的是什么算法？</h3><p>LRU 算法（将最近最久未使用的页面予以淘汰。）</p><h3 id="Redis-常见性能问题和解决方案？">Redis 常见性能问题和解决方案？</h3><ol><li class="lvl-4"><p>Master 最好不要做任何持久化工作，包括内存快照和 AOF 日志文件，特别是不要启用内存快照做持久化。</p></li><li class="lvl-4"><p>如果数据比较关键，某个 Slave 开启 AOF 备份数据，策略为每秒同步一次。</p></li><li class="lvl-4"><p>为了主从复制的速度和连接的稳定性，Slave 和 Master 最好在同一个局域网内。</p></li><li class="lvl-4"><p>尽量避免在压力较大的主库上增加从库</p></li><li class="lvl-4"><p>Master 调用 BGREWRITEAOF 重写 AOF 文件，AOF 在重写的时候会占大量的 CPU 和内存资源，导致服务 load 过高，出现短暂服务暂停现象。</p></li><li class="lvl-4"><p>为了 Master 的稳定性，主从复制不要用图状结构，用单向链表结构更稳定，即主从关系为：Master&lt;–Slave1&lt;–Slave2&lt;–Slave3…，这样的结构也方便解决单点故障问题，实现 Slave 对 Master 的替换，也即，如果 Master 挂了，可以立马启用 Slave1 做 Master，其他不变。</p></li></ol><h3 id="Redis-官方为什么不提供-Windows-版本？">Redis 官方为什么不提供 Windows 版本？</h3><p>因为目前 Linux 版本已经相当稳定，而且用户量很大，无需开发 windows 版本，反而会带来兼容性等问题。</p><h3 id="一个字符串类型的值能存储最大容量是多少？">一个字符串类型的值能存储最大容量是多少？</h3><p>512M</p><h3 id="Redis-如何做大量数据插入？">Redis 如何做大量数据插入？</h3><p>Redis2.6 开始 redis-cli 支持一种新的被称之为 pipe mode 的新模式用于执行大量数据插入工作。</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;&lt;br&gt;
❗表示必掌握，❔表示基本不会问&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-24 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="面试" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十六天-完全背包、518零钱兑换 II、377组合总和 Ⅳ、CM70爬楼梯（进阶）</title>
    <link href="https://kiml.github.io/posts/b717497e/"/>
    <id>https://kiml.github.io/posts/b717497e/</id>
    <published>2024-06-22T01:08:05.000Z</published>
    <updated>2024-06-25T07:51:44.433Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：看完完全组合的解析之后，完成 518 和 377。CM70就是377。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-22 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="518-零钱兑换-II">518 零钱兑换 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/coin-change-ii/" >https://leetcode.cn/problems/coin-change-ii/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：填满 i（包括 i）这么大容积的包，有 <code>dp[i]</code> 种方法</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] += dp[i - coin]</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 1</code>。假设数组个数为 0，获取 dp[0]，就是 1。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：  </span></span><br><span class="line"><span class="comment"> * 1. 这是一个完全背包的题目（正序）  </span></span><br><span class="line"><span class="comment"> * 2. 求的是组合数量 dp[i] += dp[i - coin];  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> amount 总数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> coins 硬币总和  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 有几种组合方法  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">change</span><span class="params">(<span class="type">int</span> amount, <span class="type">int</span>[] coins)</span> &#123;  </span><br><span class="line">    <span class="comment">// 填满 i（包括 i）这么大容积的包，有 `dp[i]` 种方法  </span></span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[amount + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> coin : coins) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> coin; i &lt; dp.length; i++) &#123;  </span><br><span class="line">            dp[i] += dp[i - coin];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[amount];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="377-组合总和-Ⅳ">377 组合总和 Ⅳ</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/combination-sum-iv" >https://leetcode.cn/problems/combination-sum-iv<i class="fas fa-external-link-alt"></i></a>)</p><p><strong>如果求组合数就是外层 for 循环遍历物品，内层 for 遍历背包</strong>。</p><p><strong>如果求排列数就是外层 for 遍历背包，内层 for 循环遍历物品</strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 完全背包+排列</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums   数组  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> target 总数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 有几种排列</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">combinationSum4</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[target + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (i &gt;= num) &#123;  </span><br><span class="line">                dp[i] += dp[i - num];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[target];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="70-爬楼梯-（进阶）">70 爬楼梯 （进阶）</h3><p>题目链接：(<a class="link"   href="https://kamacoder.com/problempage.php?pid=1067" >https://kamacoder.com/problempage.php?pid=1067<i class="fas fa-external-link-alt"></i></a>)</p><p>就是完全背包 + 排列，解法和上题一模一样。nums 取值为 <code>1- 每次最多爬的阶梯数量</code></p><h2 id="看解析">看解析</h2><h3 id="完全背包">完全背包</h3><p>有 N 件物品和一个最多能背重量为 W 的背包。第 i 件物品的重量是 <code>weight[i]</code>，得到的价值是 <code>value[i] </code>。<strong>每件物品都有无限个（也就是可以放入背包多次）</strong>，求解将哪些物品装入背包里物品价值总和最大。</p><p><strong>完全背包和 01 背包问题唯一不同的地方就是，每种物品有无限件</strong>。</p><p><strong>二维数组</strong>：</p><ol><li class="lvl-3"><p>递推公式：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - item[i][0]] + item[i][1])</code>（即，不重复存放当前物品/重复存放当前物品）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 均为 0。<code>dp[0][j]</code> 为第一格按背包大小取重复值。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    integerBreak(<span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">15</span>&#125;, &#123;<span class="number">3</span>, <span class="number">20</span>&#125;, &#123;<span class="number">4</span>, <span class="number">30</span>&#125;&#125;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] item)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[item.length][n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 纵列初始化为0（数组定义，不用初始化）  </span></span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 横列初始化不一样了  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; dp[<span class="number">0</span>].length &amp;&amp; n &gt;= item[<span class="number">0</span>][<span class="number">0</span>]; j++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][j] = j / item[<span class="number">0</span>][<span class="number">0</span>] * item[<span class="number">0</span>][<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; item.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j - item[i][<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            <span class="comment">// 如果当前物品不能放入，背包值 = 当前值的前一列</span></span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="comment">// 如果当前物品可以放入</span></span><br><span class="line"><span class="comment">// 比较前一列和（范围大小还是[0, i]，如果是 i - 1，范围大小就是[0, i - 1]）</span></span><br><span class="line"><span class="comment">// 也就是说，包不包含这个数本身（可不可以重复计数）</span></span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - item[i][<span class="number">0</span>]] + item[i][<span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一维数组（状态压缩）</strong>：</p><ol><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.max(dp[i], dp[i - item[0]] + item[1]);</code></p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 0</code></p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。（<strong>而完全背包的物品是可以添加多次的，所以要从小到大去遍历</strong>。（😅老实说，看了好几几遍都没懂））</p></li><li class="lvl-3"><p><strong>这里完全背包一维 dp 数组可以交换遍历顺序</strong>：因为 <code>dp[j]</code> 是用到其左边的数据 <code>dp[j - weight[i]]</code> 的，而先遍历背包再遍历物品也是满足的。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">integerBreak1</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] items)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] item : items) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (i &gt;= item[<span class="number">0</span>]) &#123;  </span><br><span class="line">                dp[i] = Math.max(dp[i], dp[i - item[<span class="number">0</span>]] + item[<span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="518-零钱兑换-II-2">518 零钱兑换 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0518.%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2II.html" >https://programmercarl.com/0518.零钱兑换II.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="377-组合总和-Ⅳ-2">377 组合总和 Ⅳ</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0377.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C%E2%85%A3.html" >https://programmercarl.com/0377.组合总和Ⅳ.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="70-爬楼梯-（进阶）-2">70 爬楼梯 （进阶）</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85%E7%89%88%E6%9C%AC.html" >https://programmercarl.com/0070.爬楼梯完全背包版本.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;状态：看完完全组合的解析之后，完成 518 和 377。CM70就是377。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-22 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="完全背包" scheme="https://kiml.github.io/tags/%E5%AE%8C%E5%85%A8%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>实操：AI编程</title>
    <link href="https://kiml.github.io/posts/6501e090/"/>
    <id>https://kiml.github.io/posts/6501e090/</id>
    <published>2024-06-21T07:24:04.000Z</published>
    <updated>2024-06-25T07:51:44.441Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="7b68bbf314f78420abde5afe57101de647673b42dbed569e58a9f4796a764cd7">abeb8d7735f0ac1430d5930ae71b6720b0442317ed254a69c11041c65159e9be845a26339db56165385334e2c44d7c39d657f984d7b54ce1264d731e88a779b97bdcdaeecae33d3b87425235ece4c6220beb7e0801b3573a077dd101bd52db2668440aef62c87726f9518ccdb768ba4369515c9d3bfd2bc58ea114f5c5aac954afeee389f2ebcfa47bbbef0f1c09afd7491396fc843d696151d6f3e8704d3c6b1efb2f03cb162e5ad211adc364abe91b8842443388b201959b0a9cf55999b77c92e771ecfa0b21186bf4e3613678a24a41221c34f2dfc9391fcc23e8fa9235ec811f7ec10a5e6b8c7abde4bc2b79ae29b1ddd5eb58ecd45de728fa7d5f927ebecf559ecdd43b9548d189c43ce3a228e802750848c312ee3a3b2fd57e8c97da878827b253e37fad528653530bbffc8e1299b3309334d3a2cf92c930e6e8d6bf7c2514915f000145ed5f2574793f1dce7abf1355b3bed71460355bc7fbc0be95fcd0881c1c278fbbae27c87831a952e2605c55d7f00cc3e7125abf36eb75a1531b9b0e1df2eaab03a6d6519975f165067fb15823c2a526dc1508e899c507fced2773071f95c6e27293a9503e41309e5323a0c7e6ff103bb487c370f24439b71eed88fdb7605d6d80692b00bbe2db5918a089d1654b51c356bdcdefd193880d4b185fd20e92fc0bb172a83c4c9b30e8551cfd1352cc85aec8ead1ca5c0fe4fb371b2c8947888d0230f464dad150d061e55da231a0fc57b387c6805258384f9b6be12a7ab2450d8d729391828b211149a5e449a437f5d00b10a4baf802dfd442a50161b2679bf83b6e0083bb134f7ec2344d38a34decc42282e6699c2537582b20c669780b06d8c874ad2b9a96cf6bf8898800219131b1d19e76a7fd784e93137784fda809b7e9ebf414895234e48693b24f9a4017f2b97bba8b4f19e257bde0068ae86159350a946774712c0bec60cac841163e7da1e0b838c3fb3065934e9125902014721ee666d556593011842488b1b8498a87a4b3c63ba88450c52c9a9e5106f89db563833db37a8fa2a88db81248c43e7c3c492c6609a08f311310e5fcd37512e05e5710211e73c0e80fb0734b852a09c0d4703ba26cf3a08a6797195f11f4d503ff2ca4ae7a96df66a72a91c65943eace4f1b521e9d9861cbbd0ea2b282e6c1dd5c2ea9f56ca72f12007450ebf73265d25a1f083c447e3f243aa5fa06819f4b7945e8724ae7ab7413db17b43c2179496e204f66b39fb5c140f8783486582280edf6479f066f47ec5a16c6feac423d05c1cadbf974a38146722cac65ce97daed222cf38f1ee2c9023d8a24a3ff04d50fec0928ee68ff7aebd1c86019aefaddca24d97ae46e3976dc6c6a8c6ec7000e7500fb3b5fe9e71a3ecded19f6dac0b87d406ef73109abda629c4c4b80ef91870be195c4b1336899f7a4ff217cf877cc6662c2530efe3251e9cc5ded31c620094c2908ed53c5aa621c881683c02530e5b684962c8d4bcd905e2c45a2159afb2faac23cd0e584f259b4530d475099562185454a9297a12f0b9c27d632e39438f4ccf0321814121689e49c22bcd7fca37f8b5d065fa5e7c9504eb0f1b3b620b20117e65f7954ea09a661ba348e0c40f30e8a49a2321dee6c42fa2319be949fb3ffb7f5214f61eeb6c3f6da5a8df54bf55e33fd4db8a4f08f4b8c0137ca8fac1aad6e1964178fc0c49acdcb92b78eba9b0f1f0f5cb0971be0cfba7c33705d3ce3425543eec3c8e0560f2391b6ec4dba5d1ddb9f004109dde230c057c2f92be55e3e1fe945e6b205edb82a92f7ac2dcc95ea31d557fa46b1f8dfbca567db7da8a9682833f40768e42eac3f2a8329148c2792b893444557ce1d3d9c80b1590e92da5d39966edf7abdae35243cc6f222cc3163070bc8cfa6c2c7d20df508d9d48614014e8462babf27fcb5953bc93c59e89f5e396b8936f60929888cfb7051b7639663111c720d0bd017067ed94ed947c16065e9fcad4adb69b8ff9e033e8af40508d74660d04af101510e37e11c5d892f20f4df43fa883f0c6e949e060ea9df408243e7f4192cbf3afd0e4050f883b3506ac63dec2dc66eabb40ec54ec9778b1cfd6f5a0e4c4ac9b3a5a6c40877bb48a522ba681c062b4abefc11ac031575889c30d863b6587ba9670bca9a4ac75bcdaa606ba00fa9708e8157245d065c22f01602e7a0075bf294df0c59c4e6621d57d7384e73d72008ef2e1be18dba49843328af2488c8781b1af1733a798b4eb140b2287db1184a2573aebc622008935da9a3d8bc2946233c40233952bf387c5ffb84e33bb5b501cdba9ade7e3b2411652bb5286a355265f6d5e97708dfe11fbcac1467aa27ee1bde313d83e643674eda852344073768f20d397b91781b578c75fc427db93380507d91649f2dd15a6d815a3a98dc6a8857f099cecf196bd74ea0f465cdebfe50920ab18b1941e9d17436c1d1c728aae0f1119a563d70db1808893d2addaf004bef34c80b49cd78a474c709ae5c0a2cae5a9cbc437925c9c8a7bf37c09a3128d8bef79d8dfd4686f3424b2ed11911b87051108d38094639e4830899fcfc2c5afaaafc2436f2bd2b7b512d0becf3d2b529a3d2b44e80edb98fa8da75b941c38df47453744f4a24373d7832be0857be68d3c642fbc61c33490cac82cacca9c6</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十五天-1049最后一块石头的重量 II、494目标和、474一和零</title>
    <link href="https://kiml.github.io/posts/bde30672/"/>
    <id>https://kiml.github.io/posts/bde30672/</id>
    <published>2024-06-21T01:19:10.000Z</published>
    <updated>2024-06-25T07:51:44.433Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：1049 和昨天那题差不多。494、474。。。☠️动规还是先了解解法。后面刷别的题组的时候再说。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-21 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="1049-最后一块石头的重量-II">1049 最后一块石头的重量 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/last-stone-weight-ii" >https://leetcode.cn/problems/last-stone-weight-ii<i class="fas fa-external-link-alt"></i></a>)</p><p>本题可以抽象成让石头分成尽量相同的两堆，然后进行相撞。即背包大小为总和除以 2，求能放入的最大价值。</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：从石头里任取，背包大小为 i，能放入的最大价值。<code>weight[i] = store[i]</code>，<code>value[i] = store[i]</code>。</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.max(dp[i], dp[i - weight[j]] + value[j])</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 0</code>。</p></li><li class="lvl-3"><p>遍历顺序：从后向前遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lastStoneWeightII</span><span class="params">(<span class="type">int</span>[] stones)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(stones).sum();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[sum / <span class="number">2</span> + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> stone : stones) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> dp.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j &gt;= stone) &#123;  </span><br><span class="line">    dp[j] = Math.max(dp[j], dp[j - stone] + stone);  </span><br><span class="line">&#125; </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> sum - dp[sum / <span class="number">2</span>] * <span class="number">2</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="494-目标和">494 目标和</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/target-sum" >https://leetcode.cn/problems/target-sum<i class="fas fa-external-link-alt"></i></a>)</p><p>完全没思路</p><h3 id="474-一和零">474 一和零</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/ones-and-zeroes" >https://leetcode.cn/problems/ones-and-zeroes<i class="fas fa-external-link-alt"></i></a>)</p><p>看不懂，题目都看不懂☠️</p><h2 id="看解析">看解析</h2><h3 id="1049-最后一块石头的重量-II-2">1049 最后一块石头的重量 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/1049.%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8FII.html" >https://programmercarl.com/1049.最后一块石头的重量II.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="494-目标和-2">494 目标和</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0494.%E7%9B%AE%E6%A0%87%E5%92%8C.html" >https://programmercarl.com/0494.目标和.html<i class="fas fa-external-link-alt"></i></a>)</p><p>假设正数集合总和是 left，负数集合总和是 right。总和 <code>sum = left + right</code>。目标值 <code>target = left - right</code>。可以得到 left 即正数之和 <code>= (sum + target)/2</code>。</p><p><strong>本题是装满有几种方法。这是一个组合问题</strong>，用的解法就和之前不一样。</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：填满 i（包括 i）这么大容积的包，有 <code>dp[i]</code> 种方法</p></li><li class="lvl-3"><p>递推公式：<code>dp[j] += dp[j - nums[i]]</code>。</p></li></ol><blockquote><ul class="lvl-1"><li class="lvl-2"><p>已经有一个 1（nums[i]） 的话，有 dp[4] 种方法 凑成 容量为 5 的背包。</p></li><li class="lvl-2"><p>已经有一个 2（nums[i]） 的话，有 dp[3] 种方法 凑成 容量为 5 的背包。</p></li><li class="lvl-2"><p>已经有一个 3（nums[i]） 的话，有 dp[2] 种方法 凑成 容量为 5 的背包</p></li><li class="lvl-2"><p>已经有一个 4（nums[i]） 的话，有 dp[1] 种方法 凑成 容量为 5 的背包</p></li><li class="lvl-2"><p>已经有一个 5 （nums[i]）的话，有 dp[0] 种方法 凑成 容量为 5 的背包</p></li></ul><p>那么凑整 dp[5] 有多少方法呢，也就是把 所有的 dp[j - nums[i]] 累加起来。</p></blockquote><ol start="3"><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 1</code>。假设数组个数为 0，获取 dp[0]，就是 1。</p></li><li class="lvl-3"><p>遍历顺序：从后向前遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findTargetSumWays</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();  </span><br><span class="line">    <span class="keyword">if</span> ((sum + target) % <span class="number">2</span> == <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (sum &lt; Math.abs(target)) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> (sum + target) / <span class="number">2</span>;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[left + <span class="number">1</span>];  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> dp.length - <span class="number">1</span>; j &gt;= num; j--) &#123;  </span><br><span class="line">    <span class="comment">// 这里比较难理解</span></span><br><span class="line">            dp[j] += dp[j - num];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[left];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="474-一和零-2">474 一和零</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0474.%E4%B8%80%E5%92%8C%E9%9B%B6.html" >https://programmercarl.com/0474.一和零.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：<strong>最多有 i 个 0 和 j 个 1 的 strs 的最大子集的大小为 <code>dp[i][j]</code></strong>。物品的重量是 0 的个数，1 的个数。价值就是 1。（难点在二维数组。。反正看了解析又感觉懂了，自己写又不会☠️）</p></li><li class="lvl-3"><p>递推公式：<code>dp[i][j] = Math.max(dp[i][j], dp[i - x][j - y]) + 1</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0][0] = 0</code>。</p></li><li class="lvl-3"><p>遍历顺序：从后向前遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findMaxForm</span><span class="params">(String[] strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 这里x计算0的数量， y计算1的数量  </span></span><br><span class="line">    <span class="type">int</span> x, y;  </span><br><span class="line">    <span class="keyword">for</span> (String str : strs) &#123;  </span><br><span class="line">        x = <span class="number">0</span>;  </span><br><span class="line">        y = <span class="number">0</span>;  </span><br><span class="line">        <span class="type">char</span>[] chars = str.toCharArray();  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span> c : chars) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (c == <span class="string">&#x27;0&#x27;</span>) &#123;  </span><br><span class="line">                x++;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                y++;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> m; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> n; j &gt;= <span class="number">0</span>; j--) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (i &gt;= x &amp;&amp; j &gt;= y) &#123;  </span><br><span class="line">                    dp[i][j] = Math.max(dp[i][j], dp[i - x][j - y] + <span class="number">1</span>);  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> dp[m][n];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;状态：1049 和昨天那题差不多。494、474。。。☠️动规还是先了解解法。后面刷别的题组的时候再说。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-21 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="01背包" scheme="https://kiml.github.io/tags/01%E8%83%8C%E5%8C%85/"/>
    
  </entry>
  
</feed>
