<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Theme</title>
  
  <subtitle>Keep theme quick starter</subtitle>
  <link href="https://kiml.github.io/atom.xml" rel="self"/>
  
  <link href="https://kiml.github.io/"/>
  <updated>2024-10-14T13:39:53.835Z</updated>
  <id>https://kiml.github.io/</id>
  
  <author>
    <name>Keep Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>20 个 OpenSSH 最佳安全实践</title>
    <link href="https://kiml.github.io/posts/17d62585/"/>
    <id>https://kiml.github.io/posts/17d62585/</id>
    <published>2024-10-14T13:36:15.000Z</published>
    <updated>2024-10-14T13:39:53.835Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>之前用参考文章：<a class="link"   href="https://linuxstory.org/20-openssh-best-security-practices/" >20 个 OpenSSH 最佳安全实践<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yy-MM-dd 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;之前用参考文章：&lt;a class=&quot;link&quot;   href=&quot;https://linuxstory.org/20-openssh-best-security-practices/&quot; &gt;20 个 OpenSSH 最佳安全实践&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;yy-MM-dd 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    
    <category term="SSH" scheme="https://kiml.github.io/tags/SSH/"/>
    
  </entry>
  
  <entry>
    <title>Windows 自带的 Linux 子系统</title>
    <link href="https://kiml.github.io/posts/ba3da13b/"/>
    <id>https://kiml.github.io/posts/ba3da13b/</id>
    <published>2024-09-22T09:03:39.000Z</published>
    <updated>2024-10-14T13:37:06.109Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>本来想在阿里云服务器上安装 jenkins，但是配置高的服务器价格太贵，配置低的非常容易 cpu 100%，不利于测试。所以打算直接用台式机做虚拟云主机。参考文章：<a class="link"   href="https://blog.csdn.net/FSKEps/article/details/118493578" >Win10 系统安装 Linux 子系统教程(WSL2 + Ubuntu 20.04 + Gnome 桌面 ）<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-09-22 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="安装-WSL">安装 WSL</h2><h3 id="安装-WSL1">安装 WSL1</h3><ol><li class="lvl-3"><p>管理员身份运行 PowerShell</p></li><li class="lvl-3"><p>输入命令，启用<mark>适用于 Linux 的 Windows 子系统</mark>功能</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>在 Microsoft Store 中选择中意的 Linux 分发版本，并安装</p></li><li class="lvl-3"><p>为新的 Linux 分发版创建用户账户和密码</p></li></ol><h3 id="升级到-WSL2">升级到 WSL2</h3><ol><li class="lvl-3"><p>开启“虚拟机平台”可选功能</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>重启电脑</p></li><li class="lvl-3"><p>下载 Linux 内核更新包<a class="link"   href="https://link.csdn.net/?from_id=118493578&amp;target=https%3A%2F%2Fwslstorestorage.blob.core.windows.net%2Fwslblob%2Fwsl_update_x64.msi" >适用于 x64 计算机的 WSL Linux 内核更新包<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-3"><p>设置 WSL 版本</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PS C:\Users\user-name&gt; wsl --set-version Ubuntu-20.04 2</span><br><span class="line">正在进行转换，这可能需要几分钟时间...</span><br><span class="line">有关与 WSL 2 的主要区别的信息，请访问 https://aka.ms/wsl2</span><br><span class="line">转换完成。</span><br></pre></td></tr></table></figure><h2 id="使用-WSL">使用 WSL</h2><h3 id="启动和退出-Linux">启动和退出 Linux</h3><p>进入 Linux 子系统有以下几种方式：</p><p>（1）和正常软件一样启动，如在开始菜单中点击其图标、双击桌面快捷方式<br>（2）在 Windows 中打开一个终端，如 PowerShell，输入命令 <code>wsl</code><br>（3）在终端中输入命令 <code>Linux 发行版名称.exe</code>，如 <code>ubuntu20.04.exe</code></p><p>退出 Linux 子系统的方式：</p><p>（1）直接关闭终端<br>（2）在终端中输入命令 <code>exit</code>，此时退出了 WSL，然后输入命令 <code>wsl -t Ubuntu-20.04</code>，关闭 ubuntu 子系统。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有分发的名称、运行状态、对应的 WSL 版本</span></span><br><span class="line">wsl -l -v</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止指定的 Linux 分发</span></span><br><span class="line">wsl -t &lt;distro&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注销分发</span></span><br><span class="line">wsl --unregister &lt;distro&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">终止所有正在运行的分发和 WSL2 轻型工具虚拟机</span></span><br><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><h3 id="换源">换源</h3><p>使用 Linux 子系统时，为了提高软件的安装速度，需要将软件源换成国内的镜像源。</p><ol><li class="lvl-3"><p>备份原来的数据源配置文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>修改数据源配置文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/apt/sources.list</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认注释了源码仓库，如有需要可自行取消注释</span></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span></span><br><span class="line"></span><br><span class="line">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">预发布软件源，不建议启用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">deb-src https://mirrors.ustc.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>更新源，升级软件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure><h2 id="使用-SSH-登录-Linux-子系统">使用 SSH 登录 Linux 子系统</h2><h3 id="开启-SSH-并允许-root-登录">开启 SSH 并允许 root 登录</h3><ol><li class="lvl-3"><p>安装 SSH 服务器</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install openssh-server</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>修改配置端口为 22，允许密码和 root 登录。</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nano /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure><p>找到下面的内容并去掉注释在前面的#号，其中把 <code>PermitRootLogin prohibit-password</code> 更改为 <code>PermitRootLogin yes</code> 这是允许用 root 登录的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Port 22</span><br><span class="line">PermitRootLogin prohibit-password</span><br><span class="line">PasswordAuthentication yes</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>重启 SSH 服务</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service ssh restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者运行这个命令</span></span><br><span class="line">sudo service ssh --full-restart</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>终端测试连接输入指令，格式为：<code>ssh 用户名@域名/IP</code></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh root@0.0.0.0</span><br><span class="line">ssh 127.0.0.1</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>确保 SSH 服务器会在系统启动时自动启动</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable ssh</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>配置永久解决方案将上述的命令保存为 <a class="link"   href="http://service.sh" >service.sh<i class="fas fa-external-link-alt"></i></a>，保存在 home 目录下</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&gt;&gt;&gt; service ssh restart &gt;&gt;&gt;</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> Xshell connection</span></span><br><span class="line">sudo service ssh --full-restart</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">&lt;&lt;&lt; <span class="string">service ssh restart &lt;&lt;&lt;</span></span></span><br></pre></td></tr></table></figure><p>配置好之后，下次开机，只需要在 Linux 子系统的默认终端运行 sh <a class="link"   href="http://service.sh" >service.sh<i class="fas fa-external-link-alt"></i></a> 命令后，关掉终端改用 xshell 登录即可。</p><ol start="7"><li class="lvl-3"><p>查看 SSH 监听端口</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ss -tuln | grep 22</span><br></pre></td></tr></table></figure><ol start="8"><li class="lvl-3"><p>SSH 服务器状态</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service ssh status</span><br></pre></td></tr></table></figure><h3 id="设置默认使用-root-登录系统">设置默认使用 root 登录系统</h3><ol><li class="lvl-3"><p>切换 root 权限</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo -i</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后输入密码</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>创建/打开 <code>/etc/wsl.conf</code> ，添加以下内容</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">default=root</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>运行以下命令重新启动 WSL 以应用更改</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown</span><br></pre></td></tr></table></figure><h3 id="设置端口转发">设置端口转发</h3><blockquote><p>为了能够从外部连接到你的 WSL Linux 子系统，你需要确保系统具有公共 IP 地址，或者设置端口转发以将流量路由到 WSL 子系统的局域网 IP 地址。请检查你的网络配置，确保 WSL 子系统能够访问公共网络，并且有一个可供外部访问的 IP 地址。</p></blockquote><ol><li class="lvl-3"><p>增加转发的命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy add v4tov4 listenaddress=0.0.0.0 listenport=22 connectaddress=IP connectport=22</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里的IP为WSL中使用ipconfig查看的IP地址</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>删除转发的命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy delete v4tov4 listenport=22 listenaddress=0.0.0.0</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>使用以下命令列出当前的端口转发规则：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netsh interface portproxy show all</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>测试连接的命令：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip -p 22</span><br></pre></td></tr></table></figure><blockquote><p>这里测试连接的 ip 可以在 linux 内使用命令 <code>hostname -I</code> 进行查看</p></blockquote><h2 id="卸载-Linux-系统">卸载 Linux 系统</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --unregister Ubuntu</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;本来想在阿里云服务器上安装 jenkins，但是配置高的服务器价格太贵，配置低的非常容易 cpu 100%，不利于测试。所以打算直接用台式机做虚拟云主机。参考文章：&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/FSKEps/article/details/118493578&quot; &gt;Win10 系统安装 Linux 子系统教程(WSL2 + Ubuntu 20.04 + Gnome 桌面 ）&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-09-22 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="环境搭建" scheme="https://kiml.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="Linux" scheme="https://kiml.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>设计模式-责任链模式</title>
    <link href="https://kiml.github.io/posts/b6c1490f/"/>
    <id>https://kiml.github.io/posts/b6c1490f/</id>
    <published>2024-09-13T09:00:03.000Z</published>
    <updated>2024-10-14T13:33:28.046Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>设计模式 - 责任链模式</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-09-13 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="简单理解">简单理解</h2><p>可以简单的理解为，针对一个请求，做多层处理（ 不分先后），并且这些处理可能随着业务需求进行不断变更，这个时候就可以用责任链模式。比如说 Spring 中的 <code>Filter</code> 使用的就是责任链模式。*这里理解与策略模式的不同在于：责任链有点像 if return 会每个匹配比较，而策略像 map get key 直接匹配一个；责任链多用于解耦，策略多用于封装 *</p><p>一般来说，这种多层处理可能代码中使用多个 if 来进行处理。处理方式可以如下：</p><ol><li class="lvl-3"><p>将处理的各个流程抽象为各个类（本来 Handler 里边有多个 <code>if</code> 和 <code>方法</code>)</p></li><li class="lvl-3"><p>将多个类用 <code>Chain</code> 链起来，暴露一个方法给 Handler 使用</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="comment">// 过滤  </span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(String data)</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Filter1</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(String data)</span> &#123;  </span><br><span class="line">        <span class="comment">//doSomething  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Filter2</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(String data)</span> &#123;  </span><br><span class="line">        <span class="comment">//doSomething  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Filter3</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(String data)</span> &#123;  </span><br><span class="line">        <span class="comment">//doSomething  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterChain</span> &#123;  </span><br><span class="line">    List&lt;Filter&gt; filters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FilterChain</span><span class="params">()</span> &#123;  </span><br><span class="line">        filters.add(<span class="keyword">new</span> <span class="title class_">Filter1</span>());  </span><br><span class="line">        filters.add(<span class="keyword">new</span> <span class="title class_">Filter2</span>());  </span><br><span class="line">        filters.add(<span class="keyword">new</span> <span class="title class_">Filter3</span>());</span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processData</span><span class="params">(String data)</span> &#123;  </span><br><span class="line">        <span class="keyword">for</span> (Filter filter : filters) &#123;  </span><br><span class="line">            filter.doFilter(data);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlerRequest</span><span class="params">(Request request)</span> &#123;  </span><br><span class="line">        <span class="comment">// 得到请求的数据  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> request.getData();  </span><br><span class="line">        <span class="type">FilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterChain</span>();  </span><br><span class="line">        <span class="comment">// 处理数据  </span></span><br><span class="line">        filterChain.processData(data);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通用代码">通用代码</h2><ol><li class="lvl-3"><p><strong>业务执行器</strong>接口，所有的业务实现都会实现该接口</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 业务执行器</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BusinessProcess</span> &#123;  </span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(ProcessContext context)</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>责任链上下文</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 责任链上下文</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessContext</span> &#123;  </span><br><span class="line">    <span class="comment">// 标识责任链的code  </span></span><br><span class="line">    <span class="keyword">private</span> String code;  </span><br><span class="line">    <span class="comment">// 存储上下文的真正载体  </span></span><br><span class="line">    <span class="keyword">private</span> Model model;  </span><br><span class="line">    <span class="comment">// 责任链中断的标识  </span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Boolean</span> <span class="variable">needBreak</span> <span class="operator">=</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>业务执行模板（把责任链的逻辑串起来）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 业务执行模板（把责任链的逻辑串起来） </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessTemplate</span> &#123;  </span><br><span class="line">    <span class="keyword">private</span> List&lt;BusinessProcess&gt; processList;  </span><br><span class="line">    <span class="keyword">public</span> List&lt;BusinessProcess&gt; <span class="title function_">getProcessList</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> processList;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProcessList</span><span class="params">(List&lt;BusinessProcess&gt; processList)</span> &#123;  </span><br><span class="line">        <span class="built_in">this</span>.processList = processList;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>责任链的流程控制器</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 责任链的流程控制器（整个责任链的执行流程通用控制）</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Data</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessController</span> &#123;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">// 不同的code 对应不同的责任链  </span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, ProcessTemplate&gt; templateConfig = <span class="literal">null</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(ProcessContext context)</span> &#123;  </span><br><span class="line">        <span class="comment">//根据上下文的Code 执行不同的责任链  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">businessCode</span> <span class="operator">=</span> context.getCode();  </span><br><span class="line">        <span class="type">ProcessTemplate</span> <span class="variable">processTemplate</span> <span class="operator">=</span> templateConfig.get(businessCode);  </span><br><span class="line">        List&lt;BusinessProcess&gt; actionList = processTemplate.getProcessList();  </span><br><span class="line">        <span class="comment">//遍历某个责任链的流程节点  </span></span><br><span class="line">        <span class="keyword">for</span> (BusinessProcess action : actionList) &#123;  </span><br><span class="line">            <span class="keyword">try</span> &#123;  </span><br><span class="line">                action.process(context);  </span><br><span class="line">                <span class="keyword">if</span> (context.getNeedBreak()) &#123;  </span><br><span class="line">                    <span class="keyword">break</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e2) &#123;  </span><br><span class="line">                <span class="comment">//...  </span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>举例用的两个实现</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 白名单处理器</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WhiteListProcess</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(ProcessContext context)</span> &#123;  </span><br><span class="line">        <span class="type">UserModel</span> <span class="variable">user</span> <span class="operator">=</span> (UserModel) context.getModel();  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;3y&quot;</span>.equals(user.getName())) &#123;  </span><br><span class="line">            context.setNeedBreak(<span class="literal">true</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发消息处理器</span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendMessageProcess</span> <span class="keyword">implements</span> <span class="title class_">BusinessProcess</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">process</span><span class="params">(ProcessContext context)</span> &#123;  </span><br><span class="line">        <span class="type">UserModel</span> <span class="variable">user</span> <span class="operator">=</span> (UserModel) context.getModel();  </span><br><span class="line">        System.out.println(<span class="string">&quot;给&quot;</span>+user.getName()+<span class="string">&quot;发消息&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>把处理器添加到 <code>ProcessTemplate</code> 模板，把 <code>ProcessTemplate</code> 添加到 <code>ProcessController</code> 的 <code>Map</code> 上</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--发送消息的责任链--&gt;</span>  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sendMessageTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chainofresponsibility.ProcessTemplate&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;processList&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;whiteListProcess&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;sendMessageProcess&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--通用流程处理器，维护多条责任链--&gt;</span>  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;processController&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.chainofresponsibility.ProcessController&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;templateConfig&quot;</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span>  </span><br><span class="line">      <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;sendMessage&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;sendMessageTemplate&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>接口里执行责任链</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProcessController processController;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/send&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">send</span><span class="params">(String userName)</span> &#123;</span><br><span class="line">        <span class="comment">// 构建上下文</span></span><br><span class="line">        <span class="type">ProcessContext</span> <span class="variable">processContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProcessContext</span>();</span><br><span class="line">  </span><br><span class="line">        <span class="type">UserModel</span> <span class="variable">userModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserModel</span>();</span><br><span class="line">        userModel.setAge(<span class="string">&quot;24&quot;</span>);</span><br><span class="line">        userModel.setName(userName);</span><br><span class="line">        processContext.setModel(userModel);</span><br><span class="line">        processContext.setCode(<span class="string">&quot;sendMessage&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        processController.process(processContext);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Pipeline">Pipeline</h2><p><code>Redis</code> 会用 <code>Pipeline</code> 去做批量的操作。它是「责任链模式」的实现之一。</p><p>// 具体分析 todo</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
设计模式 - 责任链模式&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-09-13 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="设计模式" scheme="https://kiml.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
    <category term="设计模式" scheme="https://kiml.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    <category term="责任链模式" scheme="https://kiml.github.io/tags/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>消息平台-核心代码</title>
    <link href="https://kiml.github.io/posts/4f08dd5e/"/>
    <id>https://kiml.github.io/posts/4f08dd5e/</id>
    <published>2024-09-13T07:18:48.000Z</published>
    <updated>2024-10-14T13:33:28.048Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="bd5dfdc7b5075e177e7ff12aec6cea0997fb8b78bc01a81521beb706a646c8e4">665b6e36e8990f013070faca4228a0bfccd399cf756e12c68920c56ce8b4287efa95190af6d6209f579011876b8fa876e0bc2b631d0e227bd44e7792f33fee40dad7ec9375821980e8a38f95ea5d6068593d0e7db96a0000080ca172ec8e7a380c1d2ed8213be7274216009a5ba46212eb6a3364ad2d78c38dc2d763a008c42652222583eac32ce79ba627a519eeb0436fe32f07d45d1fedeaf2f2dd3836d60f5a4aa69768755eb89995d928a964dc53d239e3f06a4d3f8bceb0e6d66b616f6d07515a436508e58d0f985590fd6da16c95fe621a694ec77c14622a66ed0fd4f483207f243ef52077ebe188635f8845d90c6360299a47f76ec4c92c9d736f9b68e633cc673ccc99d2c937794c100d0b1b239d2dd27573fc1508580d6249399a4f3ec10b17e1886db6799951e51fa111727cd586f44368904ae9f6e086da048a54e5adc5b1855c1854a50c360396bba379c3911860cff57cb6679304677906dcf17a0e1ce902fe7539b062dccbe2570f199c5b487cdf2047d8af145b5ee53b8acca55705fadd58abc5d44e9c709b85e3f1717ab96fd3fec7a9ae13840b09eb265c3937bf28d70e051b38b5c4cc5896797446c7607a33140aa4c0f5a25278a8342743b5cb72c4923c16eba7bac92df09ffc894df5f20370026ade44a0a8f994720e3aef173338edbadd2d899c6783fe3d1f6a5a992bcb8e8720e367508f8c0214240fc03e8e1716cbc3631b8fb9e0070152436290cb69ae96f2b83472c9294bd4c84501927b201f8234cd11339dba484d52a55f0f47489366453aae17c015516b3003c3792272ca9d0471643d960243b563dbaa469d1790de8d1f9918e18490321e6f7be1e1100a6685d4c5296e25084c264ef9a69a9b3c89d3ccce54b3fd4af6e163614e5fb99af7709173d04fa752924ee125bce49bd064c683a3b67372d3a07f98ba565365516f0cabfec4254dc8c0d279de018dbea61a79c86348e38f44ddad36eb474edb38faa336a47b6b6a27f42e1511f6d9f30156e4e4f6e40772af6f77c731ef8c978d40a7aed5f1f992a94e234765b98808dc8d10ab60c57f9fd38d6631ca31c5e30072630e2ff403f2b6b533423488916150b1b5b683beb72fe88e605b73bfc4dc59a22aee28fbb6a526e52d17201e4556e56794fdc40e389aff0cd6d7010362eec1bebd8a41b35b9ef574e5c797e971fb3d11c1ff49929434ce21a22ce354565d202d1c5e52acd9e33b43e86381ff69688d89fad2f82ef49414fcb14b2a9bb7d5ef3e777f57e8756dd72f0378d6ad401928af0c59cea85f6e5f821dbd5d32bccc80fd91cf2469b56cbd13d39ff02f08ac40895233b51fdabf0e25db75de8b5bfa10afe04e0744af49b4f9b4a86cbd4c443e5f0c3b7bd8719222b912867e13e275b75d48d40fa1d6a9cd0679734c9d3043ad93a16d5c41272652db3802b56b8b6de2d41fff3d8a8b4b7e77a44deeb0b5c0362f9e2d6d99a23733628098f4cf48f7f9a2b98a1249de47231a44e2f6d6009c005cc640d829ca0fdf864a35396f22c027a91163d3255d811090ab93b10c678d425a9200825c8a3d00ef839b64f82e8f27d62ac9e975b4f20c9229cf1d2d0ae32bc1e57356ef013cc868f130a4dca75e36665167123328cb603cb49350539f6c4767bb95b0ee7222031c013b67a0166f1d28abcd08f13e8bf317dd4c82fab51e41ad7726474d0bf231f51929d210fc291d11453908350f4ae490235cf9e2f6a6c0d639c1fedbb093962c1c63c0ac9fb564e438a89358d907ff5ae265f5dd287e6d3a15faffe6479682ea3f4ad16405ee9e98d68f9db2200dfdcf9c8268e9159c2aaebd537e325fb03c155d06094462f00f7d539bb3723dd391ddf327114f2b2eae21231825be4cf24228ace6a07ca0e804f2475ff63162ae747155ad931012c89970ad88689533352d6a120bbd42b4283a59961c846afeb9b2ee60baf0b69f003fd307ccccc57572e95f05fd2b9d0c584aea39a1dd08a9727cb27e023323a87f52795a45b0eee9f5fd32184672a6d85d350bed70d9e305de0fc2fdb9022cc58cb1a73beb1dd04bf00047e44e96e31017903ff9fb1f104421e63ea01e6db22828ef1175694d850bb8f80cdaf36624eb014c66548da0ade5886fb4ef8ce5f98a1e7b2ac5bad6ada2dddc6e8217cf730a8d74f99515c3608ec62a38f1e1a0c2a15889a8817db1d24512f6b31e504f28b88f9fbf03ce0768a846b6b4ef3591051235f0c1aaeeec62b4fbfd61d553d4cacf2f03c98524cb9614d03c36484691562cca83fcd267f7232a4e7eafca3377b7811815bd6ff75363feef7300a62c381d3f3b133c999437ab3f6991d4030fd28fd99ad950f049ca15102541c4c68861a3bc4ce308dd0e1ff918f669c41dbb135e076fa0b4a18722fd16b1816331c5fea6ae397b4b29aa972d916c136c4a7016782386b3b007e10a99c0c1f1cf564de26a9c57c8c773f7887a4237588953ea7f3bc545a66ab4ac68d908f1df30f133946965c666a48a9ccabced9f70e974a7c47a372742020761f918699409f185e2c1b885f4460287ff1d3bb3794a2d0dd7cf6a800745178f4da73acfa5db06f2a13bc5e8004392fcdf245fd14edbaab5562a849d159dfb5237888b2c84b6d0184f20f10e32de93a6003dba15ce53244ed71e14d31c927d8d955359b64b8c454a267a9612b2a03b59d404c700c129d9301f589bff3a31da957d08716617ceb7972b9d389412233a59251eb0119e4a1d3bcf0f4769b95b577b877d5cb9919b53eb3833a30d7fe90b3e5181788de00f782f800b7a155261d3d152f20d56dbf32172f828efb6440e04c8a6f7ccfd92fc9292c1830f376dd86929d8a77aaa6f44d38009d12d93ce056012085752ef4bab77913aeeeb32c9bff4a8b32bfcf14d1e717b04b18d453328a47e7607e073e1ffadc3017a7af1b673a7de224ab87cb192324ee34d388c6a1953e0be41c36de0d03ff57492a0e87575b12a1224d675ad2b41025a567af3861afd6b602f254ff3f52791bfdc682ae034ebee7f4c6905f42aea0e62cb703f8ee2118ca634c25d9d3c4dfaedd08878633e160f8bd577f676f022331a910cfc184d7400bd490b612403a783289466086e6985cf6ff2de9818ca88e5f756f66e5b688450a7d1f3e676083c46d7748655ed102775e3a1c39c705fc0529f351890050dcfac08a0b2cef402601b06c03d8de6113a9e74702c2343bbaaf14eeb707eb3bee3eee7c159214fdebf64c99572413c32207dc03982d5ebe92470e995c0e57dab1864c77da23b35b4aa311fa7ffa1239aedac0dece2667cc99c87f2a3ff6010e2cd2225e99532572c43696e7670731299ec8492743f925708d9dbdae915de8657229f32804e63d68bd697947879cb37d4f615de16128350633df0f6bc6d47bea9286a4703f50d75580a59434de208d2617b2d894b0628cc80b33127cf92175822e9d81ad6375718b96182a05bcd4ab2d98a853657cf32f8400186c35a43fd40e68226974faca3999959492ebf46c0595cd2d1c250d674ce179cb12a7747aa63a839f48359e6af3198e36c90ecffdea77fe77005521142a3eee06e617068c8ba4f88af38e629f28dbce2a6291573a29b7e1ebfa8ad153c467f2aa20f75a82b674fdda632f25d8657d0d0015338be05c702b1fb16c8fd9ce13443610e653260b85c0e37741a01905057cd0595999be6d9c0315fa970fe3355637656162b843ed112668bd2ae3399f8c590995d99de83f74bb5889fdd099c80c32142a6ab81cf3d0d37825fb8548b1308547a0e7bc9aa556b41f10904dd0913397ced8c6cf63df6c97f7bbe073aee0f72c0e421aa32c548aeadb957be91118ddc20c8aeb484e912b6ef73baa5737caa5d61c4a44825f4794ebf155843841e6545be39ca858c08a587befd1400a1470c3e746b57a828b3ea9aafaa05410cdf3d44bb40c2df1236e47be86df0856459e02146f05c6b9afeead591fb7dad7a0322a7c79979f6d0f020f23013322901e965030585bd359989155a9d93bf9c4659420a5f287fbffe9328afc64d4d8436102d513367f50c163d33ad1ae453d8ff69547aa2ca84d7b0dc3f76f402129ae72c2e2fd0bbf5a4aa69cbdf83f0014bc29235544ca937237bc85676b2dff2cbca794f7de1172ac845bbabffef22d40d21960b1659a900e13f0ca398803055b94258f9195e0d8c59708fc0aef1cb9defb4f5e44d79a1497988550feb337493f4a7a13287bba4bd37e14041f2f712a45ef0013193008c5dfb8f23133cc441d338ba7357a8461c7a362c4e642c50585e19f977c40edcb7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="消息平台" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E6%B6%88%E6%81%AF%E5%B9%B3%E5%8F%B0/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>装机-软件安装（Linux）</title>
    <link href="https://kiml.github.io/posts/dada24a1/"/>
    <id>https://kiml.github.io/posts/dada24a1/</id>
    <published>2024-09-12T05:59:25.000Z</published>
    <updated>2024-10-14T14:19:41.675Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>记录 Linux 安装教程</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-09-12 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="MySQL">MySQL</h2><ol><li class="lvl-3"><p>MySQL 8.0.26 下载</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://downloads.mysql.com/archives/get/p/23/file/mysql-8.0.26-linux-glibc2.12-x86_64.tar.xz</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>解压缩文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf mysql-8.0.26-linux-glibc2.12-x86_64.tar.xz</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>移动文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mysql-8.0.26-linux-glibc2.12-x86_64 /usr/local/mysql</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>创建数据存放目录</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span>到安装目录下</span></span><br><span class="line">mkdir data</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>创建用户组和用户</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line"></span><br><span class="line">useradd -g mysql mysql</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>改变 mysql 目录权限</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql /usr/local/mysql/</span><br><span class="line"></span><br><span class="line">chown -R mysql .</span><br><span class="line">chgrp -R mysql .</span><br></pre></td></tr></table></figure><ol start="7"><li class="lvl-3"><p>数据库初始化（<em>需要记住临时密码</em>）pi7pv_t3jPCH</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysqld --user=mysql --basedir=/usr/local/mysql --datadir=/usr/local/mysql/data --initialize</span><br></pre></td></tr></table></figure><ol start="8"><li class="lvl-3"><p>修改 my.cnf 文件</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件内内容</span></span><br><span class="line">[mysqld]</span><br><span class="line">    basedir = /usr/local/mysql</span><br><span class="line">    datadir = /usr/local/mysql/data</span><br><span class="line">    socket = /usr/local/mysql/mysql.sock</span><br><span class="line">    character-set-server=utf8</span><br><span class="line">    port = 3306</span><br><span class="line">   sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"> [client]</span><br><span class="line">   socket = /usr/local/mysql/mysql.sock</span><br><span class="line">   default-character-set=utf8</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[mysqld]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">datadir=/var/lib/mysql</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">socket=/var/lib/mysql/mysql.sock</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Disabling symbolic-links is recommended to prevent assorted security risks</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">symbolic-links=0</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Settings user and group are ignored when systemd is used.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If you need to run mysqld under a different user or group,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">customize your systemd unit file <span class="keyword">for</span> mariadb according to the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">instructions <span class="keyword">in</span> http://fedoraproject.org/wiki/Systemd</span></span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">[mysqld_safe]</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">log-error=/var/log/mariadb/mariadb.log</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">pid-file=/var/run/mariadb/mariadb.pid</span></span><br><span class="line"><span class="meta prompt_">  </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># include all files from the config directory</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#!includedir /etc/my.cnf.d</span></span></span><br></pre></td></tr></table></figure><ol start="9"><li class="lvl-3"><p>创建 mysql 服务</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 mysql.server 启动文件复制到 /etc/init.d 目录</span></span><br><span class="line">cp -a /usr/local/mysql/support-files/mysql.server /etc/init.d/mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">赋予权限</span></span><br><span class="line">chmod +x /etc/rc.d/init.d/mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建 mysql 服务</span></span><br><span class="line">chkconfig --add mysqld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查服务是否生效</span></span><br><span class="line">chkconfig --list mysqld</span><br></pre></td></tr></table></figure><ol start="10"><li class="lvl-4"><p>配置全局环境</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加如下配置</span></span><br><span class="line">export PATH=$PATH:/usr/local/mysql/bin:/usr/local/mysql/lib</span><br><span class="line">export PATH</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使环境变量设置生效</span></span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><ol start="11"><li class="lvl-4"><p>启动 mysql 服务</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br><span class="line"></span><br><span class="line">service mysql status</span><br></pre></td></tr></table></figure><ol start="12"><li class="lvl-4"><p>登录 mysql 修改密码</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">密码为之前的临时密码</span></span><br><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码</span></span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure><ol start="13"><li class="lvl-4"><p>设置 mysql 远程登录</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许任何主机使用 root 进行连接</span></span><br><span class="line">update user set host=&#x27;%&#x27; where user=&#x27;root&#x27; limit 1;</span><br><span class="line"></span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h2 id="Redis">Redis</h2><ol><li class="lvl-3"><p>源码安装与编译</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/redis-stable.tar.gz</span><br><span class="line">tar -xzvf redis-stable.tar.gz</span><br><span class="line">cd redis-stable</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>执行完 make 命令后，src 目录下会出现编译后的 redis 服务程序 <code>redis-server</code>，还有用于测试的客户端程序 <code>redis-cli</code>，两个程序位于安装目录 src 目录下</p><ol start="2"><li class="lvl-3"><p>安装可执行程序到 <code>/usr/local/bin</code></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>前台运行启动</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">redis-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用指定配置文件启动</span></span><br><span class="line">cp redis.conf /etc/redis.conf</span><br><span class="line">redis-server /etc/redis.conf</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>其他命令</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash"><span class="built_in">set</span> foo bar</span></span><br><span class="line">OK</span><br><span class="line"><span class="meta prompt_">redis&gt; </span><span class="language-bash">get foo</span></span><br><span class="line">&quot;bar&quot;</span><br><span class="line"></span><br><span class="line">redis-cli shutdown</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">直接关闭不保存内存</span></span><br><span class="line">redis-cli shutdown nosave</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>配置 Redis 为后台服务将配置文件中的 daemonize no 改成 daemonize yes，配置 redis 为后台启动。</p></li><li class="lvl-3"><p>Redis 设置访问密码在配置文件中找到 requirepass，去掉前面的注释，并修改后面的密码。</p></li><li class="lvl-3"><p>设置远程可访问</p></li></ol><p>在配置文件中找到 bind 127.0.0.1 这一行，注释。</p><p><strong>如果 redis3.2 版本以上的，需要将保护模式（protected-mode）修改成 no</strong></p><ol start="8"><li class="lvl-3"><p>常用的配置文件</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#默认端口6379</span><br><span class="line">port 6379</span><br><span class="line">#绑定ip，如果是内网可以直接绑定 127.0.0.1, 或者忽略, 0.0.0.0是外网</span><br><span class="line">bind 0.0.0.0</span><br><span class="line">#守护进程启动</span><br><span class="line">daemonize yes</span><br><span class="line">#超时</span><br><span class="line">timeout 300</span><br><span class="line">loglevel notice</span><br><span class="line">#分区</span><br><span class="line">databases 16</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line">rdbcompression yes</span><br><span class="line">#存储文件</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">#密码 abcd123</span><br><span class="line">requirepass abcd123</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;记录 Linux 安装教程&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-09-12 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="环境搭建" scheme="https://kiml.github.io/categories/%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
    <category term="工具" scheme="https://kiml.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
    <category term="Linux" scheme="https://kiml.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>消息平台-项目介绍</title>
    <link href="https://kiml.github.io/posts/2b76eac7/"/>
    <id>https://kiml.github.io/posts/2b76eac7/</id>
    <published>2024-09-10T08:01:13.000Z</published>
    <updated>2024-10-14T13:33:28.047Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>新项目学习笔记。项目 git 地址：<a class="link"   href="https://gitee.com/zhongfucheng/austin.git" >https://gitee.com/zhongfucheng/austin.git<i class="fas fa-external-link-alt"></i></a><br>前端项目 git 地址：<a class="link"   href="https://gitee.com/zhongfucheng/austin-admin" >https://gitee.com/zhongfucheng/austin-admin<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-09-10 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="项目概述">项目概述</h2><p>austin 项目是消息推送平台的实现，它的<strong>核心功能</strong>：统一的接口发送各种类型消息，对消息生命周期全链路追踪</p><h2 id="系统项目架构">系统项目架构</h2><table><thead><tr><th>工程模块</th><th>作用</th></tr></thead><tbody><tr><td>austin-common</td><td>项目公共包：存储着项目公共常量/枚举/Bean</td></tr><tr><td>austin-support</td><td>项目工具包：对接 中间件/组件</td></tr><tr><td>austin-cron</td><td>定时任务模块：对 xxl-job 封装和项目定时任务逻辑</td></tr><tr><td>austin-web</td><td>后台管理模块：提供接口给前端调用</td></tr><tr><td>austin-service-api</td><td>消息接入层接口定义模块：只有接口和必要的入参依赖</td></tr><tr><td>austin-service-api-impl</td><td>消息接入层具体实现模 块： 真实处理请求</td></tr><tr><td>austin-handler</td><td>消息处理逻辑层：消 费 MQ 下发 消息</td></tr><tr><td>austin-stream</td><td>实时处理模块：利用 fl ink 实 时处理下发链路数据</td></tr><tr><td>austin-data-house</td><td>数据仓库模块：消费 MQ 数据写入 hive</td></tr></tbody></table><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/09/austin%E6%B5%81%E7%A8%8B%E5%9B%BE.png"                        alt=""                 ></p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;新项目学习笔记。项目 git 地址：&lt;a class=&quot;link&quot;   href=&quot;https://gitee.com/zhongfucheng/austin.git&quot; &gt;https://gitee.com/zhongfucheng/austin.git&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;
前端项目 git 地址：&lt;a class=&quot;link&quot;   href=&quot;https://gitee.com/zhongfucheng/austin-admin&quot; &gt;https://gitee.com/zhongfucheng/austin-admin&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-09-10 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="消息平台" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E6%B6%88%E6%81%AF%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Jenkins + k8s 实现 CICD（持续集成和持续部署）</title>
    <link href="https://kiml.github.io/posts/60f8da4b/"/>
    <id>https://kiml.github.io/posts/60f8da4b/</id>
    <published>2024-08-25T12:31:20.000Z</published>
    <updated>2024-10-14T13:33:28.049Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>面试的时候有些公司会使用这种模式，这里记录一下学习使用的过程。</p></li><li class="lvl-2"><p>参考文章<br><a class="link"   href="https://segmentfault.com/a/1190000040469278" >在 k8s 中安装 jenkins 并配置实现 CI/CD<i class="fas fa-external-link-alt"></i></a><br><a class="link"   href="https://www.cuiliangblog.cn/detail/section/15120029" >Kubernetes全章节博客<i class="fas fa-external-link-alt"></i></a><a class="link"   href="https://jasonkayzk.github.io/2021/05/30/%E5%9B%BD%E5%86%85%E5%9C%A8minikube%E4%B8%AD%E6%B7%BB%E5%8A%A0ingress-nginx%E6%8F%92%E4%BB%B6/" >国内在minikube中添加ingress-nginx插件<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新<br></p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-08-25 初始记录</span><br><span class="line">24-09-10 更换 k8s 为 minikube</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="什么是-CI-CD">什么是 CI /CD</h2><p>在深入研究 CI / CD 自动化工具之前，我们首先需要了解这个概念。正如我们所提到的，持续集成和持续部署通常与敏捷开发环境齐头并进，在这种环境中，团队希望在完成后立即将不同的代码段部署到生产环境中。</p><p>使用 CI / CD 工具可自动完成构建，测试和部署新代码的过程。每个团队成员都可以立即获得有关其代码生产准备情况的反馈，即使他们只更改了一行或一个字符。这样，每个团队成员都可以将他们的代码推送到生产中，而构建，测试和部署的过程则自动完成，以便他们可以继续处理应用程序的下一部分。</p><h2 id="Kubernetes（minikube）">Kubernetes（minikube）</h2><ol><li class="lvl-3"><p><a class="link"   href="https://minikube.sigs.k8s.io/docs/start/?arch=%2Fmacos%2Farm64%2Fstable%2Fbinary+download" >安装minikube<i class="fas fa-external-link-alt"></i></a></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64</span><br><span class="line">sudo install minikube-linux-amd64 /usr/local/bin/minikube &amp;&amp; rm minikube-linux-amd64</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>启动集群</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">minikube start --force --driver=docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">直接使用 minikube start 可能会出现以下报错</span></span><br><span class="line">Exiting due to DRV_AS_ROOT: The &quot;docker&quot; driver should not be used with root privileges.</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>访问集群</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kubectl get po -A</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者使用minikube下载使用</span></span><br><span class="line">minikube kubectl -- get po -A</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以添加以下命令简化</span></span><br><span class="line">alias kubectl=&quot;minikube kubectl --&quot;</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>Kubernetes 仪表板</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">minikube dashboard</span><br></pre></td></tr></table></figure><h2 id="Jenkins">Jenkins</h2><table><thead><tr><th>开源工具</th><th>描述</th><th>官方文档</th><th>官方安装文档</th><th>docker 安装</th></tr></thead><tbody><tr><td>Jenkins</td><td>devops 持续集成工具</td><td><a class="link"   href="https://www.jenkins.io/" >https://www.jenkins.io/<i class="fas fa-external-link-alt"></i></a></td><td><a class="link"   href="https://www.jenkins.io/download/" >https://www.jenkins.io/download/<i class="fas fa-external-link-alt"></i></a></td><td><a class="link"   href="https://hub.docker.com/r/jenkins/jenkins/" >https://hub.docker.com/r/jenkins/jenkins/<i class="fas fa-external-link-alt"></i></a></td></tr></tbody></table><p>docker 安装命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 -p 50000:50000 jenkins/jenkins:lts-jdk11</span><br></pre></td></tr></table></figure><h3 id="自定义-yaml-文件安装-jenkins">自定义 <code>yaml</code> 文件安装 jenkins</h3><ol><li class="lvl-3"><p>由于 jenkins 需要持久化数据，所以我们需要创建 <code>PVC</code> ，建议使用 <a href="https://kubernetes.io/zh/docs/concepts/storage/storage-classes/"><code>storageClass</code></a> 动态创建 <code>PVC</code>，在 <code>minikube</code> 中有一个默认的 <code>storageClass</code>，名称是：<code>standard</code>，可以使用下面的命令查看：</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一次会进行下载，需要时间较长</span></span><br><span class="line">kubectl get sc</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>创建 <code>jenkins-deploy.yaml</code> 文件</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">###############使用 storageClass 创建 pvc ###################</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">PersistentVolumeClaim</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins-data-pvc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">accessModes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">ReadWriteMany</span></span><br><span class="line">  <span class="comment"># 指定 storageClass 的名字，这里使用 minikube 默认的 standard</span></span><br><span class="line">  <span class="attr">storageClassName:</span> <span class="string">&quot;standard&quot;</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">    <span class="attr">requests:</span></span><br><span class="line">      <span class="attr">storage:</span> <span class="string">10Gi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############创建一个ServiceAccount 名称为：jenkins-admin###################</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins-admin</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line"></span><br><span class="line"><span class="comment">###############绑定账户jenkins-admin 为集群管理员角色，为了控制权限建议绑定自定义角色###################</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins-admin</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">jenkins-admin</span></span><br><span class="line">    <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="comment"># cluster-admin 是 k8s 集群中默认的管理员角色</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cluster-admin</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############### 在 default 命名空间创建 deployment ###################</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">app:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">app:</span> <span class="string">jenkins</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">10</span></span><br><span class="line">      <span class="comment"># 注意：k8s 1.21.x 中 serviceAccount 改名为 serviceAccountName</span></span><br><span class="line">      <span class="comment"># 这里填写上面创建的 serviceAccount 的 name</span></span><br><span class="line">      <span class="attr">serviceAccount:</span> <span class="string">jenkins-admin</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">jenkins/jenkins:lts-jdk11</span></span><br><span class="line">          <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">          <span class="attr">env:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">JAVA_OPTS</span></span><br><span class="line">              <span class="attr">value:</span> <span class="string">-Duser.timezone=Asia/Shanghai</span></span><br><span class="line">          <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">8080</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">containerPort:</span> <span class="number">50000</span></span><br><span class="line">              <span class="attr">name:</span> <span class="string">agent</span></span><br><span class="line">              <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">          <span class="attr">resources:</span></span><br><span class="line">            <span class="attr">limits:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">1000m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">1Gi</span></span><br><span class="line">            <span class="attr">requests:</span></span><br><span class="line">              <span class="attr">cpu:</span> <span class="string">500m</span></span><br><span class="line">              <span class="attr">memory:</span> <span class="string">512Mi</span></span><br><span class="line">          <span class="attr">livenessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/login</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">12</span></span><br><span class="line">          <span class="attr">readinessProbe:</span></span><br><span class="line">            <span class="attr">httpGet:</span></span><br><span class="line">              <span class="attr">path:</span> <span class="string">/login</span></span><br><span class="line">              <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">            <span class="attr">initialDelaySeconds:</span> <span class="number">60</span></span><br><span class="line">            <span class="attr">timeoutSeconds:</span> <span class="number">5</span></span><br><span class="line">            <span class="attr">failureThreshold:</span> <span class="number">12</span></span><br><span class="line">          <span class="attr">volumeMounts:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jenkinshome</span></span><br><span class="line">              <span class="attr">mountPath:</span> <span class="string">/var/jenkins_home</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">jenkinshome</span></span><br><span class="line">          <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">            <span class="attr">claimName:</span> <span class="string">jenkins-data-pvc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">############### 在 default 命名空间创建 service ###################</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">web</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">jenkins-agent</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">jenkins</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">app:</span> <span class="string">jenkins</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">agent</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">50000</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">50000</span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>部署 jenkins</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f jenkins-deploy.yaml</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>临时暴露服务端口（只能通过内网访问）</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl port-forward service/jenkins 8080:8080 -n default</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>外部网络访问 Jenkins 服务</p><ol><li class="lvl-7">使用 NodePort</li><li class="lvl-7">使用 LoadBalancer</li><li class="lvl-7"><strong>设置 Ingress</strong>（这里选用这种）</li></ol></li></ol><blockquote><p>Ingress 是一种暴露服务到外部网络的方法，通常与 Ingress 控制器（如 Nginx）一起使用。</p></blockquote><ul class="lvl-0"><li class="lvl-2"><p><strong>安装 Ingress 控制器</strong></p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基本上成功不了</span></span><br><span class="line">minikube addons enable ingress</span><br></pre></td></tr></table></figure><blockquote><p>国内的互联网环境。。。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载yaml配置文件</span></span><br><span class="line">wget https://cdn.jsdelivr.net/gh/jasonkayzk/kubernetes-learn@book-learn/chapter5/ingress-nginx/deploy.yaml</span><br></pre></td></tr></table></figure><h3 id="使用-helm-安装">使用 helm 安装</h3><p>// todo</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;面试的时候有些公司会使用这种模式，这里记录一下学习使用的过程。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;参考文章&lt;br&gt;&lt;a class=&quot;link&quot;   href=&quot;https://segmentfault.com/a/1190000040469278&quot; &gt;在 k8s 中安装 jenkins 并配置实现 CI/CD&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;
&lt;a class=&quot;link&quot;   href=&quot;https://www.cuiliangblog.cn/detail/section/15120029&quot; &gt;Kubernetes全章节博客&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;a class=&quot;link&quot;   href=&quot;https://jasonkayzk.github.io/2021/05/30/%E5%9B%BD%E5%86%85%E5%9C%A8minikube%E4%B8%AD%E6%B7%BB%E5%8A%A0ingress-nginx%E6%8F%92%E4%BB%B6/&quot; &gt;国内在minikube中添加ingress-nginx插件&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;br&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-08-25 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-09-10 更换 k8s 为 minikube&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Jenkins" scheme="https://kiml.github.io/tags/Jenkins/"/>
    
    <category term="Kubernetes" scheme="https://kiml.github.io/tags/Kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>面试 MQ</title>
    <link href="https://kiml.github.io/posts/a872196e/"/>
    <id>https://kiml.github.io/posts/a872196e/</id>
    <published>2024-08-22T03:39:33.000Z</published>
    <updated>2024-08-24T15:03:10.049Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>❗表示必掌握，❔表示基本不会问</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-08-22 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="你知道目前市面上使用的-MQ-有哪些吗？">你知道目前市面上使用的 MQ 有哪些吗？</h2><p>RabbitMQ、RocketMQ、Kafka。</p><h3 id="你使用的是哪种-MQ？为什么选择这类-MQ-qps-？">你使用的是哪种 MQ？为什么选择这类 MQ(qps)？</h3><p>我们选用的是 RabbitMQ，它并发能力强，性能好，延时低，管理界面也很丰富，只是吞吐量较低，但对于不是特别依赖大数据的项目来说，选用 RabbitMQ 已经足够用了。</p><p>RocketMQ 是阿里开源项目，吞吐量是最高的（10 万次级），但免费版的 MQ 是阉割版的，容易出问题。</p><p>Kafka 吞吐量很大（10 万次级），但它不是真正的 MQ，只是类似 MQ 的产品，它只支持主要 MQ 功能，比如它不具有消息确认机制。</p><h3 id="什么是-RabbitMQ？">什么是 RabbitMQ？</h3><p>RabbitMQ 是一款开源的，Erlang 编写的，基于 AMQP 协议的消息中间件。</p><h4 id="什么是-AMQP-协议？">什么是 AMQP 协议？</h4><p>AMQP 一个提供统一消息服务的应用层标准高级消息队列的链接协议，RabbitMQ 是主要根据 AMQP 协议进行数据通信和传输的。有点类似于 HTTP 协议。</p><h4 id="AMPQ-与-JMS-有什么区别知道吗？">AMPQ 与 JMS 有什么区别知道吗？</h4><p>JMS 是定义了统一的接口（API），来对消息操作进行统一；AMQP 是通过规定协议来统一数据交互的格式。</p><p>JMS 限定了必须使用 Java 语言；AMQP 只是协议，不规定实现方式，因此是跨语言的。</p><p>JMS 规定了两种消息模式；而 AMQP 的消息模式更加丰富。</p><h2 id="你使用的是-SpringCloud，Feign-可以进行远程调用，为什么还要中间加一个-MQ-呢？">你使用的是 SpringCloud，Feign 可以进行远程调用，为什么还要中间加一个 MQ 呢？</h2><p>为了解耦，如果没有中间件进行处理，那两个系统之间的关系过于紧密，一方改动，另一方也必须改动。</p><h3 id="MQ-有哪些优势？">MQ 有哪些优势？</h3><ol><li class="lvl-3"><p><strong>应用解耦（核心）：降低系统的耦合性，提升可维护性。</strong><br>场景：服务调用之间都可以考虑 MQ。</p></li><li class="lvl-3"><p><strong>异步提速：提升用户体验和系统吞吐量。</strong><br>场景：发送订单消息、发送短信消息等。</p></li><li class="lvl-3"><p><strong>削峰填谷：减少高峰时期对服务器的压力。</strong><br>场景：秒杀活动、限时定购等。</p></li></ol><h2 id="RabbitMQ-有什么缺点？">RabbitMQ 有什么缺点？</h2><ol><li class="lvl-3"><p><strong>系统可用性降低</strong><br>本来系统运行好好的，现在你非要加入个消息队列进去，那消息队列挂了，你的系统不是呵呵了。因此，系统可用性会降低。</p></li><li class="lvl-3"><p><strong>系统复杂度提高</strong><br>加入了消息队列，要多考虑很多方面的问题，比如：一致性问题、如何保证消息不被重复消费、如何保证消息可靠性传输等。因此，需要考虑的东西更多，复杂性增大。</p></li><li class="lvl-3"><p><strong>一致性问题</strong><br>A 系统处理完了直接返回成功了，人都以为你这个请求就成功了；但是问题是，要是 BCD 三个系统那里，BD 两个系统写库成功了，结果 C 系统写库失败了，咋整？你这数据就不一致了。</p></li><li class="lvl-3"><p><strong>消息顺序问题</strong><br>如果有 A、B 两个消息，B 消息被消费者消费的前提是 A 消息已被执行，这时候就不能先执行 B，得先执行 A 才行。</p></li></ol><h3 id="那怎么解决以上缺点呢？">那怎么解决以上缺点呢？</h3><ol><li class="lvl-3"><p><strong>系统可用性降低：集群模式保证高可用。</strong><br>镜像集群模式：这种模式，才是所谓的 RabbitMQ 的高可用模式。跟普通集群模式不一样的是，在镜像集群模式下，你创建的 queue，无论元数据还是 queue 里的消息都会存在于多个实例上，就是说，每个 RabbitMQ 节点都有这个 queue 的一个完整镜像，包含 queue 的全部数据的意思。然后每次你写消息到 queue 的时候，都会自动把消息同步到多个实例的 queue 上。RabbitMQ 有很好的管理控制台，就是在后台新增一个策略，这个策略是镜像集群模式的策略，指定的时候是可以要求数据同步到所有节点的，也可以要求同步到指定数量的节点，再次创建 queue 的时候，应用这个策略，就会自动将数据同步到其他的节点上去了。这样的话，好处在于，你任何一个机器宕机了，没事儿，其它机器（节点）还包含了这个 queue 的完整数据，别的 consumer 都可以到其它节点上去消费数据。坏处在于，第一，这个性能开销也太大了吧，消息需要同步到所有机器上，导致网络带宽压力和消耗很重！RabbitMQ 一个 queue 的数据都是放在一个节点里的，镜像集群下，也是每个节点都放这个 queue 的完整数据。</p></li><li class="lvl-3"><p><strong>系统复杂度提高</strong><br>加入 Rabbit 确实会增加系统复杂度，但 MQ 的解耦、提速、削峰这些方面的收益超过管理 MQ 的成本，所以该用还得用。</p></li><li class="lvl-3"><p><strong>一致性问题</strong><br>RabbitMQ 分布式消息是最终一致性的，即使可能因为消息失败而导致前后消息不一致，但分布式系统是在不同服务器上的，不能像简单的本地回滚一样，所以它通过发送延迟消息和定时消息来进行消息补偿，保证最终消息是一致性的，即是一个完整的事务。<br>RabbitMQ 本身是有事务的功能的，但是分布式的事务处理效率太低，且发生问题的可能性不高，所以多是选择放弃强一致性，而采用最终一致性。</p></li><li class="lvl-3"><p><strong>消息顺序问题</strong><br>在 MQ 中将有顺序要求的 AB 两个消息分别用两个队列与两个消费端手工 ack 接收，并且在消息上需要有对应的同组编号信息，以及发送次数，如果 B 执行的前提是已经消费了 A，那需要在消费端判断 A 消息是否已经正确接收（也就是查询成功的消息库）。如果 A 已经消费成功，则消费 B，如果 A 消费失败，或者 A 还没有消费，则 B 消息也直接返回为消息失败，并且不重回队列。并且让消息提供方重新发送 AB 消息，如果连续三次发送消息仍然消费失败，则 AB 两个消息第四次处理时就扔入死信队列中，等待人工处理。</p></li></ol><h3 id="RabbitMQ-事务是怎么实现的？">RabbitMQ 事务是怎么实现的？</h3><p>事务的实现主要是对信道（Channel）的设置，主要的方法有三个：</p><ol><li class="lvl-3"><p>channel.txSelect() 声明启动事务模式；</p></li><li class="lvl-3"><p>channel.txComment() 提交事务；</p></li><li class="lvl-3"><p>channel.txRollback() 回滚事务；</p></li></ol><h2 id="RabbitMQ-的实现原理是怎么样子的？">RabbitMQ 的实现原理是怎么样子的？</h2><p>首先，消息提供方会和 RabbitMQ 之间建立起 TCP 连接（Connection），每个连接中会有多个通信的信道（channel）来提连通信效率，不同的信道之间通过信道 id 来实现信息隔离。</p><p>而在 RabbitMQ 中，消息提供者发出的消息会先到 RabbitMQ 中的交换机中，由交换机根据分发规则，通过队列的形式分发消息。</p><p>消息接收方与 RabbitMQ 之间也一样是通过 TCP 连接和信道建立连接和通信。</p><p>此外，在 RabbitMQ 中，交换机与队列之间不同的边接方式，也产生了不同的工作模式。</p><h3 id="RabbitMQ-有哪些工作模式？">RabbitMQ 有哪些工作模式？</h3><ol><li class="lvl-3"><p>简单模式：就是不通过交换机，消息直接通过队列，一对一收发。</p></li><li class="lvl-3"><p>工作队列模式：也是不通过交换机，消息直接通过队列，只是一个发送方可以有多个接收端。</p></li><li class="lvl-3"><p>发布订阅模式：由交换机分发消息到不同队列，每个消费者只监听自己的队列。</p></li><li class="lvl-3"><p>路由模式：由交换机分发消息，但是发送方需要指定路由 key，交换机会根据不同的 routing key 分发给不同的队列，消费方对应自己需要的队列。</p></li><li class="lvl-3"><p>通配符模式：和路由模式有些相近，只是通配符模式可以在绑定 routing key 时使用通配符。</p></li><li class="lvl-3"><p>RPC 模式：RPC 远程调用模式，严格来说不太算是 MQ。</p></li></ol><h4 id="为什么-RPC-严格来说不能算是-MQ？">为什么 RPC 严格来说不能算是 MQ？</h4><p>RPC，远程过程调用，实际上是一种技术思想，而一种规范或协议，一般来说 RPC 远程调用是同步通信的，且 RPC 模式是没有队列的，多用在立即等待返回处理结果的场景，比如使用基于 RPC 思想的 Dubbo。而 MQ 是用来异步提速的，所以严格来说，RPC 模式不能算是 MQ。</p><h4 id="消息怎么路由？">消息怎么路由？</h4><ul class="lvl-0"><li class="lvl-2"><p>消息提供方 -&gt;路由 -&gt;一至多个队列消息发布到交换器时，消息将拥有一个路由键（routing key），在消息创建时设定。通过队列路由键，可以把队列绑定到交换器上。消息到达交换器后，RabbitMQ 会将消息的路由键与队列的路由键进行匹配（针对不同的交换器有不同的路由规则）；</p></li><li class="lvl-2"><p>常用的交换器主要分为一下三种：</p><ul class="lvl-2"><li class="lvl-6">fanout：如果交换器收到消息，将会广播到所有绑定的队列上。</li><li class="lvl-6">direct：如果路由键完全匹配，消息就被投递到相应的队列。</li><li class="lvl-6">topic：可以使来自不同源头的消息能够到达同一个队列。 使用 topic 交换器时，可以使用通配符。</li></ul></li></ul><h4 id="消息基于什么传输？">消息基于什么传输？</h4><p>由于 TCP 连接的创建和销毁开销较大，且并发数受系统资源限制，会造成性能瓶颈。RabbitMQ 使用信道的方式来传输数据。信道是建立在真实的 TCP 连接内的虚拟连接，且每条 TCP 连接上的信道数量没有限制。</p><h2 id="RabbitMQ-中的交换机可以储存消息吗？">RabbitMQ 中的交换机可以储存消息吗？</h2><p>不可以。交换机只负责转发消息，不具备存储消息的能力。</p><h2 id="如何防止消息丢失呢？">如何防止消息丢失呢？</h2><ol><li class="lvl-3"><p>在生产者丢失——confirm 确认模式</p><ol><li class="lvl-7">使用 RabbitMQ 事务机制，但它是同步的，且很耗性能。</li><li class="lvl-7">开启 confirm 确认模式，确认消息是否从“生产者”发送到“交换机”，成功回传 ack 消息，失败可以重试或抛异常。且 confirm 模式是异步回调接口通知 MQ 是否接收到消息。一般都采用这种方式。</li></ol></li><li class="lvl-3"><p>在 MQ 中丢失——持久化</p><ol><li class="lvl-7">开启 RabbitMQ 持久化，防止 RabbitMQ 自己弄丢数据。除非极小概率还没来得及持久化，MQ 就先挂了，即使这样，也只会丢失极少的数据量。</li><li class="lvl-7">所以，持久化可以跟生产者那边的 confirm 机制配合起来，只有消息被持久化到磁盘之后，才会通知生产者 ack 了，所以哪怕是在持久化到磁盘之前，RabbitMQ 挂了，数据丢了，生产者收不到 ack，你也是可以自己重发的。</li><li class="lvl-7">但持久化的过程也是很耗性能的。</li></ol></li><li class="lvl-3"><p>在消费者丢失——ack 机制</p><ol><li class="lvl-7">用 RabbitMQ 提供的 ack 机制，简单来说，就是你必须关闭 RabbitMQ 的自动 ack，可以通过一个 api 来调用就行，然后每次你自己代码里确保处理完的时候，再在程序里 ack 一把。这样的话，如果你还没处理完，不就没有 ack 了？那 RabbitMQ 就认为你还没处理完，这个时候 RabbitMQ 会把这个消费分配给别的 consumer 去处理，消息是不会丢的。以上三种方式，只是防止丢失，但具体补消息，还需要靠消息的补偿机制（也就是消息的可靠性保证）。</li></ol></li></ol><h2 id="❗RabbitMQ-如何保证消息的可靠性呢？">❗RabbitMQ 如何保证消息的可靠性呢？</h2><p>消息补偿。（延迟消息 + 定时扫描）</p><ul class="lvl-0"><li class="lvl-2"><p>由生产者发送消息给 MQ，MQ 会将消息给到消费者，消息者收到消息后，会返回一个消息确认，这个“消息确认”会被 MQ 放到“回调检查服务”中，“回调检查服务”会将收到的消息给到定时检查的 MDB。</p></li><li class="lvl-2"><p>但在这个过程中，如果出现异常或者网络波动，就会导致消息到不了回调检查服务，所以为了保证能够消息可靠性，会由生产者延迟一段时间后，再发送一个相同的消息给 MQ，这个消息会直接被 MQ 发送到回调检查服务。</p></li><li class="lvl-2"><p>回调检查服务会将延迟发送的消息和 MDB 中的消息对比，如果 MDB 中没有该消息，就会调用生产者，让生产者重新发送消息。</p></li><li class="lvl-2"><p>但在以上过程，还可能出现“延迟发送消息”也出问题，为了更深层保证消息的可靠性，还需要一个定时检查服务，每隔一段固定时间，定时检查服务会将 MDB 里的消息和 DB 中的消息进行匹配（检查某个时间段的表，而不是全表扫描），如果有 MDB 缺失的消息，就会调用生产者重新发送消息。</p></li></ul><h2 id="什么是-TTL？什么是死信队列，消息成为死信有哪几种情况？什么是延迟队列？">什么是 TTL？什么是死信队列，消息成为死信有哪几种情况？什么是延迟队列？</h2><ul class="lvl-0"><li class="lvl-2"><p>TTL：全称 Time To Live（存活时间/过期时间）</p><ol><li class="lvl-7">如果给消息设置过期时间，即使到了过期时间，消息也不会立马被清除，只有等消息到了队列的头上，才会被判断是否过期清除。</li><li class="lvl-7">如果给整个队列设置过期时间，即每一个进入队列的消息，都会各自被设置为了相同的过期时间。而非整个队列定时隔一段时间清除。</li><li class="lvl-7">如果单独消息和整个队列两则都设置了过期时间，以时间短的为准。</li></ol></li><li class="lvl-2"><p>死信队列：英文缩写：DLX  。Dead Letter Exchange（死信交换机）</p><ul class="lvl-2"><li class="lvl-6">消息成为死信的三种情况：<ol><li class="lvl-11">队列消息长度到达限制；</li><li class="lvl-11">消费者拒接消费消息，basicNack/basicReject,并且不把消息重新放入原目标队列，requeue=false；</li><li class="lvl-11">原队列存在消息过期设置，消息到达超时时间未被消费；</li></ol></li></ul></li><li class="lvl-2"><p>延迟队列：即消息进入队列后不会立即被消费，只有到到达指定时间后，才会被消费。</p><ul class="lvl-2"><li class="lvl-6">RabbitMQ 中并未提供延迟队列功能，采用【TTL】+【死信队列】 组合实现延迟队列的效果。</li></ul></li></ul><h2 id="有几百万消息持续积压几小时，说说怎么解决？">有几百万消息持续积压几小时，说说怎么解决？</h2><p>消息积压处理办法：临时紧急扩容：</p><p>先修复 consumer 的问题，确保其恢复消费速度，然后将现有 consumer 都停掉。</p><p>临时建立好原先 10 倍的 queue 数量。</p><p>然后写一个临时的分发数据的 consumer 程序，这个程序部署上去消费积压的数据，消费之后不做耗时的处理，直接均匀轮询写入临时建立好的 10 倍数量的 queue。</p><p>接着临时征用 10 倍的机器来部署 consumer，每一批 consumer 消费一个临时 queue 的数据。这种做法相当于是临时将 queue 资源和 consumer 资源扩大 10 倍，以正常的 10 倍速度来消费数据。</p><p>等快速消费完积压数据之后，得恢复原先部署的架构，重新用原先的 consumer 机器来消费消息。</p><h2 id="消息队列满了以后该怎么处理">消息队列满了以后该怎么处理</h2><p>没办法了，说明紧急扩容也来不及了，只能“丢弃 + 批量重导”了，写程序快速消费，然后重导。</p><h2 id="RabbitMQ-如何保证消息的不重复消费呢？【重要】">RabbitMQ 如何保证消息的不重复消费呢？【重要】</h2><p>一条数据重复出现两次，数据库里就只有一条数据，这就是保证了系统的幂等性。</p><p>保障了消息的幂等性，同一条消息被重复消费也就不影响了，因为不影响最终执行结果。</p><ol><li class="lvl-3"><p>方法一：采用乐观锁机制保证消息幂等性。在数据库中会增加一个版本字段，执行时也会匹配版本，如果版本不一致，SQL 语句的匹配就不成立，就不会执行。</p></li><li class="lvl-3"><p>方法二：你拿到这个消息做数据库的 insert 操作，那就容易了，给这个消息做一个唯一的主键，那么就算出现重复消费的情况，就会导致主键冲突，避免数据库出现脏数据。</p></li><li class="lvl-3"><p>方法三：你拿到这个消息做 redis 的 set 的操作，那就容易了，不用解决，因为你无论 set 几次结果都是一样的，set 操作本来就算幂等操作。</p></li><li class="lvl-3"><p>方法四：如果上面两种情况还不行，上大招。准备一个第三方介质，来做消费记录。以 redis 为例，给消息分配一个全局 id，只要消费过该消息，将 <code>&lt;id,message&gt;</code> 以 K-V 形式写入 redis。那消费者开始消费前，先去 redis 中查询有没有消费记录即可，先根据这个 id 去比如 redis 里查一下，之前消费过吗？如果没有消费过，你就处理，然后这个 id 写 redis。如果消费过了，那你就别处理了，保证别重复处理相同的消息即可。</p></li></ol><h2 id="如何解决消息队列的延时以及过期失效问题？">如何解决消息队列的延时以及过期失效问题？</h2><p>假设你用的是 RabbitMQ，RabbtiMQ 是可以设置过期时间的，也就是 TTL。如果消息在 queue 中积压超过一定的时间就会被 RabbitMQ 给清理掉，这个数据就没了。这就不是说数据会大量积压在 mq 里，而是大量的数据会直接搞丢。</p><p>我们可以采取一个方案，就是批量重导，这个我们之前线上也有类似的场景干过。就是大量积压的时候，我们当时就直接丢弃数据了，然后等过了高峰期以后，比如大家一起喝咖啡熬夜到晚上 12 点以后，用户都睡觉了。这个时候我们就开始写程序，将丢失的那批数据（发送的数据库和确认接收的数据库匹配），写个临时程序，一点一点的查出来，然后重新灌入 mq 里面去，把白天丢的数据给他补回来。也只能是这样了。</p><p>假设 1 万个订单积压在 mq 里面，没有处理，其中 1000 个订单都丢了，你只能手动写程序把那 1000 个订单给查出来，手动发到 mq 里去再补一次。</p><h2 id="如果要你自己设计一个-MQ，你会怎么设计？">如果要你自己设计一个 MQ，你会怎么设计？</h2><ol><li class="lvl-3"><p>重启起一个服务器来（使用 Redis）充当 RabbitMQ，实现 MQ 的解耦功能。</p></li><li class="lvl-3"><p>这个服务器需要可以存储和转发消息，存储是为了实现永久化，防止服务器出问题，消息丢失；转发消息则是可以通过不同队列来实现指定消费端，实现异步提速功能和削峰填谷的功能。</p></li><li class="lvl-3"><p>建立消息补尝机制，防止消息丢失。</p></li></ol><h3 id="怎么使用-Redis-实现-MQ-功能呢？">怎么使用 Redis 实现 MQ 功能呢？</h3><ol><li class="lvl-3"><p>使用 list 类型保存数据信息，rpush 生产消息，lpop 消费消息，当 lpop 没有消息时，可以 sleep 一段时间，然后再检查有没有信息，如果不想 sleep 的话，可以使用 blpop, 在没有信息的时候，会一直阻塞，直到信息的到来。redis 可以通过 pub/sub 主题订阅模式实现一个生产者，多个消费者，当然也存在一定的缺点，当消费者下线时，生产的消息会丢失。</p></li><li class="lvl-3"><p>使用 sortedset，使用时间戳做 score, 消息内容作为 key，调用 zadd 来生产消息，消费者使用 zrangbyscore 获取 n 秒之前的数据做轮询处理。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
❗表示必掌握，❔表示基本不会问&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-08-22 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="面试" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>跨域产生的原因及解决方案</title>
    <link href="https://kiml.github.io/posts/f5b0876a/"/>
    <id>https://kiml.github.io/posts/f5b0876a/</id>
    <published>2024-08-22T01:19:30.000Z</published>
    <updated>2024-08-22T15:51:14.653Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>面试必会，总结一下</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-08-22 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="跨域的原因">跨域的原因</h2><p>跨域是是因为浏览器的同源策略限制，是浏览器的一种安全机制，服务端之间是不存在跨域的。</p><p>所谓同源指的是两个页面具有相同的协议、主机和端口，三者有任一不相同即会产生跨域。</p><h2 id="跨域举例">跨域举例</h2><table><thead><tr><th>当前页面 url</th><th>被请求页面 url</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><a class="link"   href="http://www.test.com/" >http://www.test.com/<i class="fas fa-external-link-alt"></i></a></td><td><a class="link"   href="http://www.test.com/index.html" >http://www.test.com/index.html<i class="fas fa-external-link-alt"></i></a></td><td>否</td><td>同源（协议、域名、端口号相同）</td></tr><tr><td><a class="link"   href="http://www.test.com/" >http://www.test.com/<i class="fas fa-external-link-alt"></i></a><br></td><td><a class="link"   href="https://www.test.com/index.html" >https://www.test.com/index.html<i class="fas fa-external-link-alt"></i></a></td><td>跨域</td><td>协议不同</td></tr><tr><td><a class="link"   href="http://www.test.com/" >http://www.test.com/<i class="fas fa-external-link-alt"></i></a></td><td><a class="link"   href="http://www.baidu.com/" >http://www.baidu.com/<i class="fas fa-external-link-alt"></i></a></td><td>跨域</td><td>主域名不同</td></tr><tr><td><a class="link"   href="http://www.test.com/" >http://www.test.com/<i class="fas fa-external-link-alt"></i></a><br></td><td><a class="link"   href="http://blog.test.com/" >http://blog.test.com/<i class="fas fa-external-link-alt"></i></a></td><td>跨域</td><td>子域名不同</td></tr><tr><td><a class="link"   href="http://www.test.com:8080/" >http://www.test.com:8080/<i class="fas fa-external-link-alt"></i></a><br></td><td><a class="link"   href="http://www.test.com:7071/" >http://www.test.com:7071/<i class="fas fa-external-link-alt"></i></a></td><td>跨域</td><td>端口号不同</td></tr></tbody></table><h2 id="跨域的解决办法">跨域的解决办法</h2><p>以下跨域解决方式选择一种，重复配置不会生效。</p><h3 id="Java-配置">Java 配置</h3><blockquote><ol><li class="lvl-3"><p>使用 @CrossOrigin 注解实现跨域【局域类跨域】（一般不用，没有记录）</p></li><li class="lvl-3"><p>通过配置文件实现跨域【全局跨域】</p></li><li class="lvl-3"><p>通过 CorsFilter 对象实现跨域【全局跨域】</p></li><li class="lvl-3"><p>通过 Response 对象实现跨域【局域方法跨域】（一般不用，没有记录）</p></li><li class="lvl-3"><p>通过实现 ResponseBodyAdvice 实现跨域【全局跨域】（一般不用，没有记录）</p></li></ol></blockquote><ol><li class="lvl-3"><p>通过配置文件实现跨域（重写 WebMvcConfigurer）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CorsConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowedHeaders(<span class="string">&quot;*&quot;</span>)</span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)</span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;PATCH&quot;</span>)</span><br><span class="line">                .maxAge(<span class="number">3600</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>返回新的 CorsFilter（跨域配置）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsFilter <span class="title function_">corsFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//1. 添加 CORS配置信息</span></span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 放行哪些原始域</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 是否发送 Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">// 放行哪些请求方式</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行哪些原始请求头部信息</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 暴露哪些头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 添加映射路径</span></span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">corsConfigurationSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        corsConfigurationSource.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,config);</span><br><span class="line">        <span class="comment">//3. 返回新的CorsFilter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsFilter</span>(corsConfigurationSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx-配置">Nginx 配置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  your_domain.com;</span><br><span class="line">    location /api &#123;</span><br><span class="line">        # 允许跨域请求的域名，* 表示允许所有域名访问</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Origin&#x27; &#x27;*&#x27;;</span><br><span class="line"></span><br><span class="line">        # 允许跨域请求的方法</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Methods&#x27; &#x27;GET, POST, OPTIONS&#x27;;</span><br><span class="line"></span><br><span class="line">        # 允许跨域请求的自定义 Header</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Headers&#x27; &#x27;Origin, X-Requested-With, Content-Type, Accept&#x27;;</span><br><span class="line"></span><br><span class="line">        # 允许跨域请求的 Credential</span><br><span class="line">        add_header &#x27;Access-Control-Allow-Credentials&#x27; &#x27;true&#x27;;</span><br><span class="line"></span><br><span class="line">        # 预检请求的存活时间，即 Options 请求的响应缓存时间</span><br><span class="line">        add_header &#x27;Access-Control-Max-Age&#x27; 3600;</span><br><span class="line"></span><br><span class="line">        # 处理预检请求</span><br><span class="line">        if ($request_method = &#x27;OPTIONS&#x27;) &#123;</span><br><span class="line">            return 204;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    # 其他配置...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Gateway-网关配置">Gateway 网关配置</h3><blockquote><ol><li class="lvl-3"><p>通过在配置文件中配置跨域实现。</p></li><li class="lvl-3"><p>通过在框架中添加 CorsWebFilter 来解决跨域问题。</p></li></ol></blockquote><ol><li class="lvl-3"><p>通过在配置文件中配置跨域实现。</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line"><span class="attr">gateway:</span>  </span><br><span class="line">  <span class="attr">globalcors:</span>  </span><br><span class="line">    <span class="attr">cors-configurations:</span>  </span><br><span class="line">      <span class="string">&#x27;[/**]&#x27;</span><span class="string">:</span> <span class="comment"># 匹配所有请求  </span></span><br><span class="line">        <span class="attr">allowedHeaders:</span> <span class="string">&quot;*&quot;</span>  </span><br><span class="line">        <span class="attr">allowedOrigins:</span> <span class="string">&quot;*&quot;</span> <span class="comment">#跨域处理 允许所有的域  </span></span><br><span class="line">        <span class="attr">allowedMethods:</span> <span class="comment"># 支持的方法  </span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">GET</span>  </span><br><span class="line">          <span class="bullet">-</span> <span class="string">POST</span>  </span><br><span class="line">          <span class="bullet">-</span> <span class="string">PUT</span>  </span><br><span class="line">          <span class="bullet">-</span> <span class="string">DELETE</span>  </span><br><span class="line">          <span class="bullet">-</span> <span class="string">OPTIONS</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>通过在框架中添加 CorsWebFilter 来解决跨域问题。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 Spring-Framework 从 5.3 版本之前，使用以下代码可以让 Spring Cloud Gateway 网关允许跨域：</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 这里仅为了说明问题，配置为放行所有域名，生产环境请对此进行修改</span></span><br><span class="line">        config.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行的请求头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行的请求类型，有 GET, POST, PUT, DELETE, OPTIONS</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 暴露头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 是否允许发送 Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>); </span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 而 Spring-Framework 5.3 版本之后，关于 CORS 跨域配置类 CorsConfiguration 中将 addAllowedOrigin 方法名修改为 addAllowedOriginPattern，因此配置了变成了以下这样：</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalCorsConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CorsWebFilter <span class="title function_">corsWebFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CorsConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CorsConfiguration</span>();</span><br><span class="line">        <span class="comment">// 这里仅为了说明问题，配置为放行所有域名，生产环境请对此进行修改</span></span><br><span class="line">        config.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行的请求头</span></span><br><span class="line">        config.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 放行的请求类型，有 GET, POST, PUT, DELETE, OPTIONS</span></span><br><span class="line">        config.addAllowedMethod(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 暴露头部信息</span></span><br><span class="line">        config.addExposedHeader(<span class="string">&quot;*&quot;</span>); </span><br><span class="line">        <span class="comment">// 是否允许发送 Cookie</span></span><br><span class="line">        config.setAllowCredentials(<span class="literal">true</span>); </span><br><span class="line">        <span class="type">UrlBasedCorsConfigurationSource</span> <span class="variable">source</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlBasedCorsConfigurationSource</span>();</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, config);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CorsWebFilter</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
面试必会，总结一下&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-08-22 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="bug记录" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/"/>
    
    <category term="2024" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/2024/"/>
    
    
  </entry>
  
  <entry>
    <title>【代码模板】延时任务</title>
    <link href="https://kiml.github.io/posts/f6ca592/"/>
    <id>https://kiml.github.io/posts/f6ca592/</id>
    <published>2024-08-18T13:40:41.000Z</published>
    <updated>2024-08-19T00:28:47.072Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言</p></li></ul><blockquote><p>业务场景：<br>1、生成订单 30 分钟未支付，则自动取消（延时任务）<br>2、生成订单 60 秒后，给用户发短信（延时任务）<br>…</p></blockquote><ul class="lvl-0"><li class="lvl-2">更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-08-18 初始记录（从原先的笔记进行搬运）</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="定时任务与延时任务的区别">定时任务与延时任务的区别</h2><ul class="lvl-0"><li class="lvl-2"><p>定时任务有明确的触发时间，延时任务没有</p></li><li class="lvl-2"><p>定时任务有执行周期，而延时任务在某事件触发后一段时间内执行，没有执行周期</p></li><li class="lvl-2"><p>定时任务一般执行的是批处理操作是多个任务，而延时任务一般是单个任务</p></li></ul><h2 id="解决思路">解决思路</h2><h3 id="数据库定时轮询（定时任务）">数据库定时轮询（定时任务）</h3><blockquote><p>通常在小型项目中使用，即通过一个线程定时的去扫描数据库，通过订单时间来判断是否有超时的订单，然后进行 update 或 delete 等操作。</p></blockquote><h4 id="实现">实现</h4><p>通过 springBoot 中的@Schedule 进行实现</p><h4 id="步骤">步骤</h4><ol><li class="lvl-3"><p>在启动类上添加注解@EnableScheduling</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span>  </span><br><span class="line"><span class="meta">@EnableScheduling</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleAppcation</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        SpringApplication.run(ScheduleAppcation.class, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>在目标类上添加注解</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 目标任务执行完后，延迟10s执行。</span></span><br><span class="line"><span class="meta">@Scheduled(fixedDelay = 10 * 1000)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJob01</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// cron表达式</span></span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;0 0 6 * * ?&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJob01</span><span class="params">()</span> &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点">优缺点</h4><ul class="lvl-0"><li class="lvl-2"><p>存在延时，定时任务默认是单线程执行，前一个任务阻塞会影响后一个任务的执行</p></li><li class="lvl-2"><p>数据库数据量大的情况下，扫描损耗巨大</p></li></ul><h3 id="JDK-的延迟队列">JDK 的延迟队列</h3><blockquote><p>该方案是利用 JDK 自带的 DelayQueue 来实现，这是一个无界阻塞队列，该队列只有在延迟期满的时候才能从中获取元素，放入 DelayQueue 中的对象，是必须实现 Delayed 接口的。</p></blockquote><p>DelayQueue 属于排序队列，它的特殊之处在于队列的元素必须实现 Delayed 接口，该接口需要实现 compareTo 和 getDelay 方法</p><p><strong>getDelay 方法</strong>：获取元素在队列中的剩余时间，只有当剩余时间为 0 时元素才可以出队列。</p><p><strong>compareTo 方法</strong>：用于排序，确定元素出队列的顺序。</p><h4 id="实现-2">实现</h4><p>利用 JDK 自带的 DelayQueue 来实现</p><h4 id="步骤-2">步骤</h4><ol><li class="lvl-3"><p>在测试包 jdk 下创建延迟任务元素对象 DelayedTask，实现 compareTo 和 getDelay 方法</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DelayedTask</span>  <span class="keyword">implements</span> <span class="title class_">Delayed</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 任务的执行时间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">executeTime</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">DelayedTask</span><span class="params">(<span class="type">int</span> delay)</span>&#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        calendar.add(Calendar.SECOND,delay);</span><br><span class="line">        <span class="built_in">this</span>.executeTime = (<span class="type">int</span>)(calendar.getTimeInMillis() /<span class="number">1000</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素在队列中的剩余时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> unit</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getDelay</span><span class="params">(TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">calendar</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        <span class="keyword">return</span> executeTime - (calendar.getTimeInMillis()/<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素排序</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> o</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Delayed o)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">val</span> <span class="operator">=</span> <span class="built_in">this</span>.getDelay(TimeUnit.NANOSECONDS) - o.getDelay(TimeUnit.NANOSECONDS);</span><br><span class="line">        <span class="keyword">return</span> val == <span class="number">0</span> ? <span class="number">0</span> : ( val &lt; <span class="number">0</span> ? -<span class="number">1</span>: <span class="number">1</span> );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>在 main 方法中创建 DelayQueue 并向延迟队列中添加三个延迟任务</p></li><li class="lvl-3"><p>循环的从延迟队列中拉取任务</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">DelayQueue&lt;DelayedTask&gt; queue = <span class="keyword">new</span> <span class="title class_">DelayQueue</span>&lt;DelayedTask&gt;();</span><br><span class="line"></span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">DelayedTask</span>(<span class="number">5</span>));</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">DelayedTask</span>(<span class="number">10</span>));</span><br><span class="line">queue.add(<span class="keyword">new</span> <span class="title class_">DelayedTask</span>(<span class="number">15</span>));</span><br><span class="line"></span><br><span class="line">System.out.println(System.currentTimeMillis()/<span class="number">1000</span>+<span class="string">&quot; start consume &quot;</span>);</span><br><span class="line"><span class="keyword">while</span>(queue.size() != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="type">DelayedTask</span> <span class="variable">delayedTask</span> <span class="operator">=</span> queue.poll();</span><br><span class="line"><span class="keyword">if</span>(delayedTask !=<span class="literal">null</span> )&#123;</span><br><span class="line">System.out.println(System.currentTimeMillis()/<span class="number">1000</span>+<span class="string">&quot; cosume task&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//每隔一秒消费一次</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优缺点-2">优缺点</h4><ul class="lvl-0"><li class="lvl-2"><p>数据存储在内存中，容易出现 OOM（Out Of Memory）异常</p></li><li class="lvl-2"><p>服务器宕机后，内存中的数据容易丢失</p></li></ul><h3 id="Redis-缓存">Redis 缓存</h3><h4 id="实现-3">实现</h4><p>利用 Redis 中 Key 的过期时间</p><h4 id="步骤-3">步骤</h4><ol><li class="lvl-3"><p>给 Redis 中 Key 设置过期时间</p></li><li class="lvl-3"><p>监听 Redis 中 Key 过期事件</p></li><li class="lvl-3"><p>获取过期 Key 对应的值进行消费</p><ul class="lvl-2"><li class="lvl-6">过期 Key 拿不到值<ul class="lvl-4"><li class="lvl-10">可以把信息存储到 Key 上（监听事件可以获取到即将过期的 key，可以将文章 id 存储到 redis 中）</li><li class="lvl-10">存储一份不过期的对应 Key，在 Key 过期时获取这个不过期 Key 取值再删除</li></ul></li></ul></li></ol><h4 id="优缺点-3">优缺点</h4><ul class="lvl-0"><li class="lvl-2"><p>若 Redis 监听过期 Key 的微服务是多个集群时，只能有一个微服务处理，需要引入分布式锁，性能会下降。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.heima.common.redislock;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisLockImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisLock</span> &#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;String&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;String&gt;();</span><br><span class="line"><span class="keyword">private</span> ThreadLocal&lt;Integer&gt; threadLocalInteger = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key, <span class="type">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class="line"><span class="type">Boolean</span> <span class="variable">isLocked</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">if</span> (threadLocal.get() == <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="type">String</span> <span class="variable">uuid</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">threadLocal.set(uuid);</span><br><span class="line">isLocked = stringRedisTemplate.opsForValue().setIfAbsent(key, uuid, timeout, unit);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">isLocked = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 重入次数加1</span></span><br><span class="line"><span class="keyword">if</span> (isLocked) &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> threadLocalInteger.get() == <span class="literal">null</span> ? <span class="number">0</span> : threadLocalInteger.get();</span><br><span class="line">threadLocalInteger.set(count++);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> isLocked;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">releaseLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line"><span class="comment">// 判断当前线程所对应的uuid是否与Redis对应的uuid相同，再执行删除锁操作</span></span><br><span class="line"><span class="keyword">if</span> (threadLocal.get().equals(stringRedisTemplate.opsForValue().get(key))) &#123;</span><br><span class="line"><span class="type">Integer</span> <span class="variable">count</span> <span class="operator">=</span> threadLocalInteger.get();</span><br><span class="line"><span class="comment">// 计数器减为0时才能释放锁</span></span><br><span class="line"><span class="keyword">if</span> (count == <span class="literal">null</span> || --count &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用-MQ-实现延时任务">使用 MQ 实现延时任务</h3><h4 id="实现-4">实现</h4><blockquote><p>内链：[[消息队列的选型与优缺点]]<br>外链：<a class="link"   href="https://kiml.site/posts/359ee88a/" >消息队列的选型与优缺点<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="优缺点-4">优缺点</h4><ul class="lvl-0"><li class="lvl-2"><p>高效，可以利用 MQ 的分布式特性轻易的进行横向扩展，消息支持持久化增加了可靠性。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;业务场景：&lt;br&gt;
1、生成订单 30 分钟未支付，则自动取消（延时任务）&lt;br&gt;
2、生成订单 60 秒后，给用户发短信（延时任务）&lt;br&gt;
…&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;更新&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-08-18 初始记录（从原先的笔记进行搬运）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>Freemarker 基础</title>
    <link href="https://kiml.github.io/posts/e9ae925d/"/>
    <id>https://kiml.github.io/posts/e9ae925d/</id>
    <published>2024-07-23T13:26:20.000Z</published>
    <updated>2024-08-12T04:01:12.364Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>Java 开发的模板引擎。官网模板：<a class="link"   href="https://freemarker.apache.org/docs/dgui_quickstart_basics.html" >Template + data-model = output - Apache FreeMarker Manual<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-07-23 初始记录</span><br><span class="line">24-07-26 bug记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="快速入门">快速入门</h2><p>freemarker 作为 springmvc 一种视图格式，默认情况下 SpringMVC 支持 freemarker 视图格式。</p><h3 id="Maven-依赖">Maven 依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--父工程指定SpringBoot版本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--freemarker依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring‐boot‐starter‐freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件">配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># freemarker基本配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">freemarker:</span></span><br><span class="line">    <span class="attr">charset:</span> <span class="string">utf-8</span></span><br><span class="line">    <span class="string">request‐context‐attribute:</span> <span class="string">rc</span></span><br><span class="line">    <span class="string">content‐type:</span> <span class="string">text/html</span></span><br><span class="line">    <span class="attr">suffix:</span> <span class="string">.html</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line">  <span class="string">add‐mappings:</span> <span class="literal">false</span> <span class="comment">#关闭工程中默认的资源处理</span></span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line">  <span class="string">throw‐exception‐if‐no‐handler‐found:</span> <span class="literal">true</span> <span class="comment">#出现错误时直接抛出异常</span></span><br></pre></td></tr></table></figure><h3 id="代码使用">代码使用</h3><ol><li class="lvl-3"><p>添加 view 映射</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> &#123;  </span><br><span class="line">    <span class="comment">// 注意这里不要添加后缀</span></span><br><span class="line">        registry.addViewController(<span class="string">&quot;/pay-page&quot;</span>).setViewName(<span class="string">&quot;pay&quot;</span>);  </span><br><span class="line">        registry.addViewController(<span class="string">&quot;/pay-error&quot;</span>).setViewName(<span class="string">&quot;pay_error&quot;</span>);  </span><br><span class="line">     &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>返回 Controller 注解不要加 <code>@ResponseBody</code> 或 <code>@RestController</code>（<mark>这个注解把返回的信息转成 json 返回，不能实现页面跳转的功能</mark>）</p></li><li class="lvl-3"><p>返回使用 <code>forward:</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/pay-error&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="基础指令">基础指令</h2><blockquote><p>1、注释，即 <code>&lt;#‐‐和‐‐&gt;</code>，介于其之间的内容会被 freemarker 忽略<br>2、插值（Interpolation）：即 <code>$&#123;..&#125;</code> 部分，freemarker 会用真实的值代替 <code>$&#123;..&#125; </code><br>3、FTL 指令：和 HTML 标记类似，名字前加 <code>#</code> 予以区分，Freemarker 会解析标签中的表达式或逻辑。<br>4、文本，仅文本信息，这些不是 freemarker 的注释、插值、FTL 指令的内容会被 freemarker 忽略解析，直接输出内容。</p></blockquote><h3 id="List-指令">List 指令</h3><blockquote><p>说明： <code>_index</code>：得到循环的下标，使用方法是在 stu 后边加 <code>_index</code>，它的值是从 0 开始</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Student&gt; stus = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;#list stus as stu&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.mondy&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Map-指令">Map 指令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,Student&gt; stuMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">输出stu1的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap[&#x27;stu1&#x27;].name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap[&#x27;stu1&#x27;].age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">输出stu1的学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">姓名：$&#123;stuMap.stu1.name&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">年龄：$&#123;stuMap.stu1.age&#125;<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">遍历输出两个学生信息：<span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;#list stuMap?keys as k&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;k_index + 1&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[k].name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stuMap[k].age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span> &gt;</span>$&#123;stuMap[k].mondy&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="if-指令">if 指令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>钱包<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;#list stus as stu&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> &lt;#<span class="attr">if</span> <span class="attr">stu.name</span> ==<span class="string">&#x27;小明&#x27;</span>&gt;</span>style=&quot;background:red;&quot;&lt;/#if&gt;&gt;$&#123;stu.name&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$&#123;stu.age&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> &gt;</span>$&#123;stu.mondy&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  &lt;/#list&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="运算符">运算符</h3><ol><li class="lvl-3"><p>算数运算符 FreeMarker 表达式中完全支持算术运算，FreeMarker 支持的算术运算符包括:<code>+</code>, <code>-</code> , <code>*</code> , <code>/</code> , <code>%</code></p></li><li class="lvl-3"><p>逻辑 运算符 逻辑运算符有如下几个: 逻辑与 <code>&amp;&amp;</code> 逻辑或 <code>||</code> 逻辑非 <code>!</code> 逻辑运算符只能作用于布尔值，否则将产生错误</p></li><li class="lvl-3"><p>比较运算符 表达式中支持的比较运算符有如下几个:</p><ol><li class="lvl-7"><code>=</code> 或者 <code>==</code> 判断两个值是否相等</li><li class="lvl-7"><code>!=</code> 判断两个值是否不等</li><li class="lvl-7"><code>&gt;</code> 或者 <code>gt</code> 判断左边值是否大于右边值</li><li class="lvl-7"><code>&gt;=</code> 或者 <code>gte</code> 判断左边值是否大于等于右边值</li><li class="lvl-7"><code>&lt;</code> 或者 <code>lt</code> 判断左边值是否小于右边值</li><li class="lvl-7"><code>&lt;=</code> 或者 <code>lte</code> 判断左边值是否小于等于右边值</li></ol></li></ol><blockquote><p>注意：<code>=</code> 和 <code>!=</code> 可以用于字符串，数值和日期来比较是否相等，但 <code>=</code> 和 <code>!=</code> 两边必须是相同类型的值，否则会产生错误，而且 FreeMarker 是精确比较，“x”,&quot;x &quot;,“X” 是不等的。其它的运行符可以作用于数字和日期，但不能作用于字符串，大部分的时候,使用 <code>gt</code> 等字母运算符代替 <code>&gt;</code> 会有更好的效果,因为 FreeMarker 会把 <code>&gt;</code> 解释成 FTL 标签的结束字符,当然,也可以使用括号来避免这种情况，如：<code>&lt;#if (x&gt;y)&gt;</code></p></blockquote><h3 id="空值处理">空值处理</h3><ol><li class="lvl-3"><p>判断某变量是否存在使用 <code>??</code> 用法为：<code>variable??</code>，如果该变量存在，返回 true，否则返回 false</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;#if stus??&gt;</span><br><span class="line">&lt;#list stus as stu&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>缺失变量默认值使用 <code>!</code> 使用 <code>!</code> 要以指定一个默认值，当变量为空时显示默认值。</p></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;#--如果name为空显示空字符串。--&gt;</span><br><span class="line">$&#123;name!&#x27;&#x27;&#125;</span><br><span class="line">&lt;#--如果stu或bestFriend或name为空默认显示空字符串。--&gt;</span><br><span class="line">$&#123;(stu.bestFriend.name)!&#x27;&#x27;&#125;</span><br></pre></td></tr></table></figure><h3 id="内置对象">内置对象</h3><p>在 freemarker 中可以访问 Request、Session 等内置对象。</p><p>Request： 用于获取 Request 对象中的 attribute 对象。</p><p>Session：用于获取 Session 对象中的 attribute 对象。</p><p>RequestParameters：用于获取 Request 对象的 parameter 参数（浏览器端发送的请求数据）</p><ol><li class="lvl-3"><p>配置</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">freemarker:</span> </span><br><span class="line">    <span class="string">request‐context‐attribute:</span> <span class="string">rc</span> <span class="comment">#把Spring的RequestContext对象暴露为变量rc </span></span><br><span class="line">    <span class="string">expose‐request‐attributes:</span> <span class="literal">true</span> </span><br><span class="line">    <span class="string">expose‐session‐attributes:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>例子在 Controller 中设置 request、session 的属性值</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试内置对象 </span></span><br><span class="line">request.setAttribute(<span class="string">&quot;attr1&quot;</span>,<span class="string">&quot;test&quot;</span>); </span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession(); </span><br><span class="line">session.setAttribute(<span class="string">&quot;session1&quot;</span>, <span class="string">&quot;user1&quot;</span>);</span><br></pre></td></tr></table></figure><p>页面获取数据</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url请求参数：$&#123;RequestParameters[&#x27;param1&#x27;]!&quot;&quot;&#125; </span><br><span class="line">request Attribute:$&#123;Request[&quot;attr1&quot;]!&quot;&quot;&#125; </span><br><span class="line">session Attribute:$&#123;Session[&quot;session1&quot;]!&quot;&quot;&#125; </span><br><span class="line">工程路径：$&#123;rc.contextPath&#125; </span><br><span class="line">请求地址: $&#123;rc.requestUri&#125;</span><br></pre></td></tr></table></figure><h2 id="BUG">BUG</h2><h3 id="访问报错-404">访问报错 404</h3><ol><li class="lvl-3"><p>检查是否添加了 view 映射，注意不要加后缀。</p></li><li class="lvl-3"><p>检查 Controller 层使用的注解：不要加 <code>@ResponseBody</code> 或 <code>@RestController</code>（<mark>这个注解把返回的信息转成 json 返回，不能实现页面跳转的功能</mark>）</p></li><li class="lvl-3"><p><strong>nacos 配置文件读取失败</strong>（<s>不确定原因</s>重启 nacos 后就好了）：使用 nacos 读取配置文件，出现自动装配时 suffix 没有读取到的情况。（本地配置使用.html 可以读取成功，但是放到 nacos 后，FreeMarkerProperties 中的 suffix 属性始终为默认的 <code>.ftl</code>，并且从<strong>springboot2.0</strong>开始默认的 suffix 为 <code>.ftlh</code>）</p><ul class="lvl-2"><li class="lvl-6">但是这里还是建议使用 <code>.ftl</code>，不然后序接口调用处可能会出 bug</li></ul></li></ol>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
Java 开发的模板引擎。官网模板：&lt;a class=&quot;link&quot;   href=&quot;https://freemarker.apache.org/docs/dgui_quickstart_basics.html&quot; &gt;Template + data-model = output - Apache FreeMarker Manual&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-23 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-26 bug记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="Freemarker" scheme="https://kiml.github.io/tags/Freemarker/"/>
    
  </entry>
  
  <entry>
    <title>消息队列的选型与优缺点</title>
    <link href="https://kiml.github.io/posts/359ee88a/"/>
    <id>https://kiml.github.io/posts/359ee88a/</id>
    <published>2024-07-23T08:32:04.000Z</published>
    <updated>2024-09-14T08:06:31.292Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>针对<mark>消息队列</mark>做出的总结。</p></li><li class="lvl-2"><p>参考文章</p></li></ul><blockquote><p><a class="link"   href="https://blog.csdn.net/qq_45173404/article/details/116429302" >RabbitMQ超详细安装教程（Linux）<i class="fas fa-external-link-alt"></i></a></p></blockquote><ul class="lvl-0"><li class="lvl-2">更新</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-07-23 初始记录</span><br><span class="line">24-08-09 补充 RabbitMQ 的延迟消息</span><br></pre></td></tr></table></figure><span id="more"></span><blockquote><p>MQ 全称为 Message Queue。<br>MQ 也被称为消息中间件。<br>MQ 也是微服务之间的通信的一种方式。</p></blockquote><h2 id="为什么使用-MQ">为什么使用 MQ</h2><ol><li class="lvl-3"><p>任务<strong>异步</strong>处理将不需要同步处理的并且耗时长的操作由消息队列通知消息接收方进行异步处理。提高了应用程序的响应时间。</p></li><li class="lvl-3"><p>应用程序<strong>解耦合</strong><br>MQ 相当于一个中介，生产方通过 MQ 与消费方交互，它将应用程序进行解耦合。</p></li><li class="lvl-3"><p><strong>削峰填谷</strong></p></li></ol><h2 id="技术选型对比">技术选型对比</h2><blockquote><p>市面上有哪些消息队列？<br>ActiveMQ，RabbitMQ，ZeroMQ，Kafka，MetaMQ，Redis。</p></blockquote><table><thead><tr><th>消息队列</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>RabbitMQ</td><td>1.支持 AMQP 协议<br>2.基于 erlang 语言开发，高并发性能较好<br>3.工作模式较为灵活 <br>4.支持延迟消息 <br>5.提供较为友好的后台管理页面<br>6.单机部署，1~2WTPS<br></td><td>1.不支持水平扩容 <br>2.不支持事务 <br>3.消息吞吐量三者最差 <br>4.当产生消息堆积，性能下降明显 <br>5.消息重发机制需要手动设置 <br>6.不支持消息重复消费</td></tr><tr><td>RocketMQ</td><td>1.高可用，高吞吐量，海量消息堆积，低延迟性能上，都表现出色 <br>2.api 与架构设计更加贴切业务场景 <br>3.支持顺序消息 <br>4.支持事务消息 <br>5.支持消息过滤 <br>6.支持重复消费 <br>7.支持延迟消息 <br>8.支持消息跟踪 <br>9.天然支持集群、负载均衡 <br>10.支持指定次数和时间间隔的失败消息重发 <br>11.单机部署，5~10WTPS</td><td>1.生态圈相较 Kafka 有所不如 <br>2.消息吞吐量与消息堆积能力也不如 Kafka <br>3.不支持主从自动切换 <br>4.只支持 Java</td></tr><tr><td>Kafka</td><td>1.高可用，高吞吐量，低延迟性能上，都表现出色 <br>2.使用人数多，技术生态圈完善 <br>3.支持顺序消息 <br>4.支持多种客户端 <br>5.支持重复消费</td><td>1.依赖分区，消费者数量受限于分区数 <br>2.单机消息过多时，性能下降明显 <br>3.不支持事务消息 <br>4.不支持指定次数和时间间隔的失败消息重发</td></tr><tr><td>消息中间件对比-选择建议</td><td></td><td></td></tr></tbody></table><table><thead><tr><th>消息中间件</th><th>建议</th></tr></thead><tbody><tr><td>Kafka</td><td>追求高吞吐量，适合产生大量数据的互联网服务的数据收集业务</td></tr><tr><td>RocketMQ</td><td>可靠性要求很高的金融互联网领域，稳定性高，经历了多次阿里双11考验</td></tr><tr><td>RabbitMQ</td><td>性能较好，社区活跃度高，数据量没有那么大，优先选择功能比较完备的RabbitMQ</td></tr></tbody></table><h2 id="RabbitMQ">RabbitMQ</h2><h3 id="基础">基础</h3><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2408/Rabbit%E5%9F%BA%E6%9C%AC%E7%BB%93%E6%9E%84.png"                        alt=""                 ></p><h3 id="安装">安装</h3><h4 id="Windows">Windows</h4><ol><li class="lvl-3"><p>下载 RabbitMQ（<a class="link"   href="https://www.rabbitmq.com/docs/download" >https://www.rabbitmq.com/docs/download<i class="fas fa-external-link-alt"></i></a>）</p></li><li class="lvl-3"><p>下载 Erlang（<a class="link"   href="https://packagecloud.io/rabbitmq/erlang" >https://packagecloud.io/rabbitmq/erlang<i class="fas fa-external-link-alt"></i></a>），并配置环境变量<br><code>Erlang</code> 和 <code>RabbitMQ</code> 版本对照：<a class="link"   href="https://www.rabbitmq.com/which-erlang.html" >https://www.rabbitmq.com/which-erlang.html<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-3"><p>运行 RabbitMQ</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启管理插件</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动rabbitmq</span> </span><br><span class="line">systemctl start rabbitmq-server </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看rabbitmq状态</span> </span><br><span class="line">systemctl status rabbitmq-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置rabbitmq服务开机自启动</span></span><br><span class="line">systemctl enable rabbitmq-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭rabbitmq服务</span></span><br><span class="line">systemctl stop rabbitmq-server</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启rabbitmq服务</span></span><br><span class="line">systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><h4 id="Linux">Linux</h4><h5 id="docker-安装">docker 安装</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1.yum包更新到最新</span></span><br><span class="line">yum update</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2.安装需要的软件包(yum-utils提供yum-config-manager的功能,，并且device mapper存储驱动程序需要device-mapper-persistent-data和lvm2)</span></span><br><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3.设置yum源为阿里云</span></span><br><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4.安装docker</span></span><br><span class="line">yum install docker-ce -y</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">5.安装后查看docker版本</span></span><br><span class="line">docker -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">6.阿里云镜像加速</span></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://73z5h6yb.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装启动rabbitmq容器</span></span><br><span class="line">docker run -d --name 容器名称 -e RABBITMQ_DEFAULT_USER=xxx -e RABBITMQ_DEFAULT_PASS=123456 -p 15672:15672 -p 5672:5672 rabbitmq:3.8.14-management</span><br></pre></td></tr></table></figure><p><strong>docker 常用命令</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动docker</span></span><br><span class="line">systemctl start docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止docker</span></span><br><span class="line">systemctl stop docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启docker</span></span><br><span class="line">systemctl restart docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker状态</span></span><br><span class="line">systemctl status docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开机启动</span></span><br><span class="line">systemctl enable docker</span><br><span class="line">systemctl unenable docker </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker概要信息</span></span><br><span class="line">docker info </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看docker帮助文档</span></span><br><span class="line">docker --help</span><br></pre></td></tr></table></figure><h5 id="不使用-docker">不使用 docker</h5><ol><li class="lvl-3"><p>下载 RabbitMQ（<a class="link"   href="https://www.rabbitmq.com/docs/download" >https://www.rabbitmq.com/docs/download<i class="fas fa-external-link-alt"></i></a>）</p></li><li class="lvl-3"><p>下载 Erlang（<a class="link"   href="https://packagecloud.io/rabbitmq/erlang" >https://packagecloud.io/rabbitmq/erlang<i class="fas fa-external-link-alt"></i></a>）<br><code>Erlang</code> 和 <code>RabbitMQ</code> 版本对照：<a class="link"   href="https://www.rabbitmq.com/which-erlang.html" >https://www.rabbitmq.com/which-erlang.html<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-3"><p>安装 Erlang 和 RabbitMQ</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 Erlang</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 解压</span></span></span><br><span class="line">rpm -Uvh erlang-23.2.7-2.el7.x86_64.rpm</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装</span></span></span><br><span class="line">yum install -y erlang</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装完成后输入如下指令查看版本号</span></span></span><br><span class="line">erl -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 RabbitMQ</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 在 RabiitMQ 安装过程中需要依赖 socat 插件，首先安装该插件</span></span></span><br><span class="line">yum install -y socat</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 解压</span></span> </span><br><span class="line">rpm -Uvh rabbitmq-server-3.8.14-1.el7.noarch.rpm </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 安装</span></span> </span><br><span class="line">yum install -y rabbitmq-server</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动rabbitmq</span></span> </span><br><span class="line">systemctl start rabbitmq-server </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 查看rabbitmq状态</span></span> </span><br><span class="line">systemctl status rabbitmq-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">其他命令</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置rabbitmq服务开机自启动</span></span></span><br><span class="line">systemctl enable rabbitmq-server</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 关闭rabbitmq服务</span></span></span><br><span class="line">systemctl stop rabbitmq-server</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 重启rabbitmq服务</span></span></span><br><span class="line">systemctl restart rabbitmq-server</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>RabbitMQWeb 管理界面及授权操作</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打开RabbitMQWeb管理界面插件，然后访问服务器公网ip:15672。默认账号密码 guest，guest</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>添加远程账户</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加用户</span></span><br><span class="line">rabbitmqctl add_user 用户名 密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置用户角色,分配操作权限</span></span><br><span class="line">rabbitmqctl set_user_tags 用户名 角色</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为用户添加资源权限(授予访问虚拟机根节点的所有权限)</span></span><br><span class="line">rabbitmqctl set_permissions -p / 用户名 &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改密码</span></span><br><span class="line">rabbitmqctl change_ password 用户名 新密码</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除用户</span></span><br><span class="line">rabbitmqctl delete_user 用户名</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看用户清单</span></span><br><span class="line">rabbitmqctl list_users</span><br></pre></td></tr></table></figure><p><strong>角色有四种</strong>：</p><ul class="lvl-0"><li class="lvl-2"><p><code>administrator</code>：可以登录控制台、查看所有信息、并对 rabbitMQ 进行管理</p></li><li class="lvl-2"><p><code>monToring</code>：监控者；登录控制台，查看所有信息</p></li><li class="lvl-2"><p><code>policymaker</code>：策略制定者；登录控制台指定策略</p></li><li class="lvl-2"><p><code>managment</code>：普通管理员；登录控制</p></li></ul><h3 id="基本使用">基本使用</h3><ol><li class="lvl-3"><p>添加依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>配置信息</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span>  </span><br><span class="line">    <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">5673</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">localhost</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">swsk33</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br></pre></td></tr></table></figure><h3 id="五种模型">五种模型</h3><h4 id="Basic-Queue">Basic Queue</h4><blockquote><p>（简单队列模型）：一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqSend</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendQueryOrderMessage</span><span class="params">(Object msg)</span> &#123;  </span><br><span class="line">        amqpTemplate.convertAndSend(<span class="string">&quot;xxx&quot;</span>, msg);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMQListener</span> &#123;    </span><br><span class="line">    <span class="meta">@RabbitListener(queues = &quot;xxx&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlerOrderQueryMsg</span><span class="params">(String msg)</span> &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;xxx接收到信息：&quot;</span> + msg);  </span><br><span class="line">        <span class="comment">// 逻辑处理代码</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Work-Queue">Work Queue</h4><blockquote><p>（工作队列模式）：一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqSend</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendQueryOrderMessage</span><span class="params">(Object msg)</span> &#123;  </span><br><span class="line">        <span class="comment">// 队列名称  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">queueName</span> <span class="operator">=</span> <span class="string">&quot;simple.queue&quot;</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;  </span><br><span class="line">        <span class="comment">// 发送消息 向队列中不停发送消息，模拟消息堆积。 </span></span><br><span class="line">        rabbitTemplate.convertAndSend(queueName, msg + i);  </span><br><span class="line">        Thread.sleep(<span class="number">20</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());  </span><br><span class="line">    Thread.sleep(<span class="number">20</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());  </span><br><span class="line">    Thread.sleep(<span class="number">200</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在不添加额外配置的情况下，两个消费者会平分消息进行消费。为了避免这种情况，可以多加一个配置。<code>prefetch</code> 这个配置可以控制消费者预取的消息数量。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">rabbitmq:</span></span><br><span class="line">    <span class="attr">listener:</span></span><br><span class="line">      <span class="attr">simple:</span></span><br><span class="line">        <span class="attr">prefetch:</span> <span class="number">1</span> <span class="comment"># 每次只能获取一条消息，处理完成才能获取下一个消息</span></span><br></pre></td></tr></table></figure><h4 id="Fanout">Fanout</h4><blockquote><p>（发布订阅模式<mark>群发</mark>）：需要设置类型为 fanout 的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  交换机与队列绑定</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FanoutConfig</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明交换机</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Fanout类型交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FanoutExchange <span class="title function_">fanoutExchange</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">FanoutExchange</span>(<span class="string">&quot;xxx.fanout&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第1个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue1</span><span class="params">(Queue fanoutQueue1, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue1).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 第2个队列</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">fanoutQueue2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;fanout.queue2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 绑定队列和交换机</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">bindingQueue2</span><span class="params">(Queue fanoutQueue2, FanoutExchange fanoutExchange)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(fanoutQueue2).to(fanoutExchange);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqSend</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendQueryOrderMessage</span><span class="params">(Object msg)</span> &#123;  </span><br><span class="line">        <span class="comment">// 队列名称  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;xxx.fanout&quot;</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;  </span><br><span class="line">        rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;&quot;</span>, msg);</span><br><span class="line">        Thread.sleep(<span class="number">20</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue1</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">    System.out.println(<span class="string">&quot;消费者1接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());  </span><br><span class="line">    Thread.sleep(<span class="number">20</span>);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;simple.queue&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenWorkQueue2</span><span class="params">(String msg)</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">    System.err.println(<span class="string">&quot;消费者2........接收到消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span> + LocalTime.now());  </span><br><span class="line">    Thread.sleep(<span class="number">200</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Direct">Direct</h4><blockquote><p>（路由模式）：需要设置类型为 direct 的交换机，交换机和队列进行绑定，并且指定 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqSend</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendQueryOrderMessage</span><span class="params">(Object msg)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;xxx.direct&quot;</span>;    </span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;red&quot;</span>, message);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line"><span class="comment">// 基于注解声明队列和交换机</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;xxx.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;blue&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;direct.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;xxx.direct&quot;, type = ExchangeTypes.DIRECT),</span></span><br><span class="line"><span class="meta">    key = &#123;&quot;red&quot;, &quot;yellow&quot;&#125;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenDirectQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到direct.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Topic">Topic</h4><blockquote><p>（通配符模式）：需要设置类型为 topic 的交换机，交换机和队列进行绑定，并且指定通配 符方式的 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。<code>Topic</code> 类型的 <code>Exchange</code> 与 <code>Direct</code> 相比，都是可以根据 <code>RoutingKey</code> 把消息路由到不同的队列。只不过 <code>Topic</code> 类型 <code>Exchange</code> 可以让队列在绑定 <code>Routing key</code> 的时候使用通配符。</p></blockquote><p><strong>通配符规则</strong>：<code>#</code>：匹配一个或多个词<code>*</code>：匹配不多不少恰好 1 个词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 发送消息</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqSend</span> &#123;  </span><br><span class="line">    <span class="meta">@Autowired</span>  </span><br><span class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendQueryOrderMessage</span><span class="params">(Object msg)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">exchangeName</span> <span class="operator">=</span> <span class="string">&quot;xxx.topic&quot;</span>;    </span><br><span class="line">    rabbitTemplate.convertAndSend(exchangeName, <span class="string">&quot;china.news&quot;</span>, message);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue1&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;xxx.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;china.#&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue1</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue1的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RabbitListener(bindings = @QueueBinding(</span></span><br><span class="line"><span class="meta">    value = @Queue(name = &quot;topic.queue2&quot;),</span></span><br><span class="line"><span class="meta">    exchange = @Exchange(name = &quot;xxx.topic&quot;, type = ExchangeTypes.TOPIC),</span></span><br><span class="line"><span class="meta">    key = &quot;#.news&quot;</span></span><br><span class="line"><span class="meta">))</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listenTopicQueue2</span><span class="params">(String msg)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;消费者接收到topic.queue2的消息：【&quot;</span> + msg + <span class="string">&quot;】&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息转换器">消息转换器</h3><blockquote><p>Spring 会把你发送的消息序列化为字节发送给 MQ，接收消息的时候，还会把字节反序列化为 Java 对象。默认情况下 Spring 采用的序列化方式是 JDK 序列化：<mark>数据体积过大、有安全漏洞、可读性差</mark>。</p></blockquote><ol><li class="lvl-3"><p>在 publisher 和 consumer 两个服务中都引入依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.dataformat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-dataformat-xml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>在启动类中添加一个 Bean</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MessageConverter <span class="title function_">jsonMessageConverter</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonMessageConverter</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="延迟消息">延迟消息</h3><blockquote><p>RbbitMQ 实现延时消息主要有两种方式：</p><ol><li class="lvl-3">死信消息（队列 ttl+ 死信 exchange）<br><mark>2. 延时插件 (rabbitmq-delayed-message-exchange)</mark></li></ol></blockquote><h4 id="死信消息">死信消息</h4><blockquote><p>RabbitMQ 为每个队列设置消息的超时时间。只要给队列设置 x-message-ttl 参数（也可以给单条消息设置存活时间），就设定了该队列所有消息的存活时间，时间单位是毫秒。如果声明队列时指定了死信交换器，则过期消息会成为死信消息。<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2408/RabbitMQ%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97.png"                        alt="|1000"                 ></p></blockquote><h4 id="延时插件">延时插件</h4><ol><li class="lvl-3"><p>进入 rabbitmq 的 docker 容器</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mq bash</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>下载插件并上传服务器（下载地址：[<a class="link"   href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases" >https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases<i class="fas fa-external-link-alt"></i></a>][<a class="link"   href="https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases" >https://github.com/rabbitmq/rabbitmq-delayed-message-exchange/releases<i class="fas fa-external-link-alt"></i></a>]）</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将下载好的插件拷贝到docker容器中</span></span><br><span class="line">docker cp ./rabbitmq_delayed_message_exchange-3.9.0.ez rabbit:/plugins</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入RabbitMQ容器</span></span><br><span class="line">docker exec -it rabbit /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动插件</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可以通过以下命令查看所有安装过的插件</span></span><br><span class="line">rabbitmq-plugins list</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">然后执行 <span class="built_in">exit</span> 命令退出 docker 容器</span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>pom 文件引入依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>在代码中配置延迟队列</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RabbitMqConfig</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ORDER_DELAY_KEY</span> <span class="operator">=</span> <span class="string">&quot;order_delay&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 延时交换机，交换机类型为x-delayed-message  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> CustomExchange <span class="title function_">customExchange</span><span class="params">()</span> &#123;  </span><br><span class="line">        Map&lt;String, Object&gt; args = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        <span class="comment">//延时交换机一定要设置x-delayed-type属性  </span></span><br><span class="line">        args.put(<span class="string">&quot;x-delayed-type&quot;</span>, <span class="string">&quot;direct&quot;</span>);  </span><br><span class="line">        <span class="comment">//第二个参数type需要设置成x-delayed-message  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CustomExchange</span>(<span class="string">&quot;order_delay_exchange&quot;</span>, <span class="string">&quot;x-delayed-message&quot;</span>, <span class="literal">true</span>, <span class="literal">false</span>, args);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 订单延时队列  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 延时队列  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">delayOrderQueue</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(<span class="string">&quot;order_delay_queue&quot;</span>, <span class="literal">true</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 订单延时队列绑定交换机  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 延时队列绑定交换机  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Bean</span>  </span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">delayOrderBinding</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(delayOrderQueue()).to(customExchange()).with(ORDER_DELAY_KEY).noargs();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li class="lvl-3"><p>编写方法向队列发送消息</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发送订单延时消息  </span></span><br><span class="line"><span class="comment"> * delayTime 延迟的时间 单位是毫秒  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg 发送的信息  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendDelayOrderMessage</span><span class="params">(Object msg, String routingKey, Long delayTime)</span> &#123;  </span><br><span class="line">    amqpTemplate.convertAndSend(<span class="string">&quot;order_delay_exchange&quot;</span>, routingKey, msg,  </span><br><span class="line">            message -&gt; &#123;  </span><br><span class="line">                <span class="comment">//设置延迟时间  </span></span><br><span class="line">                message.getMessageProperties().setDelay(delayTime.intValue());  </span><br><span class="line">                <span class="keyword">return</span> message;  </span><br><span class="line">            &#125;);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li class="lvl-3"><p>监听队列</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &quot;order_delay_queue&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handlerOrderDelayMsg</span><span class="params">(String msg)</span> &#123;  </span><br><span class="line">    log.info(<span class="string">&quot;order_delay_queue接收到信息：&quot;</span> + msg);  </span><br><span class="line">    <span class="type">val</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSONUtil.parseObj(msg);</span><br><span class="line">    <span class="comment">// 逻辑处理 ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息重试">消息重试</h3><p>添加如下配置实现消息重试：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">    <span class="attr">listener:</span>  </span><br><span class="line">      <span class="attr">simple:</span>  </span><br><span class="line">        <span class="attr">retry:</span>  </span><br><span class="line">          <span class="comment"># 开启重试机制  </span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span>  </span><br><span class="line">          <span class="comment"># 最多重试  </span></span><br><span class="line">          <span class="attr">max-attempts:</span> <span class="number">10</span>  </span><br><span class="line">          <span class="comment"># 第一次间隔  </span></span><br><span class="line">          <span class="attr">initial-interval:</span> <span class="string">3000ms</span>  </span><br><span class="line">          <span class="comment"># 最多间隔时间  </span></span><br><span class="line">          <span class="attr">max-interval:</span> <span class="string">86400000ms</span>  </span><br><span class="line">          <span class="comment"># 间隔间乘数  </span></span><br><span class="line">          <span class="attr">multiplier:</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>特别注意：</strong> 如果在消息接收端的 application.yml 配置文件中没有添加 RabbitMQ 重试机制的相关配置，当接收端收到消息后程序抛出异常，那么发送端将得不到消息确认（ACK），此时发送端将会循环的发送消息，最终导致内存溢出。</p><h2 id="RocketMQ">RocketMQ</h2><h3 id="基础-2">基础</h3><p>RocketMQ 组成结构图如下 ：</p><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2407/RocketMQ%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84.png"                        alt=""                 ></p><p><strong>交互过程</strong>如下：</p><ol><li class="lvl-3"><p>Brokder 定时发送自身状态 到 NameServer。</p></li><li class="lvl-3"><p>Producer 请求 NameServer 获取 Broker 的地址。</p></li><li class="lvl-3"><p>Producer 将消息发送到 Broker 中的消息队列。</p></li><li class="lvl-3"><p>Consumer 订阅 Broker 中的消息队列，通过拉取消息，或由 Broker 将消息推送至 Consumer。</p></li></ol><p><strong>具体介绍</strong>：</p><ol><li class="lvl-3"><p>Producer Cluster 消息生产者群</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>负责发送消息，一般由业务系统负责产生消息。</p></li></ul><ol start="2"><li class="lvl-3"><p>Consumer Cluster 消息费群</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>负责消费消息，一般是后台系统负责异步消费。</p></li><li class="lvl-2"><p>两种消费模式：</p><ul class="lvl-2"><li class="lvl-6">Push Consumer，服务端向消费者端推送消息</li><li class="lvl-6">Pull Consumer，消费者端向服务定时拉取消息</li></ul></li></ul><ol start="3"><li class="lvl-3"><p>NameServer 名称服务器</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>集群架构中的组织协调员，相当于注册中心，收集 broker 的工作情况，不负责消息的处理</p></li></ul><ol start="4"><li class="lvl-3"><p>Broker 消息服务器</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>是 RocketMQ 的核心，负责消息的接受，存储，发送等。</p></li><li class="lvl-2"><p>需要定时发送自身状态 到 NameServer，默认 10 秒发送一次，超时 2 分钟会认为该 broker 失效。</p></li></ul><h3 id="安装-2">安装</h3><h4 id="Windows-2">Windows</h4><ol><li class="lvl-3"><p>下载</p></li></ol><blockquote><p>下载地址：<a class="link"   href="https://archive.apache.org/dist/rocketmq/" >https://archive.apache.org/dist/rocketmq/<i class="fas fa-external-link-alt"></i></a></p><p>下载后解压到一个没有空格和中文的目录。并配置安装目录为环境变量。</p></blockquote><ol start="2"><li class="lvl-3"><p>启动</p></li></ol><blockquote><p>Broker 默认磁盘空间利用率达到 85% 就不再接收，这里在开发环境可以提高磁盘空间利用率报警阀值为 98%。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">调整默认的内存大小参数（按机器的大小配置）</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 编辑runserver.cmd，修改并保存</span></span></span><br><span class="line">&quot;JAVA_OPT=%JAVA_OPT% ‐server ‐Xms512m ‐Xmx512m ‐Xmn512m ‐XX:MetaspaceSize=128m ‐ XX:MaxMetaspaceSize=320m&quot; </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">运行bin/mqnamesrv.cmd</span></span><br><span class="line">cd bin/</span><br><span class="line">start mqnamesrv.cmd</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动broker -n：指定NameServer的地址，运行bin/mqbroker.cmd ‐n 127.0.0.1:9876</span></span><br><span class="line">cd bin/</span><br><span class="line">start mqbroker.cmd -n 127.0.0.1:9876 autoCreateTopicEnable=true</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 启动失败可以删除 C:/user/用户名/store 这个目录及目录下的所有文件，然后重新执行命令</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>测试</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发送消息</span></span><br><span class="line">cd bin/ </span><br><span class="line">set NAMESRV_ADDR=127.0.0.1:9876 </span><br><span class="line">tools.cmd org.apache.rocketmq.example.quickstart.Producer</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接收消息</span></span><br><span class="line">set NAMESRV_ADDR=127.0.0.1:9876 </span><br><span class="line">tools.cmd org.apache.rocketmq.example.quickstart.Consumer</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>安装管理端</p></li></ol><blockquote><p>RocketMQ 提供了 UI 管理工具，名为 rocketmq-console，项目地址：<a class="link"   href="https://github.com/apache/rocketmq-externals/tree/release-rocketmq-console-1.0.0" >https://github.com/apache/rocketmq-externals/tree/release-rocketmq-console-1.0.0<i class="fas fa-external-link-alt"></i></a></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载源文件，并切换到console分支</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改配置</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 修改rocketmq-console\src\main\resources\application.properties</span></span></span><br><span class="line">server.port=9877</span><br><span class="line">rocketmq.config.namesrvAddr=127.0.0.1:9876</span><br><span class="line">rocketmq.config.dataPath=/tmp/rocketmq-console/data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">打包</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 进入目录下</span></span></span><br><span class="line">mvn clean package ‐Dmaven.test.skip=true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动</span></span><br><span class="line">cd /rocketmq-console/target</span><br><span class="line">java -jar rocketmq-console-ng-1.0.0.jar --server.port=9877 --rocketmq.config.namesrvAddr=127.0.0.1:9876</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">访问 http://127.0.0.1:9877</span></span><br></pre></td></tr></table></figure><h4 id="Linux-2">Linux</h4><blockquote><p>由于 RocketMQ 由 Java 编写，基本操作与 Windows 一致，上传包到服务器后解压运行即可（这里只记录部分 Linux 命令）。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑文件</span></span><br><span class="line">vim runserver.cmd </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">文件位置下运行命令（后台运行）</span></span><br><span class="line">nohup java -jar rocketmq-console-ng-1.0.0.jar</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">控制台相关</span></span><br><span class="line">tail -100 nohup.out</span><br><span class="line">tail -f nohup.out </span><br><span class="line">cp /dev/null nohup.out</span><br></pre></td></tr></table></figure><h3 id="基本使用-2">基本使用</h3><h4 id="三种消息发送方式">三种消息发送方式</h4><ol><li class="lvl-3"><p>同步消息（sync message）<br>producer 向 broker 发送消息，执行 API 时同步等待， 直到 broker 服务器返回发送结果 。</p></li><li class="lvl-3"><p>异步消息（async message）<br>producer 向 broker 发送消息时指定消息发送成功及发送异常的回调方法，调用 API 后立即返回，producer 发送消 息线程不阻塞 ，消息发送成功或失败的回调任务在一个新的线程中执行 。</p></li><li class="lvl-3"><p>单向消息（oneway message）<br>producer 向 broker 发送消息，执行 API 时直接返回，不等待 broker 服务器的结果 。</p></li></ol><h4 id="消息结构">消息结构</h4><p>RocketMQ 的消息包括基础属性和扩展属性两部分：</p><ol><li class="lvl-3"><p>基础属性</p><ol><li class="lvl-7">topic： 主题相当于消息的一级分类，具有相同 topic 的消息将发送至该 topic 下的消息队列中，比方说一个电商 系统可以分为商品消息、订单消息、物流消息等，就可以在 broker 中创建商品主题、订单主题等，所有商品的消息发送至该主题下的消息队列中。</li><li class="lvl-7">消息体：即消息的内容 ，可以的字符串、对象等类型（可系列化）。消息的最大长度是 4M。</li><li class="lvl-7">消息 Flag：消息的一个标记，RocketMQ 不处理，留给业务系统使用。</li></ol></li><li class="lvl-3"><p>扩展属性</p><ol><li class="lvl-7">tag：相当于消息的二级分类，用于消费消息时进行过滤，可为空 。</li><li class="lvl-7">keys：Message 索引键，在运维中可以根据这些 key 快速检索到消息， 可为空 。</li><li class="lvl-7">waitStoreMsgOK：消息 发送时是否等消息存储完成后再返回 。</li></ol></li></ol><p>Message 的基础属性主要包括消息所属主题 topic ， 消息 Flag（RocketMQ 不做处理）、 扩展属性、消息体 。</p><h4 id="生产者工程">生产者工程</h4><ol><li class="lvl-3"><p>添加依赖</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.rocketmq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>rocketmq-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>添加配置</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">nameServer:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9876</span></span><br><span class="line">  <span class="attr">producer:</span></span><br><span class="line">    <span class="attr">group:</span> <span class="string">PID_PAY_PRODUCER</span></span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>发送同步消息</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayChannelAgentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">PayChannelAgentService</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> PayProducer payProducer;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 调用支付宝手机WAP下单接口  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> aliConfigParam 支付渠道参数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> alipayBean 请求支付参数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> BusinessException BusinessException  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> PaymentResponseDTO <span class="title function_">createPayOrderByAliWAP</span><span class="params">(AliConfigParam aliConfigParam, AlipayBean alipayBean)</span> <span class="keyword">throws</span> BusinessException, UnsupportedEncodingException &#123;  </span><br><span class="line">        <span class="comment">// 拼接支付信息</span></span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">//发送支付结果查询延迟消息  </span></span><br><span class="line">            PaymentResponseDTO&lt;AliConfigParam&gt; notice = <span class="keyword">new</span> <span class="title class_">PaymentResponseDTO</span>&lt;AliConfigParam&gt;();  </span><br><span class="line">            notice.setOutTradeNo(alipayBean.getOutTradeNo());  </span><br><span class="line">            notice.setContent(aliConfigParam);  </span><br><span class="line">            notice.setMsg(<span class="string">&quot;ALIPAY_WAP&quot;</span>);  </span><br><span class="line">            payProducer.payOrderNotice(notice);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 调用SDK提交表单  </span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            ...</span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>测试（控制台出现 end… 表示消息发送成功。进入管理端，查询消息。）</p></li></ol><h4 id="消费者工程">消费者工程</h4><ol><li class="lvl-3"><p>配置文件</p></li></ol><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">rocketmq:</span></span><br><span class="line">  <span class="attr">nameServer:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9876</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>消费消息（<mark>监听消息队列需要指定 topic 与 consumerGroup</mark>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Service</span>  </span><br><span class="line"><span class="meta">@RocketMQMessageListener(topic = &quot;TP_PAYMENT_ORDER&quot;, consumerGroup = &quot;CID_PAYMENT_CONSUMER&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayConsumer</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;MessageExt&gt; &#123;  </span><br><span class="line">    <span class="meta">@Resource</span>  </span><br><span class="line">    <span class="keyword">private</span> PayChannelAgentService payAgentService;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(MessageExt messageExt)</span> &#123;  </span><br><span class="line">        log.info(<span class="string">&quot;开始消费支付结果查询消息:&#123;&#125;&quot;</span>, messageExt);  </span><br><span class="line">        <span class="comment">// 取出消息内容  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(messageExt.getBody(), StandardCharsets.UTF_8);  </span><br><span class="line">        <span class="type">PaymentResponseDTO</span> <span class="variable">response</span> <span class="operator">=</span> JSON.parseObject(body, PaymentResponseDTO.class);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">outTradeNo</span> <span class="operator">=</span> response.getOutTradeNo();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> response.getMsg();  </span><br><span class="line">        <span class="type">String</span> <span class="variable">param</span> <span class="operator">=</span> String.valueOf(response.getContent());  </span><br><span class="line">        <span class="type">AliConfigParam</span> <span class="variable">aliConfigParam</span> <span class="operator">=</span> JSON.parseObject(param, AliConfigParam.class);  </span><br><span class="line">        <span class="comment">// 判断是支付宝还是微信  </span></span><br><span class="line">        <span class="type">PaymentResponseDTO</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentResponseDTO</span>();  </span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;ALIPAY_WAP&quot;</span>.equals(msg)) &#123;  </span><br><span class="line">            <span class="comment">// 查询支付宝支付结果  </span></span><br><span class="line">            result = payAgentService.queryPayOrderByAli(aliConfigParam, outTradeNo);  </span><br><span class="line">            <span class="comment">//不管支付成功还是失败都需要发送支付结果消息  </span></span><br><span class="line">            ...</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;WX_JSAPI&quot;</span>.equals(msg)) &#123;  </span><br><span class="line">            <span class="comment">// 查询微信支付结果  </span></span><br><span class="line">            ...</span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">//返回查询获得的支付状态  </span></span><br><span class="line">        <span class="keyword">if</span> (TradeStatus.UNKNOWN.equals(result.getTradeState()) || TradeStatus.USERPAYING.equals(result.getTradeState())) &#123;  </span><br><span class="line">        <span class="comment">// 在支付状态未知或支付中，抛出异常会重新消息此消息  </span></span><br><span class="line">            log.info(<span class="string">&quot;支付代理‐‐‐支付状态未知，等待重试&quot;</span>);  </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;支付状态未知，等待重试&quot;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消息发送过程">消息发送过程</h3><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2408/RocketMQ%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E7%9A%84%E8%BF%87%E7%A8%8B.png"                        alt=""                 ></p><p>消息发送流程如下：</p><ol><li class="lvl-3"><p>Producer 从 NameServer 中获取主题路由信息<br>Broker 将自己的状态上报给 NameServer，NameServer 中存储了每个 Broker 及主题、消息队列的信息。<br>Producer 根据 topic 从 NameServer 查询所有消息队列，查询到的结果例如：</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">[</span> </span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;brokerName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Broker‐1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;queueId&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;brokerName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Broker‐1&quot;</span><span class="punctuation">,</span><span class="attr">&quot;queueId&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;brokerName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Broker‐2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;queueId&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">&#125;</span><span class="punctuation">,</span> </span><br><span class="line">  <span class="punctuation">&#123;</span><span class="attr">&quot;brokerName&quot;</span><span class="punctuation">:</span><span class="string">&quot;Broker‐2&quot;</span><span class="punctuation">,</span><span class="attr">&quot;queueId&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">&#125;</span> </span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>Producer 按选择算法从以上队列中选择一个进行消息发送，如果发送消息失败则在下次选择的时候 会规避掉失败的 broker。</p><ol start="2"><li class="lvl-3"><p>构建消息，发送消息发送消息前进行校验，比如消息的内容长度不能为 0、消息最大长度、消息必要的属性是否具备等（topic、消息体，生产组等）。如果该 topic 下还没有队列则自动创建，默认一个 topic 下自动创建 4 个写队列，4 个读队列 。</p></li></ol><p><strong>为什么要多个队列？</strong></p><ol><li class="lvl-3"><p>高可用：当某个队列不可用时其它队列顶上。</p></li><li class="lvl-3"><p>提高并发：发送消息是选择队列进行发送，提高发送消息的并发能力。 消息消费时每个消费者可以监听多个队列，提高消费消息的并发能力。<br><strong>生产组有什么用？</strong><br>在事务消息中 broker 需要回查 producer，同一个生产组的 producer 组成一个集群，提高并发能力。</p></li></ol><ol start="3"><li class="lvl-3"><p>监听队列，消费消息一个消费组可以包括多个消费者，一个消费组可以订阅多个主题。一个队列同时只允许一个消费者消费，一个消费者可以消费多个队列中的消息。消费组有两种消费模式：</p><ol><li class="lvl-6">集群模式：一个消费组内的消费者组成一个集群，主题下的一条消息只能被一个消费者消费。</li><li class="lvl-6">广播模式：主题下的一条消息能被消费组下的所有消费者消费。消费者和 broker 之间通过推模式和拉模式接收消息，推模式即 broker 推送给消费者，拉模式是消费者主动从 broker 查询消息。</li></ol></li></ol><h3 id="三种消息发送方式-2">三种消息发送方式</h3><h4 id="同步消息">同步消息</h4><p>见基本使用的例子。</p><h4 id="异步消息">异步消息</h4><p>producer 向 broker 发送消息时指定消息发送成功及发送异常的回调方法，调用 API 后立即返回，producer 发送消 息线程不阻塞 ，消息发送成功或失败的回调任务在一个新的线程中执行 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发送异步消息  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> topic  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendASyncMsg</span><span class="params">(String topic, String msg)</span>&#123;  </span><br><span class="line">    rocketMQTemplate.asyncSend(topic,msg,<span class="keyword">new</span> <span class="title class_">SendCallback</span>() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult sendResult)</span> &#123;  </span><br><span class="line">            <span class="comment">// 成功回调  </span></span><br><span class="line">            System.out.println(sendResult.getSendStatus());  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable e)</span> &#123;  </span><br><span class="line">            <span class="comment">// 异常回调  </span></span><br><span class="line">            System.out.println(e.getMessage());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试</span></span><br><span class="line"><span class="meta">@Test</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSendASyncMsg</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException &#123;  </span><br><span class="line">    <span class="built_in">this</span>.producerSimple.sendASyncMsg(<span class="string">&quot;my‐topic&quot;</span>, <span class="string">&quot;第一条异步步消息&quot;</span>);  </span><br><span class="line">    System.out.println(<span class="string">&quot;end...&quot;</span>);  </span><br><span class="line">    <span class="comment">// 异步消息，为跟踪回调线程这里加入延迟  </span></span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="单向消息">单向消息</h4><p>producer 向 broker 发送消息，执行 API 时直接返回，不等待 broker 服务器的结果 。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发送单向消息  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> topic  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> msg  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendOneWayMsg</span><span class="params">(String topic, String msg)</span>&#123;  </span><br><span class="line">    <span class="built_in">this</span>.rocketMQTemplate.sendOneWay(topic,msg);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义消息格式">自定义消息格式</h3><ol><li class="lvl-3"><p>使用 String 传递数据</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产端</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsgByJson</span><span class="params">(String topic, OrderExt orderExt)</span> &#123;  </span><br><span class="line">    <span class="comment">// 发送同步消息，消息内容将orderExt转为json  </span></span><br><span class="line">    <span class="built_in">this</span>.rocketMQTemplate.convertAndSend(topic, orderExt);  </span><br><span class="line">    System.out.printf(<span class="string">&quot;send msg : %s&quot;</span>, orderExt);  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 消费端：使用 JSON 工具将字符串转为对象</span></span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@RocketMQMessageListener(topic = &quot;my‐topic&quot;, consumerGroup = &quot;demo‐consumer‐group&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerSimple</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;String&gt; &#123;  </span><br><span class="line">    <span class="comment">//接手到消息调用此方法  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">        <span class="comment">// 如果是json数据，可以将json转为对象  </span></span><br><span class="line">        <span class="comment">// OrderExt orderExt = JSON.parseObject(s, OrderExt.class);  </span></span><br><span class="line">        System.out.println(s);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>使用对象接收数据</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="meta">@RocketMQMessageListener(topic = &quot;my‐topic‐obj&quot;, consumerGroup = &quot;demo‐consumer‐group‐obj&quot;)</span>  </span><br><span class="line"><span class="comment">// RocketMQListener 泛型指定要转换的对象类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerSimpleObj</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;OrderExt&gt; &#123;  </span><br><span class="line">    <span class="comment">// 接手到消息调用此方法  </span></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(OrderExt orderExt)</span> &#123;  </span><br><span class="line">        System.out.println(orderExt);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="延迟消息-2">延迟消息</h3><blockquote><p>RocketMQ 的延迟消息实现非常简单，只需要发送消息前设置延迟的时间，延迟时间存在十八个等级 （1s/5s/10s/30s/1m/2m/3m/4m/5m/6m/7m/8m/9m/10m/20m/30m/1h/2h），调用 setDelayTimeLevel() 设置与时间相对应的延迟级别即可。</p></blockquote><ol><li class="lvl-3"><p>同步消息延迟</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生产端</span></span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发送延迟消息  </span></span><br><span class="line"><span class="comment"> * 消息内容为json格式  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMsgByJsonDelay</span><span class="params">(String topic, OrderExt orderExt)</span> <span class="keyword">throws</span> JsonProcessingException, InterruptedException, RemotingException, MQClientException, MQBrokerException &#123;  </span><br><span class="line">    <span class="comment">// 发送同步消息，消息内容将orderExt转为json  </span></span><br><span class="line">    Message&lt;OrderExt&gt; message = MessageBuilder.withPayload(orderExt).build();  </span><br><span class="line">    <span class="comment">// 指定发送超时时间（毫秒）和延迟等级  </span></span><br><span class="line">    <span class="built_in">this</span>.rocketMQTemplate.syncSend(topic, message, <span class="number">1000</span>, <span class="number">3</span>);  </span><br><span class="line">    System.out.printf(<span class="string">&quot;send msg : %s&quot;</span>, orderExt);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>异步消息延迟</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 发送异步延迟消息  </span></span><br><span class="line"><span class="comment"> * 消息内容为json格式  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendAsyncMsgByJsonDelay</span><span class="params">(String topic, OrderExt orderExt)</span> <span class="keyword">throws</span> JsonProcessingException, InterruptedException, RemotingException, MQClientException, MQBrokerException &#123;  </span><br><span class="line">    <span class="comment">// 消息内容将orderExt转为json  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="built_in">this</span>.rocketMQTemplate.getObjectMapper().writeValueAsString(orderExt);  </span><br><span class="line">    org.apache.rocketmq.common.message.<span class="type">Message</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">org</span>.apache.rocketmq.common.message.Message(topic, json.getBytes(Charset.forName(<span class="string">&quot;utf‐8&quot;</span>)));  </span><br><span class="line">    <span class="comment">// 设置延迟等级  </span></span><br><span class="line">    message.setDelayTimeLevel(<span class="number">3</span>);  </span><br><span class="line">    <span class="comment">// 发送异步消息  </span></span><br><span class="line">    <span class="built_in">this</span>.rocketMQTemplate.getProducer().send(message, <span class="keyword">new</span> <span class="title class_">SendCallback</span>() &#123;  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(SendResult sendResult)</span> &#123;  </span><br><span class="line">            System.out.println(sendResult);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="meta">@Override</span>  </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onException</span><span class="params">(Throwable throwable)</span> &#123;  </span><br><span class="line">            System.out.println(throwable.getMessage());  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;);  </span><br><span class="line">    System.out.printf(<span class="string">&quot;send msg : %s&quot;</span>, orderExt);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="消费重试">消费重试</h3><p>当消息发送到 Broker 成功，在被消费者消费时如果消费者没有正常消费，此时消息会重试消费。消费重试存在两种场景：</p><ol><li class="lvl-3"><p>消息没有被消费者接收，比如消费者与 broker 存在网络异常。此种情况消息会一直被消费重试。</p></li><li class="lvl-3"><p>当消息已经被消费者成功接收，但是在进行消息处理时出现异常，消费端无法向 Broker 返回成功，这种情况下 RocketMQ 会不断重试。<mark>borker 是怎么知道重试呢？</mark> 消费者在消费消息成功会向 broker 返回成功状态，否则会不断进行消费重试。</p></li></ol><h4 id="处理策略">处理策略</h4><blockquote><p>消息会按照延迟消息的延迟时间等级（1s 5s 10s 30s 1m 2m 3m 4m 5m 6m 7m 8m 9m 10m 20m 30m 1h 2h）从第 3 级开始重试，每试一次如果还不成功则延迟等级加 1。<em>重试了 16 次还未被成功消费将会投递到死信队列，到达死信队列的消息将不再被消费。</em></p></blockquote><p><strong>实际生产中不会让消息重试这么多次，通常在重试一定的次数后将消息写入数据库，由另外单独的程序或人工去处理。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConsumerSimple</span> <span class="keyword">implements</span> <span class="title class_">RocketMQListener</span>&lt;MessageExt&gt; &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onMessage</span><span class="params">(MessageExt messageExt)</span> &#123;  </span><br><span class="line">        <span class="comment">// 取出当前重试次数  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">reconsumeTimes</span> <span class="operator">=</span> messageExt.getReconsumeTimes();  </span><br><span class="line">        <span class="comment">// 当大于一定的次数后将消息写入数据库，由单独的程序或人工去处理  </span></span><br><span class="line">        <span class="keyword">if</span> (reconsumeTimes &gt;= <span class="number">2</span>) &#123;  </span><br><span class="line">            <span class="comment">// 将消息写入数据库，之后正常返回  </span></span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(String.format(<span class="string">&quot;第%s次处理失败..&quot;</span>, reconsumeTimes));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Kafka"><a class="link"   href="http://kafka.apache.org/" >Kafka<i class="fas fa-external-link-alt"></i></a></h2><h3 id="基础-3">基础</h3><p>Kafka是一个分布式的基于开发/订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。<br><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2409-12/09/image-20210525181100793.png"                        alt=""                 ></p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;针对&lt;mark&gt;消息队列&lt;/mark&gt;做出的总结。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;参考文章&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/qq_45173404/article/details/116429302&quot; &gt;RabbitMQ超详细安装教程（Linux）&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;更新&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-23 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-08-09 补充 RabbitMQ 的延迟消息&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="准备工作" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="RocketMQ" scheme="https://kiml.github.io/tags/RocketMQ/"/>
    
    <category term="RabbitMQ" scheme="https://kiml.github.io/tags/RabbitMQ/"/>
    
    <category term="Kafka" scheme="https://kiml.github.io/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>使用 git 提交报错：error RPC failed; HTTP 413 curl 22 The requested URL returned error 413</title>
    <link href="https://kiml.github.io/posts/5a672f0a/"/>
    <id>https://kiml.github.io/posts/5a672f0a/</id>
    <published>2024-07-19T11:28:07.000Z</published>
    <updated>2024-08-22T07:53:42.967Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>参考文章：<a class="link"   href="https://blog.csdn.net/m0_55868614/article/details/120597702" >使用git提交时报错：error: RPC failed； HTTP 413 curl 22 The requested URL returned error: 413 Request Entity<i class="fas fa-external-link-alt"></i></a></p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-19 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="问题">问题</h2><p>使用 git push 时报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Total 254 (delta 50), reused 0 (delta 0), pack-reused 0</span><br><span class="line">error: RPC failed; HTTP 413 curl 22 The requested URL returned error: 413</span><br><span class="line">send-pack: unexpected disconnect while reading sideband packet</span><br><span class="line">fatal: the remote end hung up unexpectedly</span><br></pre></td></tr></table></figure><h2 id="原因">原因</h2><blockquote><p>413 Request Entity Too Large 服务器拒绝处理当前请求，因为该请求提交的实体数据大小超过了服务器愿意或者能够处理的范围。此种情况下，服务器可以关闭连接以免客户端继续发送此请求。</p></blockquote><h2 id="解决">解决</h2><ol><li class="lvl-3"><p>修改上传的数据限制<mark>好像没用</mark></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.postBuffer 52428800</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>使用 ssh 方式上传<mark>还是不行</mark></p></li></ol><p>（1）查看当前 git 的提交地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br></pre></td></tr></table></figure><p>（2）查看 ssh 仓库地址</p><p>（3）设置更换远程仓库地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin 复制过来的ssh地址</span><br></pre></td></tr></table></figure><p>（4）再次提交</p><ol start="3"><li class="lvl-3"><p>原先在提交目录下加了一个 1G 多的 doc 目录，删除了这个文件，但是返回如下报错信息。</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">remote: This repository(including wiki) size 2.25 GB, exceeds 1024.00 MB.        </span><br><span class="line">remote: You only have 3 push opportunities        </span><br><span class="line">remote: HelpLink:       https://gitee.com/help/articles/4232        </span><br><span class="line">remote: Repository GC:  https://gitee.com/kiml_rgb/shanjupay/settings#git-gcerror: File: 1e079cdcb1b8f36ed4bb8a17a78df5582ca9db14 2.24 GB, exceeds 100.00 MB.    </span><br></pre></td></tr></table></figure><p>（1）按照提示执行命令查看超大的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rev-list --objects --all | grep 1e079cdcb1b8f36ed4bb8a17a78df5582ca9db14</span><br></pre></td></tr></table></figure><p>（2）执行命令忽略掉超大的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached file_name</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果是文件夹</span></span><br><span class="line">git rm -r --cached directory_name</span><br></pre></td></tr></table></figure><p>（3）在 commit 的提交历史里面去除这个超大文件（注意这里要填写步骤 1 查询出的文件全称，包括文件路径）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git filter-branch --tree-filter &#x27;rm -f 文件名&#x27; HEAD</span><br></pre></td></tr></table></figure><p>（4）<mark>如果报错</mark>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">WARNING: git-filter-branch has a glut of gotchas generating mangled history</span><br><span class="line">         rewrites.  Hit Ctrl-C before proceeding to abort, then use an</span><br><span class="line">         alternative filtering tool such as &#x27;git filter-repo&#x27;</span><br><span class="line">         (https://github.com/newren/git-filter-repo/) instead.  See the</span><br><span class="line">         filter-branch manual page for more details; to squelch this warning,</span><br><span class="line">         set FILTER_BRANCH_SQUELCH_WARNING=1.</span><br></pre></td></tr></table></figure><p>执行以下命令，然后重新执行移除命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>出现 <code>… was rewritten</code> 记录说明执行成功。再次使用 <code>git push</code> 成功。</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;参考文章：&lt;a class=&quot;link&quot;   href=&quot;https://blog.csdn.net/m0_55868614/article/details/120597702&quot; &gt;使用git提交时报错：error: RPC failed； HTTP 413 curl 22 The requested URL returned error: 413 Request Entity&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-19 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="bug记录" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/"/>
    
    <category term="2024" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/2024/"/>
    
    
    <category term="Git" scheme="https://kiml.github.io/tags/Git/"/>
    
    <category term="BUG" scheme="https://kiml.github.io/tags/BUG/"/>
    
  </entry>
  
  <entry>
    <title>04 聚合支付-【代码模板】支付宝支付接入</title>
    <link href="https://kiml.github.io/posts/fc17a9b8/"/>
    <id>https://kiml.github.io/posts/fc17a9b8/</id>
    <published>2024-07-19T10:15:31.000Z</published>
    <updated>2024-08-12T03:50:17.788Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>支付宝支付接入流程</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-19 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="支付产品">支付产品</h2><p>支付宝为普通商户提供如下支付产品 <a class="link"   href="https://b.alipay.com/page/product-workspace/all-product" >https://b.alipay.com/page/product-workspace/all-product<i class="fas fa-external-link-alt"></i></a>：</p><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2407/%E6%94%AF%E4%BB%98%E5%AE%9D%E6%94%AF%E4%BB%98%E4%BA%A7%E5%93%81%E4%B8%AD%E5%BF%83.png"                        alt=""                 ></p><h2 id="配置支付宝沙箱环境">配置支付宝沙箱环境</h2><p>接入手机网站支付需要具备如下条件：</p><ol><li class="lvl-3"><p>申请前必须拥有经过实名认证的支付宝账户；</p></li><li class="lvl-3"><p>企业或个体工商户可申请；</p></li><li class="lvl-3"><p>需提供真实有效的营业执照，且支付宝账户名称需与营业执照主体一致；</p></li><li class="lvl-3"><p>网站能正常访问且页面显示完整，网站需要明确经营内容且有完整的商品信息；</p></li><li class="lvl-3"><p>网站必须通过 ICP 备案。如为个体工商户，网站备案主体需要与支付宝账户主体名称一致；</p></li><li class="lvl-3"><p>如为个体工商户，则团购不开放，且古玩、珠宝等奢侈品、投资类行业无法申请本产品。具体见：<a class="link"   href="https://opendocs.alipay.com/open/203" >https://opendocs.alipay.com/open/203<i class="fas fa-external-link-alt"></i></a><br>支付宝沙箱环境配置见：<a class="link"   href="https://opendocs.alipay.com/open/200/105311/" >沙箱环境 - 支付宝文档中心 (alipay.com)<i class="fas fa-external-link-alt"></i></a></p></li></ol><h3 id="注册开放平台账号">注册开放平台账号</h3><p>支付宝开放平台地址：<a class="link"   href="https://developers.alipay.com/" >支付宝开放平台 (alipay.com)<i class="fas fa-external-link-alt"></i></a></p><h3 id="配置密钥">配置密钥</h3><p>进入沙箱页面：<a class="link"   href="https://open.alipay.com/develop/sandbox/app" >https://open.alipay.com/develop/sandbox/app<i class="fas fa-external-link-alt"></i></a></p><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2407/%E6%B2%99%E7%AE%B1%E9%85%8D%E7%BD%AE%E9%A1%B5%E9%9D%A2.png"                        alt=""                 ></p><p>启用证书模式，并根据提示完成对应的配置。</p><h3 id="测试环境准备">测试环境准备</h3><p>我们在测试支付宝下单接口时需要使用支付宝扫描二维码，需要在手机安装支付宝客户端（沙箱版本），用沙箱账号登录支付宝，扫二维码，二维码的地址即为下单接口的地址。</p><p>或者使用模拟器进行测试。模拟器安装地址：<a class="link"   href="https://mumu.163.com/" >MuMu模拟器官网_安卓12模拟器_网易手游模拟器 (163.com)<i class="fas fa-external-link-alt"></i></a></p><p>安装完成后进行登录。</p><h2 id="手机网站支付接口（H5）">手机网站支付接口（H5）</h2><blockquote><p><a class="link"   href="https://opendocs.alipay.com/open/203/" >小程序文档 - 支付宝文档中心 (alipay.com)<i class="fas fa-external-link-alt"></i></a></p><p>商家在网页应用中调用支付宝提供的网页支付接口，接口会调起支付宝客户端内的支付模块，此时会从商家网页应 用跳转到支付宝客户端中并开始支付；支付完成后会跳转回商家网页应用内，最后商家展示支付结果。</p></blockquote><h3 id="接口交互">接口交互</h3><p><a class="link"   href="https://opendocs.alipay.com/open/203/105285/" >手机网站支付快速接入 - 支付宝文档中心 (alipay.com)<i class="fas fa-external-link-alt"></i></a></p><ol><li class="lvl-3"><p>用户在商户的 H5 网站下单支付后，商户系统按照手机网站支付接口 <code>alipay.trade.wap.payAPI</code> 的参数规范生成订 单数据</p></li><li class="lvl-3"><p>前端页面通过 Form 表单的形式请求到支付宝。此时支付宝会自动将页面跳转至支付宝 H5 收银台页面，如果用户手机上安装了支付宝 APP，则自动唤起支付宝 APP。</p></li><li class="lvl-3"><p>输入支付密码完成支付。</p></li><li class="lvl-3"><p>用户在支付宝 APP 或 H5 收银台完成支付后，会根据商户在手机网站支付 API 中传入的前台回跳地址 <code>return_url</code> 自动跳转回商户页面，同时在 URL 请求中以 Query String 的形式附带上支付结果参数，详细回跳参数见“手机网站支付接口 <code>alipay.trade.wap.pay</code>”前台回跳参数。</p></li><li class="lvl-3"><p>支付宝还会根据原始支付 API 中传入的异步通知地址 notify_url，通过 POST 请求的形式将支付结果作为参数通知 到商户系统，详情见支付结果异步通知。</p></li></ol><h3 id="下单接口定义">下单接口定义</h3><p><strong>请求地址</strong>：</p><table><thead><tr><th>环境</th><th>Https 请求地址</th></tr></thead><tbody><tr><td>沙箱环境</td><td><a class="link"   href="https://openapi.alipaydev.com/gateway.do" >https://openapi.alipaydev.com/gateway.do<i class="fas fa-external-link-alt"></i></a></td></tr><tr><td>正式环境</td><td><a class="link"   href="https://openapi.alipay.com/gateway.do" >https://openapi.alipay.com/gateway.do<i class="fas fa-external-link-alt"></i></a></td></tr></tbody></table><p><strong>公共请求参数</strong>：<a class="link"   href="https://opendocs.alipay.com/open/203/107090/" >请求参数说明 - 支付宝文档中心 (alipay.com)<i class="fas fa-external-link-alt"></i></a></p><h3 id="下单接口测试">下单接口测试</h3><ol><li class="lvl-3"><p><a class="link"   href="https://opendocs.alipay.com/common/02n6z6" >maven 依赖<i class="fas fa-external-link-alt"></i></a></p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alipay.sdk<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alipay-sdk-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>对应的最新版本<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>代码编写：可参考示例</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Controller</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PayTestController</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">APP_ID</span> <span class="operator">=</span> <span class="string">&quot;XXX&quot;</span>;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">APP_PRIVATE_KEY</span> <span class="operator">=</span> <span class="string">&quot;XXX&quot;</span>;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">ALIPAY_PUBLIC_KEY</span> <span class="operator">=</span> <span class="string">&quot;XXX&quot;</span>;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">CHARSET</span> <span class="operator">=</span> <span class="string">&quot;utf‐8&quot;</span>;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">serverUrl</span> <span class="operator">=</span> <span class="string">&quot;https://openapi.alipaydev.com/gateway.do&quot;</span>;  </span><br><span class="line">    <span class="comment">// 正式 &quot;https://openapi.alipay.com/gateway.do&quot;@GetMapping(&quot;/alipaytest&quot;)  </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">alipaytest</span><span class="params">(HttpServletRequest httpRequest, HttpServletResponse httpResponse)</span> <span class="keyword">throws</span> IOException &#123;  </span><br><span class="line">       <span class="comment">// 获得初始化的AlipayClient   </span></span><br><span class="line"><span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(serverUrl, APP_ID, APP_PRIVATE_KEY, <span class="string">&quot;json&quot;</span>, CHARSET, ALIPAY_PUBLIC_KEY, <span class="string">&quot;RSA2&quot;</span>);  </span><br><span class="line">       <span class="comment">// 创建API对应的 request        </span></span><br><span class="line">       <span class="type">AlipayTradeWapPayRequest</span> <span class="variable">alipayRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeWapPayRequest</span>();  </span><br><span class="line">       <span class="comment">// 填充业务参数  </span></span><br><span class="line">        alipayRequest.setBizContent(<span class="string">&quot;&#123;&quot;</span> + <span class="string">&quot; \&quot;out_trade_no\&quot;:\&quot;20150320010101123\&quot;,&quot;</span> + <span class="string">&quot; \&quot;total_amount\&quot;:\&quot;0.01\&quot;,&quot;</span> + <span class="string">&quot; \&quot;subject\&quot;:\&quot;Iphone6 16G\&quot;,&quot;</span> + <span class="string">&quot; \&quot;product_code\&quot;:\&quot;QUICK_WAP_PAY\&quot;&quot;</span> + <span class="string">&quot; &#125;&quot;</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">form</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            <span class="comment">// 调用SDK生成表单  </span></span><br><span class="line">            form = alipayClient.pageExecute(alipayRequest).getBody();  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;  </span><br><span class="line">            e.printStackTrace();  </span><br><span class="line">        &#125;  </span><br><span class="line">        httpResponse.setContentType(<span class="string">&quot;text/html;charset=&quot;</span> + CHARSET);  </span><br><span class="line">       <span class="comment">// 直接将完整的表单html输出到页面  </span></span><br><span class="line">        httpResponse.getWriter().write(form);  </span><br><span class="line">        httpResponse.getWriter().flush();  </span><br><span class="line">        httpResponse.getWriter().close();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>二维码生成指定二维码的 URL，模拟器/手机必须可以访问到此地址。（<em>本机测试需要在同一个局域网内并使用局域网地址，或者使用内网穿透的地址</em>）</p></li></ol><h3 id="完整代码">完整代码</h3><ol><li class="lvl-3"><p>工具类</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="meta">@Component</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AlipayUtil</span> &#123;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AlipayConfig alipayConfig;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AlipayUtil</span><span class="params">(AlipayConfig alipayConfig)</span>&#123;  </span><br><span class="line">        AlipayUtil.alipayConfig = alipayConfig;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 创建阿里云链接  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> alipayConfig 支付宝支付配置  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AlipayClient  </span></span><br><span class="line"><span class="comment">     */</span>    <span class="keyword">public</span> <span class="keyword">static</span> AlipayClient <span class="title function_">createClient</span><span class="params">(AlipayConfig alipayConfig)</span> &#123;  </span><br><span class="line">        <span class="type">AlipayClient</span> <span class="variable">alipayClient</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            alipayConfig.setAppCertContent(ResourceUtil.readUtf8Str(alipayConfig.getAppCertPath()));  </span><br><span class="line">            alipayConfig.setAlipayPublicCertContent(ResourceUtil.readUtf8Str(alipayConfig.getAlipayPublicCertPath()));  </span><br><span class="line">            alipayConfig.setRootCertContent(ResourceUtil.readUtf8Str(alipayConfig.getRootCertPath()));  </span><br><span class="line">            alipayClient = <span class="keyword">new</span> <span class="title class_">DefaultAlipayClient</span>(alipayConfig);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;  </span><br><span class="line">            log.error(<span class="string">&quot;AlipayClient创建失败:&quot;</span> + e.getMessage());  </span><br><span class="line">            <span class="comment">// 构建异常日志  </span></span><br><span class="line">            <span class="type">val</span> <span class="variable">operLog</span> <span class="operator">=</span> OperLog.builder().title(<span class="string">&quot;支付宝支付&quot;</span>)  </span><br><span class="line">                    .businessType(BusinessType.OTHER.ordinal())  </span><br><span class="line">                    .operUrl(alipayConfig.getServerUrl())  </span><br><span class="line">                    .operParam(JSONUtil.toJsonPrettyStr(alipayConfig))  </span><br><span class="line">                    .status(BusinessStatus.FAIL.ordinal())  </span><br><span class="line">                    .errorMsg(e.getErrMsg())  </span><br><span class="line">                    .build();  </span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordOper(operLog));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> alipayClient;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 预支付接口调用  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> alipayTradePrecreateRequest 支付宝预支付接口请求  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AlipayTradePrecreateResponse 支付宝预支付接口返回  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AlipayTradePrecreateResponse <span class="title function_">alipayTradePrecreate</span><span class="params">(AlipayTradePrecreateRequest alipayTradePrecreateRequest)</span> &#123;  </span><br><span class="line">        alipayTradePrecreateRequest.setNotifyUrl(alipayConfig.getNotifyUrl());  </span><br><span class="line">        <span class="type">AlipayTradePrecreateResponse</span> <span class="variable">alipayTradePrecreateResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradePrecreateResponse</span>();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            alipayTradePrecreateResponse = createClient(alipayConfig).certificateExecute(alipayTradePrecreateRequest);  </span><br><span class="line">  </span><br><span class="line">            log.info(<span class="string">&quot;[返回参数]：\n&quot;</span> + JSONUtil.toJsonPrettyStr(alipayTradePrecreateResponse));  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span>(alipayTradePrecreateResponse.isSuccess())&#123;  </span><br><span class="line">                <span class="keyword">return</span> alipayTradePrecreateResponse;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                log.error(alipayTradePrecreateResponse.getOutTradeNo() + <span class="string">&quot;支付宝支付失败:&quot;</span> + alipayTradePrecreateResponse.getMsg());  </span><br><span class="line">                <span class="comment">// 构建异常日志  </span></span><br><span class="line">                <span class="type">val</span> <span class="variable">operLog</span> <span class="operator">=</span> OperLog.builder().title(<span class="string">&quot;支付宝支付&quot;</span>)  </span><br><span class="line">                        .businessType(BusinessType.OTHER.ordinal())  </span><br><span class="line">                        .operUrl(alipayConfig.getServerUrl())  </span><br><span class="line">                        .requestMethod(alipayTradePrecreateRequest.getApiMethodName())  </span><br><span class="line">                        .operParam(JSONUtil.toJsonPrettyStr(alipayTradePrecreateRequest))  </span><br><span class="line">                        .status(BusinessStatus.FAIL.ordinal())  </span><br><span class="line">                        .errorMsg(JSONUtil.toJsonPrettyStr(alipayTradePrecreateResponse))  </span><br><span class="line">                        .build();  </span><br><span class="line">                AsyncManager.me().execute(AsyncFactory.recordOper(operLog));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;  </span><br><span class="line">            log.error(alipayTradePrecreateResponse.getOutTradeNo() + <span class="string">&quot;支付宝支付失败:&quot;</span> + e.getMessage());  </span><br><span class="line">            <span class="comment">// 构建异常日志  </span></span><br><span class="line">            <span class="type">val</span> <span class="variable">operLog</span> <span class="operator">=</span> OperLog.builder().title(<span class="string">&quot;支付宝支付&quot;</span>)  </span><br><span class="line">                    .businessType(BusinessType.OTHER.ordinal())  </span><br><span class="line">                    .operUrl(alipayConfig.getServerUrl())  </span><br><span class="line">                    .operParam(JSONUtil.toJsonPrettyStr(alipayTradePrecreateRequest))  </span><br><span class="line">                    .status(BusinessStatus.FAIL.ordinal())  </span><br><span class="line">                    .errorMsg(e.getMessage())  </span><br><span class="line">                    .build();  </span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordOper(operLog));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> alipayTradePrecreateResponse;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 订单查询接口调用  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> alipayTradeQueryRequest 支付宝查单接口请求  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AlipayTradeQueryResponse 支付宝查单接口返回  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AlipayTradeQueryResponse <span class="title function_">alipayTradeQuery</span><span class="params">(AlipayTradeQueryRequest alipayTradeQueryRequest)</span> &#123;  </span><br><span class="line">        <span class="type">AlipayTradeQueryResponse</span> <span class="variable">alipayTradeQueryResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeQueryResponse</span>();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            alipayTradeQueryResponse = createClient(alipayConfig).certificateExecute(alipayTradeQueryRequest);  </span><br><span class="line">            <span class="keyword">if</span>(alipayTradeQueryResponse.isSuccess())&#123;  </span><br><span class="line">                log.info(<span class="string">&quot;支付宝查单返回：&quot;</span> + JSONUtil.toJsonPrettyStr(alipayTradeQueryResponse));  </span><br><span class="line">                <span class="keyword">return</span> alipayTradeQueryResponse;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                log.error(alipayTradeQueryResponse.getOutTradeNo() + <span class="string">&quot;支付宝查单失败:&quot;</span> + alipayTradeQueryResponse.getMsg());  </span><br><span class="line">                <span class="comment">// 构建异常日志  </span></span><br><span class="line">                <span class="type">val</span> <span class="variable">operLog</span> <span class="operator">=</span> OperLog.builder().title(<span class="string">&quot;支付宝查单&quot;</span>)  </span><br><span class="line">                        .businessType(BusinessType.OTHER.ordinal())  </span><br><span class="line">                        .operUrl(alipayConfig.getServerUrl())  </span><br><span class="line">                        .requestMethod(alipayTradeQueryRequest.getApiMethodName())  </span><br><span class="line">                        .operParam(JSONUtil.toJsonPrettyStr(alipayTradeQueryRequest))  </span><br><span class="line">                        .status(BusinessStatus.FAIL.ordinal())  </span><br><span class="line">                        .errorMsg(alipayTradeQueryResponse.getMsg())  </span><br><span class="line">                        .build();  </span><br><span class="line">                AsyncManager.me().execute(AsyncFactory.recordOper(operLog));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;  </span><br><span class="line">            log.error(alipayTradeQueryResponse.getOutTradeNo() + <span class="string">&quot;支付宝查单失败:&quot;</span> + e.getMessage());  </span><br><span class="line">            <span class="comment">// 构建异常日志  </span></span><br><span class="line">            <span class="type">val</span> <span class="variable">operLog</span> <span class="operator">=</span> OperLog.builder().title(<span class="string">&quot;支付宝查单&quot;</span>)  </span><br><span class="line">                    .businessType(BusinessType.OTHER.ordinal())  </span><br><span class="line">                    .operUrl(alipayConfig.getServerUrl())  </span><br><span class="line">                    .operParam(JSONUtil.toJsonPrettyStr(alipayTradeQueryRequest))  </span><br><span class="line">                    .status(BusinessStatus.FAIL.ordinal())  </span><br><span class="line">                    .errorMsg(e.getMessage())  </span><br><span class="line">                    .build();  </span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordOper(operLog));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> alipayTradeQueryResponse;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 支付宝订单关闭  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> alipayTradeCloseRequest 支付宝关单接口请求  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> AlipayTradeCloseResponse 支付宝关单接口返回  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> AlipayTradeCloseResponse <span class="title function_">alipayTradeClose</span><span class="params">(AlipayTradeCloseRequest alipayTradeCloseRequest)</span> &#123;  </span><br><span class="line">        <span class="type">AlipayTradeCloseResponse</span> <span class="variable">alipayTradeQueryResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeCloseResponse</span>();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            alipayTradeQueryResponse = createClient(alipayConfig).certificateExecute(alipayTradeCloseRequest);  </span><br><span class="line">            <span class="keyword">if</span>(alipayTradeQueryResponse.isSuccess())&#123;  </span><br><span class="line">                <span class="keyword">return</span> alipayTradeQueryResponse;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                log.error(alipayTradeQueryResponse.getOutTradeNo() + <span class="string">&quot;支付宝关单失败:&quot;</span> + alipayTradeQueryResponse.getMsg());  </span><br><span class="line">                <span class="comment">// 构建异常日志  </span></span><br><span class="line">                <span class="type">val</span> <span class="variable">operLog</span> <span class="operator">=</span> OperLog.builder().title(<span class="string">&quot;支付宝关单&quot;</span>)  </span><br><span class="line">                        .businessType(BusinessType.OTHER.ordinal())  </span><br><span class="line">                        .operUrl(alipayConfig.getServerUrl())  </span><br><span class="line">                        .requestMethod(alipayTradeCloseRequest.getApiMethodName())  </span><br><span class="line">                        .operParam(JSONUtil.toJsonPrettyStr(alipayTradeCloseRequest))  </span><br><span class="line">                        .status(BusinessStatus.FAIL.ordinal())  </span><br><span class="line">                        .errorMsg(alipayTradeQueryResponse.getSubMsg())  </span><br><span class="line">                        .build();  </span><br><span class="line">                AsyncManager.me().execute(AsyncFactory.recordOper(operLog));  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlipayApiException e) &#123;  </span><br><span class="line">            log.error(alipayTradeQueryResponse.getOutTradeNo() + <span class="string">&quot;支付宝关单失败:&quot;</span> + e.getMessage());  </span><br><span class="line">            <span class="comment">// 构建异常日志  </span></span><br><span class="line">            <span class="type">val</span> <span class="variable">operLog</span> <span class="operator">=</span> OperLog.builder().title(<span class="string">&quot;支付宝关单&quot;</span>)  </span><br><span class="line">                    .businessType(BusinessType.OTHER.ordinal())  </span><br><span class="line">                    .operUrl(alipayConfig.getServerUrl())  </span><br><span class="line">                    .operParam(JSONUtil.toJsonPrettyStr(alipayTradeCloseRequest))  </span><br><span class="line">                    .status(BusinessStatus.FAIL.ordinal())  </span><br><span class="line">                    .errorMsg(e.getMessage())  </span><br><span class="line">                    .build();  </span><br><span class="line">            AsyncManager.me().execute(AsyncFactory.recordOper(operLog));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> alipayTradeQueryResponse;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>创建支付宝 V3 版本请求对象</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> AlipayTradePrecreateRequest <span class="title function_">createAlipayBeanV3ByOrder</span><span class="params">(Order order)</span> &#123;  </span><br><span class="line">    <span class="type">AlipayTradePrecreateRequest</span> <span class="variable">alipayTradePrecreateRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradePrecreateRequest</span>();  </span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();  </span><br><span class="line">    bizContent.set(<span class="string">&quot;out_trade_no&quot;</span>, order.getOrderNo());  </span><br><span class="line">    <span class="comment">// 支付宝支付 订单总金额，单位为元，精确到小数点后两位，取值范围为 [0.01,100000000]，金额不能为 0。  </span></span><br><span class="line">    bizContent.set(<span class="string">&quot;total_amount&quot;</span>, order.getTotal());  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 标题部分根据需求修改</span></span><br><span class="line">    <span class="comment">// String subject = order.getGoodName();  </span></span><br><span class="line">    <span class="comment">// if (ObjectUtil.isNotEmpty(order.getSize())) &#123;  </span></span><br><span class="line">    <span class="comment">//     subject = subject + &quot;[&quot; + order.getSize() + &quot;]&quot;;  </span></span><br><span class="line">    <span class="comment">// &#125;  </span></span><br><span class="line">    <span class="comment">// subject = &quot;x-design风格化定制周边订单_&quot; + subject;  </span></span><br><span class="line">  </span><br><span class="line">    bizContent.set(<span class="string">&quot;subject&quot;</span>, subject);  </span><br><span class="line">  </span><br><span class="line">    alipayTradePrecreateRequest.setBizContent(bizContent.toString());  </span><br><span class="line">    <span class="keyword">return</span> alipayTradePrecreateRequest;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li class="lvl-3"><p>支付宝查单</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> BaseResponse&lt;Integer&gt; <span class="title function_">getAlipayBaseResponse</span><span class="params">(Order order, HttpServletRequest request)</span> &#123;  </span><br><span class="line">    <span class="type">AlipayTradeQueryRequest</span> <span class="variable">alipayTradeQueryRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeQueryRequest</span>();  </span><br><span class="line">    <span class="type">JSONConfig</span> <span class="variable">jsonConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONConfig</span>();  </span><br><span class="line">    jsonConfig.setIgnoreNullValue(<span class="literal">false</span>);  </span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(jsonConfig);  </span><br><span class="line">    bizContent.set(<span class="string">&quot;out_trade_no&quot;</span>, order.getOrderNo());  </span><br><span class="line">    bizContent.set(<span class="string">&quot;trade_no&quot;</span>, <span class="literal">null</span>);  </span><br><span class="line">    alipayTradeQueryRequest.setBizContent(bizContent.toString());  </span><br><span class="line">    log.info(<span class="string">&quot;订单：&quot;</span> + order.getOrderNo() + <span class="string">&quot;支付宝查单：&quot;</span> + JSONUtil.parse(alipayTradeQueryRequest));  </span><br><span class="line">    <span class="type">AlipayTradeQueryResponse</span> <span class="variable">alipayTradeQueryResponse</span> <span class="operator">=</span> AlipayUtil.alipayTradeQuery(alipayTradeQueryRequest);  </span><br><span class="line">    log.info(<span class="string">&quot;订单：&quot;</span> + order.getOrderNo() + <span class="string">&quot;支付宝查单结果：&quot;</span> + JSONUtil.parse(alipayTradeQueryResponse));  </span><br><span class="line">    <span class="comment">// 支付宝订单号  </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">tradeNo</span> <span class="operator">=</span> alipayTradeQueryResponse.getTradeNo();  </span><br><span class="line">    <span class="type">OtherPayInfo</span> <span class="variable">otherPayInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OtherPayInfo</span>();  </span><br><span class="line">    otherPayInfo.setTradeNo(tradeNo);  </span><br><span class="line">    <span class="comment">// 支付时间  </span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">time</span> <span class="operator">=</span> <span class="literal">null</span>;  </span><br><span class="line">    <span class="keyword">if</span> (ObjectUtil.isNotNull(alipayTradeQueryResponse.getSendPayDate())) &#123;  </span><br><span class="line">        time =  LocalDateTime.ofInstant(alipayTradeQueryResponse.getSendPayDate().toInstant(), ZoneId.systemDefault());  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 客户未扫码直接调用会出现订单不存在  </span></span><br><span class="line">    <span class="keyword">if</span> (ObjectUtil.isNull(alipayTradeQueryResponse.getTradeStatus())) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>&lt;&gt;(VMSystem.ORDER_STATUS_CREATE);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;TRADE_SUCCESS&quot;</span>.equals(alipayTradeQueryResponse.getTradeStatus())) &#123;  </span><br><span class="line">    <span class="comment">// 其他业务需求 修改订单信息 发送打印邮件等</span></span><br><span class="line">        <span class="comment">// // 修改订单信息  </span></span><br><span class="line">        <span class="comment">// val updateOrderByWx = this.updateOrderStatusByPay(order.getOrderNo(), time, VMSystem.ORDER_STATUS_PAYED, otherPayInfo);  </span></span><br><span class="line">        <span class="comment">// // 发送打印邮件  </span></span><br><span class="line">        <span class="comment">// this.sendMailtoPrint(order);  </span></span><br><span class="line">        <span class="comment">// if (updateOrderByWx) &#123;  </span></span><br><span class="line">        <span class="comment">//     return new BaseResponse&lt;&gt;(VMSystem.ORDER_STATUS_PAYED);  </span></span><br><span class="line">        <span class="comment">// &#125; else &#123;  </span></span><br><span class="line">        <span class="comment">//     throw new LogicException(&quot;订单状态更新异常&quot;);  </span></span><br><span class="line">        <span class="comment">// &#125;  </span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;WAIT_BUYER_PAY&quot;</span>.equals(alipayTradeQueryResponse.getTradeStatus())) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>&lt;&gt;(VMSystem.ORDER_STATUS_CREATE);  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        log.error(order.getOrderNo() + <span class="string">&quot;支付宝支付失败:网关描述：&quot;</span> + alipayTradeQueryResponse.getMsg() + <span class="string">&quot;业务描述：&quot;</span> + alipayTradeQueryResponse.getSubMsg());  </span><br><span class="line">        <span class="comment">// 构建异常日志  </span></span><br><span class="line">        <span class="type">OperLog</span> <span class="variable">operLog</span> <span class="operator">=</span> OperLog.builder().title(<span class="string">&quot;支付宝支付&quot;</span>)  </span><br><span class="line">                .businessType(BusinessType.OTHER.ordinal())  </span><br><span class="line">                .operIp(IpUtils.getIpAddr(request))  </span><br><span class="line">                .operParam(JSONUtil.toJsonPrettyStr(alipayTradeQueryRequest.getTextParams()))  </span><br><span class="line">                .status(BusinessStatus.FAIL.ordinal())  </span><br><span class="line">                .method(alipayTradeQueryRequest.getApiMethodName())  </span><br><span class="line">                .requestMethod(<span class="string">&quot;GET&quot;</span>)  </span><br><span class="line">                .errorMsg(<span class="string">&quot;支付宝支付失败:网关描述：&quot;</span> + alipayTradeQueryResponse.getMsg() + <span class="string">&quot;业务描述：&quot;</span> + alipayTradeQueryResponse.getSubMsg())  </span><br><span class="line">                .build();  </span><br><span class="line">        AsyncManager.me().execute(AsyncFactory.recordOper(operLog));  </span><br><span class="line">        <span class="comment">// 修改订单信息  </span></span><br><span class="line">        <span class="built_in">this</span>.updateOrderStatusByPay(order.getOrderNo(), time, VMSystem.ORDER_STATUS_FAILED, otherPayInfo);  </span><br><span class="line">        <span class="type">val</span> <span class="variable">baseResponse</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseResponse</span>&lt;&gt;(VMSystem.ORDER_STATUS_FAILED);  </span><br><span class="line">        baseResponse.setMessage(<span class="string">&quot;支付宝支付失败:网关描述：&quot;</span> + alipayTradeQueryResponse.getMsg() + <span class="string">&quot;业务描述：&quot;</span> + alipayTradeQueryResponse.getSubMsg());  </span><br><span class="line">        <span class="keyword">return</span> baseResponse;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li class="lvl-3"><p>订单关闭</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 支付宝订单关闭  </span></span><br><span class="line"><span class="type">AlipayTradeCloseRequest</span> <span class="variable">alipayTradeCloseRequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AlipayTradeCloseRequest</span>();  </span><br><span class="line"><span class="type">JSONConfig</span> <span class="variable">jsonConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONConfig</span>();  </span><br><span class="line">jsonConfig.setIgnoreNullValue(<span class="literal">false</span>);  </span><br><span class="line"><span class="type">JSONObject</span> <span class="variable">bizContent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();  </span><br><span class="line">bizContent.set(<span class="string">&quot;out_trade_no&quot;</span>, order.getOrderNo());  </span><br><span class="line">bizContent.set(<span class="string">&quot;trade_no&quot;</span>, order.getTradeNo());  </span><br><span class="line">alipayTradeCloseRequest.setBizContent(bizContent.toString());  </span><br><span class="line">AlipayUtil.alipayTradeClose(alipayTradeCloseRequest);</span><br></pre></td></tr></table></figure><h2 id="BUG">BUG</h2><h3 id="验签出错，建议检查签名字符串或签名私钥与应用公钥是否匹配">验签出错，建议检查签名字符串或签名私钥与应用公钥是否匹配</h3><blockquote><p>技术文档：<a class="link"   href="https://opendocs.alipay.com/support/01ravw" >https://opendocs.alipay.com/support/01ravw<i class="fas fa-external-link-alt"></i></a></p><p><strong>问题原因</strong><br>密钥不匹配、编码格式不统一（<em>本次测试后更换中文编码格式</em>）、请求参数数据有误、接口调用加签方式和应用上选择的加签方式不对应、SDK 调用的提交方法有误、SDK 运行环境有误</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;支付宝支付接入流程&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-19 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="后端项目" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/"/>
    
    <category term="聚合支付" scheme="https://kiml.github.io/categories/%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE/%E8%81%9A%E5%90%88%E6%94%AF%E4%BB%98/"/>
    
    
    <category term="Java" scheme="https://kiml.github.io/tags/Java/"/>
    
    <category term="代码模板" scheme="https://kiml.github.io/tags/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十六天-42接雨水、84柱状图中最大的矩形</title>
    <link href="https://kiml.github.io/posts/82b551fe/"/>
    <id>https://kiml.github.io/posts/82b551fe/</id>
    <published>2024-07-13T01:06:09.000Z</published>
    <updated>2024-07-16T09:49:11.804Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：42 看解析。84 看解析。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-07-13 初始记录</span><br><span class="line">24-07-16 完成</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="42-接雨水">42 接雨水</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/trapping-rain-water/" >https://leetcode.cn/problems/trapping-rain-water/<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="84-柱状图中最大的矩形">84 柱状图中最大的矩形</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/largest-rectangle-in-histogram" >https://leetcode.cn/problems/largest-rectangle-in-histogram<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="看解析">看解析</h2><h3 id="42-接雨水-2">42 接雨水</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0042.%E6%8E%A5%E9%9B%A8%E6%B0%B4.html" >https://programmercarl.com/0042.接雨水.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>当前高度小于等于栈顶高度，入栈，指针后移。</p></li><li class="lvl-3"><p>当前高度大于栈顶高度，出栈，计算出当前墙和栈顶的墙之间水的多少，然后计算当前的高度和新栈的高度的关系，重复第 2 步。直到当前墙的高度不大于栈顶高度或者栈空，然后把当前墙入栈，指针后移。</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">trap</span><span class="params">(<span class="type">int</span>[] height)</span> &#123;  </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; height.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (height[i] &lt;= height[stack.peek()]) &#123;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="comment">// 当前元素小于栈顶元素  </span></span><br><span class="line">            <span class="keyword">if</span> (height[stack.peek()] &gt;= height[i]) &#123;  </span><br><span class="line">                stack.push(i);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; height[i] &gt; height[stack.peek()]) &#123;  </span><br><span class="line">                    <span class="comment">// 当前的栈顶  </span></span><br><span class="line">                    <span class="type">Integer</span> <span class="variable">mid</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">                    <span class="keyword">if</span> (!stack.isEmpty()) &#123;  </span><br><span class="line">                        <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> Math.min(height[stack.peek()], height[i]) - height[mid];  </span><br><span class="line">                        <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> i - stack.peek() - <span class="number">1</span>;  </span><br><span class="line">                        area += h * w;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                stack.push(i);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> area;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="84-柱状图中最大的矩形-2">84 柱状图中最大的矩形</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0084.%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2.html" >https://programmercarl.com/0084.柱状图中最大的矩形.html<i class="fas fa-external-link-alt"></i></a>)</p><p><em>本题是要找每个柱子左右两边第一个小于该柱子的柱子，所以从栈头（元素从栈头弹出）到栈底的顺序应该是从大到小的顺序</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">largestRectangleArea</span><span class="params">(<span class="type">int</span>[] heights)</span> &#123;  </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// 首末尾加零防止无法进入循环  </span></span><br><span class="line">    <span class="type">int</span>[] newHeights = <span class="keyword">new</span> <span class="title class_">int</span>[heights.length + <span class="number">2</span>];  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; newHeights.length - <span class="number">1</span>; i++) &#123;  </span><br><span class="line">        newHeights[i] = heights[i - <span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">    newHeights[heights.length + <span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">    newHeights[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">area</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newHeights.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; newHeights[i] &lt; newHeights[stack.peek()]) &#123;  </span><br><span class="line">            <span class="comment">// 当前元素的前一个元素  </span></span><br><span class="line">            <span class="type">Integer</span> <span class="variable">mid</span> <span class="operator">=</span> stack.pop();  </span><br><span class="line">            <span class="comment">// 右侧数据与左侧数据的差值  </span></span><br><span class="line">            <span class="type">int</span> <span class="variable">w</span> <span class="operator">=</span> i - stack.peek() - <span class="number">1</span>;  </span><br><span class="line">            area = Math.max(area, w * newHeights[mid]);  </span><br><span class="line">        &#125;  </span><br><span class="line">        stack.push(i);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> area;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：42 看解析。84 看解析。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-13 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-16 完成&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="单调栈" scheme="https://kiml.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十五天-739每日温度、496下一个更大元素 I、503下一个更大元素II</title>
    <link href="https://kiml.github.io/posts/d0198d2/"/>
    <id>https://kiml.github.io/posts/d0198d2/</id>
    <published>2024-07-11T02:53:32.000Z</published>
    <updated>2024-07-16T09:44:58.106Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：739 看解析。496 看解析。503 根据 739 写出。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-11 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="739-每日温度">739 每日温度</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/daily-temperatures" >https://leetcode.cn/problems/daily-temperatures<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="496-下一个更大元素-I">496 下一个更大元素 I</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/next-greater-element-i" >https://leetcode.cn/problems/next-greater-element-i<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="503-下一个更大元素-II">503 下一个更大元素 II</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/next-greater-element-ii" >https://leetcode.cn/problems/next-greater-element-ii<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] nextGreaterElements(<span class="type">int</span>[] nums) &#123;  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];  </span><br><span class="line">    Arrays.fill(result, -<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length * <span class="number">2</span>; i++) &#123;  </span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i % nums.length] &gt; nums[stack.peek()]) &#123;  </span><br><span class="line">            result[stack.peek()] = nums[i % nums.length];  </span><br><span class="line">            stack.pop();  </span><br><span class="line">        &#125;  </span><br><span class="line">        stack.push(i % nums.length);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="739-每日温度-2">739 每日温度</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0739.%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6.html" >https://programmercarl.com/0739.每日温度.html<i class="fas fa-external-link-alt"></i></a>)</p><ul class="lvl-0"><li class="lvl-2"><p>情况一：当前遍历的元素 <code>T[i]</code> 小于栈顶元素 <code>T[st.top()]</code> 的情况</p></li><li class="lvl-2"><p>情况二：当前遍历的元素 <code>T[i]</code> 等于栈顶元素 <code>T[st.top()]</code> 的情况</p></li><li class="lvl-2"><p>情况三：当前遍历的元素 <code>T[i]</code> 大于栈顶元素 <code>T[st.top()]</code> 的情况</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;  </span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];  </span><br><span class="line">  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; temperatures.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 当前元素小于等于栈顶元素，直接继续放入  </span></span><br><span class="line">        <span class="keyword">if</span> (temperatures[i] &lt;= temperatures[stack.peek()]) &#123;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        <span class="comment">// 当前元素大于栈顶元素，弹出元素，计算result，（直到当前元素不大于栈顶元素），将当前元素加入栈</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peek()]) &#123;  </span><br><span class="line">                result[stack.peek()] = i - stack.peek();  </span><br><span class="line">                stack.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简化版本</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] dailyTemperatures(<span class="type">int</span>[] temperatures) &#123;  </span><br><span class="line">    Deque&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[temperatures.length];  </span><br><span class="line">  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; temperatures.length; i++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; temperatures[i] &gt; temperatures[stack.peek()]) &#123;  </span><br><span class="line">                result[stack.peek()] = i - stack.peek();  </span><br><span class="line">                stack.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">        stack.push(i);    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="496-下一个更大元素-I-2">496 下一个更大元素 I</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0496.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0I.html" >https://programmercarl.com/0496.下一个更大元素I.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span>[] nextGreaterElement(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2) &#123;  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length];  </span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">Stack</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    Arrays.fill(result, -<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums1.length; i++) &#123;  </span><br><span class="line">        map.put(nums1[i], i);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    stack.push(<span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums2.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (nums2[i] &lt;= nums2[stack.peek()]) &#123;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="comment">// 栈中保存了上个需要比较的对象</span></span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums2[i] &gt; nums2[stack.peek()]) &#123;  </span><br><span class="line">                <span class="comment">// num1中包含整这个元素  </span></span><br><span class="line">                <span class="keyword">if</span> (map.containsKey(nums2[stack.peek()])) &#123;  </span><br><span class="line">                    <span class="comment">// result中的对应下标为这个元素的后一位  </span></span><br><span class="line">                    result[map.get(nums2[stack.peek()])] = nums2[i];  </span><br><span class="line">                &#125;  </span><br><span class="line">                stack.pop();  </span><br><span class="line">            &#125;  </span><br><span class="line">            stack.push(i);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="503-下一个更大元素-II-2">503 下一个更大元素 II</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0503.%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0II.html" >https://programmercarl.com/0503.下一个更大元素II.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：739 看解析。496 看解析。503 根据 739 写出。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-11 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="单调栈" scheme="https://kiml.github.io/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十四天-647回文子串、516最长回文子序列</title>
    <link href="https://kiml.github.io/posts/aa7c5f5/"/>
    <id>https://kiml.github.io/posts/aa7c5f5/</id>
    <published>2024-07-09T09:13:45.000Z</published>
    <updated>2024-07-10T14:19:12.457Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：647 看解析，516 看解析</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-07-09 初始记录</span><br><span class="line">24-07-10 完成</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="647-回文子串">647 回文子串</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/palindromic-substrings" >https://leetcode.cn/problems/palindromic-substrings<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="516-最长回文子序列">516 最长回文子序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/longest-palindromic-subsequence" >https://leetcode.cn/problems/longest-palindromic-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：表示区间范围 <code>[i,j]</code> （注意是左闭右闭）的子串的最长回文子串的长度。</p></li><li class="lvl-3"><p>递推公式：<code>s[i]</code> 与 <code>s[j]</code> 相等，<code>s[i]</code> 与 <code>s[j]</code> 不相等这两种情况：不相等取左右指针向内移动的最大值；相等 <code>dp[i][j] = dp[i + 1][j - 1] + 2;  </code></p></li><li class="lvl-3"><p>dp 数组的初始化：相等时，取 1。</p></li><li class="lvl-3"><p>遍历顺序：<strong>从下到上，从左到右遍历</strong></p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestPalindromeSubseq</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[s.length()][s.length()];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; s.length(); i++) &#123;  </span><br><span class="line">        dp[i][i] = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> max= <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; s.length(); j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">2</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i + <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">            max = Math.max(dp[i][j], max);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> max;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="647-回文子串-2">647 回文子串</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0647.%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2.html" >https://programmercarl.com/0647.回文子串.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：表示区间范围 <code>[i,j]</code> （注意是左闭右闭）的子串是否是回文子串，如果是 <code>dp[i][j]</code> 为 true，否则为 false。</p></li><li class="lvl-3"><p>递推公式：<code>s[i]</code> 与 <code>s[j]</code> 相等，<code>s[i]</code> 与 <code>s[j]</code> 不相等这两种情况：不相等即为 false；相等分为三种情况：下标 i 与 j 相同，同一个字符返回 true；下标 i 与 j 相差为 1，返回 true；i 与 j 相差大于 1 的时候，判断 <code>dp[i + 1][j - 1]</code> 是否为 true</p></li><li class="lvl-3"><p>dp 数组的初始化：全为 false</p></li><li class="lvl-3"><p>遍历顺序：<strong>从下到上，从左到右遍历</strong></p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">countSubstrings</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[s.length()][s.length()];  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; s.length(); j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;  </span><br><span class="line">                dp[i][j] = <span class="literal">false</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (j - i &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;  </span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                    dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>];  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (dp[i][j]) &#123;  </span><br><span class="line">                num++;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> num;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="516-最长回文子序列-2">516 最长回文子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0516.%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0516.最长回文子序列.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：647 看解析，516 看解析&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-09 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-10 完成&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十三天-115不同的子序列、583两个字符串的删除操作、72编辑距离</title>
    <link href="https://kiml.github.io/posts/ca280c35/"/>
    <id>https://kiml.github.io/posts/ca280c35/</id>
    <published>2024-07-08T08:02:07.000Z</published>
    <updated>2024-07-08T13:25:23.863Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：115 不会、583 根据 115AC、72 不会</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-08 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="115-不同的子序列">115 不同的子序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/distinct-subsequences/" >https://leetcode.cn/problems/distinct-subsequences/<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="583-两个字符串的删除操作">583 两个字符串的删除操作</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/delete-operation-for-two-strings/" >https://leetcode.cn/problems/delete-operation-for-two-strings/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：s 到 i - 1；t 到 j - 1 位置的删除相同需要的最小步数。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1]; </code>（即不加这个元素时的子序列个数 + 加上这个元素的子序列个数）， 如果当前位置元素不同：<code>dp[i][j] = Math.min(dp[i - 1][j] + 1, dp[i][j - 1] + 1); </code>（画图即当前位置的上左再去除一个元素并取较小值）。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 、<code>dp[0][j]</code> 都是与元素个数有关。</p></li><li class="lvl-3"><p>遍历顺序：从上到下，从左到右。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[word1.length() + <span class="number">1</span>][word2.length() + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i][<span class="number">0</span>] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp[<span class="number">0</span>].length; i++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][i] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= word1.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= word2.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.min(dp[i - <span class="number">1</span>][j] + <span class="number">1</span>, dp[i][j - <span class="number">1</span>] + <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[word1.length()][word2.length()];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="72-编辑距离">72 编辑距离</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/edit-distance" >https://leetcode.cn/problems/edit-distance<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="看解析">看解析</h2><h3 id="115-不同的子序列-2">115 不同的子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0115.%E4%B8%8D%E5%90%8C%E7%9A%84%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0115.不同的子序列.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：s 到 i - 1；t 到 j - 1 位置的子序列个数。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]; </code>（即不加这个元素时的子序列个数 + 加上这个元素的子序列个数）， 如果当前位置元素不同：<code>dp[i][j] = dp[i - 1][j];</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 一定都是 1，因为也就是把以 i-1 为结尾的 s，删除所有元素，出现空字符串的个数就是 1。<code>dp[0][j]</code> 一定都是 0。<code>dp[0][0]</code> 应该是 1。</p></li><li class="lvl-3"><p>遍历顺序：从上到下，从左到右。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numDistinct</span><span class="params">(String s, String t)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[s.length() + <span class="number">1</span>][t.length() + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i][<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= t.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == t.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[s.length()][t.length()];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="583-两个字符串的删除操作-2">583 两个字符串的删除操作</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0583.%E4%B8%A4%E4%B8%AA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C.html" >https://programmercarl.com/0583.两个字符串的删除操作.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="72-编辑距离-2">72 编辑距离</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0072.%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB.html" >https://programmercarl.com/0072.编辑距离.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：word1 到 i - 1；word2 到 j - 1 位置的最小编辑数。</p></li><li class="lvl-3"><p>递推公式：需要确认四种情况：<code>word1[i - 1] == word2[j - 1]</code> 时，不操作；<code>word1[i - 1] != word2[j - 1]</code>，增删换。具体公式看代码。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 、<code>dp[0][j]</code> 都是与元素个数有关，即删除所有元素。</p></li><li class="lvl-3"><p>遍历顺序：从上到下，从左到右。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minDistance</span><span class="params">(String word1, String word2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[word1.length() + <span class="number">1</span>][word2.length() + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i][<span class="number">0</span>] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dp[<span class="number">0</span>].length; i++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][i] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= word1.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= word2.length(); j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (word1.charAt(i - <span class="number">1</span>) == word2.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="comment">// 三数比较  </span></span><br><span class="line">                <span class="comment">// word1删除一个元素，那么就是以下标i - 2为结尾的word1 与 j-1为结尾的word2的最近编辑距离 再加上一个操作。  </span></span><br><span class="line">                <span class="comment">// word2删除一个元素，那么就是以下标i - 1为结尾的word1 与 j-2为结尾的word2的最近编辑距离 再加上一个操作。  </span></span><br><span class="line">                <span class="comment">// 替换元素，word1替换word1[i - 1]，使其与word2[j - 1]相同，此时不用增删加元素。  </span></span><br><span class="line">                dp[i][j] = Math.min(Math.min(dp[i - <span class="number">1</span>][j - <span class="number">1</span>], dp[i - <span class="number">1</span>][j]), Math.min(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>])) + <span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[word1.length()][word2.length()];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：115 不会、583 根据 115AC、72 不会&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-08 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十二天-1143最长公共子序列、1035不相交的线、53最大子序和、392判断子序列</title>
    <link href="https://kiml.github.io/posts/2b15070f/"/>
    <id>https://kiml.github.io/posts/2b15070f/</id>
    <published>2024-07-05T06:14:16.000Z</published>
    <updated>2024-07-08T13:12:56.825Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：1143AC（方法不是最简的）、1035AC（和上一题一样）、53AC、392AC（根据 1143）</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24-07-05 初始记录</span><br><span class="line">24-07-06 1143</span><br><span class="line">24-07-07 1143优化、1035、53、392</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="1143-最长公共子序列">1143 最长公共子序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/longest-common-subsequence/" >https://leetcode.cn/problems/longest-common-subsequence/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：text1 到 i；text2 到 j 位置的最长重复数组。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1] + 1; </code>， 如果当前位置元素不同：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：针对初始元素是否相同及 i = 0 和 j = 0 的两种情况，都需要分别判断。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[text1.length()][text2.length()];  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; text1.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; text2.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i) == text2.charAt(j)) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> || j == <span class="number">0</span>) &#123;  </span><br><span class="line">                    dp[i][j] = <span class="number">1</span>;  </span><br><span class="line">                    maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">                    <span class="keyword">continue</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;  </span><br><span class="line">                    dp[i][j] = <span class="number">0</span>;  </span><br><span class="line">                    <span class="keyword">continue</span>;  </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;  </span><br><span class="line">                    dp[i][j] = dp[<span class="number">0</span>][j - <span class="number">1</span>];  </span><br><span class="line">                    maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">                    <span class="keyword">continue</span>;  </span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;  </span><br><span class="line">                    dp[i][j] = dp[i - <span class="number">1</span>][<span class="number">0</span>];  </span><br><span class="line">                    maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">                    <span class="keyword">continue</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">            maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> maxLength;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1035-不相交的线">1035 不相交的线</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/uncrossed-lines" >https://leetcode.cn/problems/uncrossed-lines<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：text1 到 i - 1；text2 到 j - 1 位置的最长重复数组。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1] + 1; </code>， 如果当前位置元素不同：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]); </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：i = 0 或 j = 0 时，dp 值为 0</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxUncrossedLines</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length + <span class="number">1</span>][nums2.length + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums1.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= nums2.length; j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前位置加入计数  </span></span><br><span class="line">            <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// System.out.println(Arrays.deepToString(dp));  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[nums1.length][nums2.length];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="53-最大子序和">53 最大子序和</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/maximum-subarray/" >https://leetcode.cn/problems/maximum-subarray/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：数组长度为 i 时的最大子序和。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i] = Math.max(dp[i - 1] + nums[i], nums[i]); </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：i = 0 时，取 <code>nums[0]</code> 的值</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">0</span>] = nums[<span class="number">0</span>];  </span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> dp[<span class="number">0</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i] = Math.max(dp[i - <span class="number">1</span>] + nums[i], nums[i]);  </span><br><span class="line">        max = Math.max(max, dp[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> max;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="392-判断子序列">392 判断子序列</h3><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：s 到 i - 1；t 到 j - 1 位置的相同子序列长度。</p></li><li class="lvl-3"><p>递推公式：如果当前位置元素相同：<code>dp[i][j] = dp[i - 1][j - 1] + 1; </code>， 如果当前位置元素不同：<code>dp[i][j] = dp[i][j - 1]; </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：i = 0 或 j = 0 时，dp 值为 0</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/is-subsequence" >https://leetcode.cn/problems/is-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isSubsequence</span><span class="params">(String s, String t)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[s.length() + <span class="number">1</span>][t.length() + <span class="number">1</span>];  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= s.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= t.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == t.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[s.length()][t.length()] == s.length();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="1143-最长公共子序列-2">1143 最长公共子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/1143.%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/1143.最长公共子序列.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>二维数组优化</p><ol><li class="lvl-7">dp 数组的定义修改为 <code>dp[i][j]</code>：长度为 <code>[0, i - 1]</code> 的字符串 text1 与长度为 <code>[0, j - 1]</code> 的字符串 text2 的最长公共子序列为 <code>dp[i][j]</code>（即多）</li><li class="lvl-7">初始化即 i 为 0，j 为 0 时，<code>dp[i][j]</code> 的值也为 0</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[text1.length() + <span class="number">1</span>][text2.length() + <span class="number">1</span>];  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= text1.length(); i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= text2.length(); j++) &#123;  </span><br><span class="line">            <span class="comment">// 当前指针位置相同，dp[i][j] = dp[i - 1][j - 1] + 1  </span></span><br><span class="line">            <span class="keyword">if</span> (text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>)) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i][j - <span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// System.out.println(Arrays.deepToString(dp));  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[text1.length()][text2.length()];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li class="lvl-3"><p>一维数组优化</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">longestCommonSubsequence</span><span class="params">(String text1, String text2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> text1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> text2.length();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 多从二维dp数组过程分析  </span></span><br><span class="line">        <span class="comment">// 关键在于  如果记录  dp[i - 1][j - 1]</span></span><br><span class="line">        <span class="comment">// 因为 dp[i - 1][j - 1]  &lt;!=&gt;  dp[j - 1]  &lt;=&gt;  dp[i][j - 1]</span></span><br><span class="line">        <span class="type">int</span> [] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n2 + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= n1; i++)&#123;</span><br><span class="line">            <span class="comment">// 这里pre相当于 dp[i - 1][j - 1]</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">pre</span> <span class="operator">=</span> dp[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n2; j++)&#123;</span><br><span class="line">                <span class="comment">//用于给pre赋值</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">cur</span> <span class="operator">=</span> dp[j];</span><br><span class="line">                <span class="keyword">if</span>(text1.charAt(i - <span class="number">1</span>) == text2.charAt(j - <span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="comment">//这里pre相当于dp[i - 1][j - 1]   千万不能用dp[j - 1] !!</span></span><br><span class="line">                    dp[j] = pre + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">// dp[j]     相当于   dp[i - 1][j]</span></span><br><span class="line">                    <span class="comment">// dp[j - 1] 相当于   dp[i][j - 1]</span></span><br><span class="line">                    dp[j] = Math.max(dp[j], dp[j - <span class="number">1</span>]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//更新dp[i - 1][j - 1], 为下次使用做准备</span></span><br><span class="line">                pre = cur;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1035-不相交的线-2">1035 不相交的线</h3><p>解析：(<a class="link"   href="https://programmercarl.com/1035.%E4%B8%8D%E7%9B%B8%E4%BA%A4%E7%9A%84%E7%BA%BF.html" >https://programmercarl.com/1035.不相交的线.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="53-最大子序和-2">53 最大子序和</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C%EF%BC%88%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%EF%BC%89.html" >https://programmercarl.com/0053.最大子序和（动态规划）.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="392-判断子序列-2">392 判断子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0392.%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0392.判断子序列.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：1143AC（方法不是最简的）、1035AC（和上一题一样）、53AC、392AC（根据 1143）&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-05 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-06 1143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-07-07 1143优化、1035、53、392&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第四十一天-300最长递增子序列、674最长连续递增序列、718最长重复子数组</title>
    <link href="https://kiml.github.io/posts/825964fb/"/>
    <id>https://kiml.github.io/posts/825964fb/</id>
    <published>2024-07-01T03:04:29.000Z</published>
    <updated>2024-07-03T10:51:56.018Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：300 看解析，674AC，718看解析</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-07-01 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="初步题解">初步题解</h2><h3 id="300-最长递增子序列">300 最长递增子序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/longest-increasing-subsequence" >https://leetcode.cn/problems/longest-increasing-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：<code>dp[i]</code> 表示第 i 个下标前的最长递增子序列的长度</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.max(dp[i], dp[j] + 1)</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp</code> 数组所有元素的初始化值都为 1。</p></li><li class="lvl-4"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-4"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];  </span><br><span class="line">  </span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (nums[i] &gt; nums[j]) &#123;  </span><br><span class="line">                dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        maxLength = Math.max(maxLength, dp[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> maxLength;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="674-最长连续递增序列">674 最长连续递增序列</h3><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/longest-continuous-increasing-subsequence" >https://leetcode.cn/problems/longest-continuous-increasing-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定 <code>dp[i]</code> 的含义：<code>dp[i]</code> 表示第 i 个下标前的最长连续递增子序列的长度</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = Math.max(dp[i], dp[i - 1] + 1)</code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp</code> 数组所有元素的初始化值都为 1。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLengthOfLCIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];  </span><br><span class="line">  </span><br><span class="line">    Arrays.fill(dp, <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (nums[i] &gt; nums[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            dp[i] = Math.max(dp[i], dp[i - <span class="number">1</span>] + <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        maxLength = Math.max(maxLength, dp[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> maxLength;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="718-最长重复子数组">718 最长重复子数组</h3><ol><li class="lvl-3"><p>确定 <code>dp[i][j]</code> 的含义：num1 到 i - 1；num2 到 j - 1 位置的最长重复数组。</p></li><li class="lvl-3"><p>递推公式：<code>dp[i][j] = dp[i - 1][j - 1] + 1; </code>。</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp</code> 数组所有元素的初始化值都为 0。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）题目链接：(<a class="link"   href="https://leetcode.cn/problems/maximum-length-of-repeated-subarray" >https://leetcode.cn/problems/maximum-length-of-repeated-subarray<i class="fas fa-external-link-alt"></i></a>)</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">findLength</span><span class="params">(<span class="type">int</span>[] nums1, <span class="type">int</span>[] nums2)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums1.length + <span class="number">1</span>][nums2.length + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxLength</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= nums1.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= nums2.length; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (nums1[i - <span class="number">1</span>] == nums2[j - <span class="number">1</span>]) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            maxLength = Math.max(dp[i][j], maxLength);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> maxLength;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="看解析">看解析</h2><h3 id="300-最长递增子序列-2">300 最长递增子序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0300.%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0300.最长上升子序列.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="674-最长连续递增序列-2">674 最长连续递增序列</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0674.%E6%9C%80%E9%95%BF%E8%BF%9E%E7%BB%AD%E9%80%92%E5%A2%9E%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0674.最长连续递增序列.html<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="718-最长重复子数组-2">718 最长重复子数组</h3><p>解析：(<a class="link"   href="https://programmercarl.com/0718.%E6%9C%80%E9%95%BF%E9%87%8D%E5%A4%8D%E5%AD%90%E6%95%B0%E7%BB%84.html" >https://programmercarl.com/0718.最长重复子数组.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：300 看解析，674AC，718看解析&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-07-01 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
</feed>
