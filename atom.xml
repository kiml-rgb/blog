<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Keep Theme</title>
  
  <subtitle>Keep theme quick starter</subtitle>
  <link href="https://kiml.github.io/atom.xml" rel="self"/>
  
  <link href="https://kiml.github.io/"/>
  <updated>2024-06-20T08:21:25.025Z</updated>
  <id>https://kiml.github.io/</id>
  
  <author>
    <name>Keep Team</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>04 从 AI 编程认知 AI</title>
    <link href="https://kiml.github.io/posts/19ad1a27/"/>
    <id>https://kiml.github.io/posts/19ad1a27/</id>
    <published>2024-06-20T06:52:10.000Z</published>
    <updated>2024-06-20T08:21:25.025Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="a12dd5da3105c1f571befbbe64bc4f704beb21800b287d7b7e45bb6377ccddd0"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十四天-01背包问题 二维、01背包问题 一维、416分割等和子集</title>
    <link href="https://kiml.github.io/posts/23390fe6/"/>
    <id>https://kiml.github.io/posts/23390fe6/</id>
    <published>2024-06-20T01:05:13.000Z</published>
    <updated>2024-06-20T08:19:27.049Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：前两题为背包基础题，直接看的题解。416也是看的解析.</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-20 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="416分割等和子集">416分割等和子集</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/partition-equal-subset-sum" >https://leetcode.cn/problems/partition-equal-subset-sum<i class="fas fa-external-link-alt"></i></a>)</p><h1>看解析</h1><h2 id="01背包问题-二维">01背包问题 二维</h2><p>题目链接+解析：(<a class="link"   href="https://programmercarl.com/%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%8001%E8%83%8C%E5%8C%85-1.html" >https://programmercarl.com/背包理论基础01背包-1.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定<code>dp[i][j]</code>的含义：<strong>从下标为<code>[0-i]</code>的物品里任意取，放进容量为j的背包，价值总和最大是多少</strong>。</p></li><li class="lvl-3"><p>递推公式：<code>dp[i][j] = Math.max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i])</code>（即，不存放当前物品/存放当前物品）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[i][0]</code> 均为0，<code>dp[0][j]</code>需要根据实际情况来。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    integerBreak(<span class="number">4</span>, <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>, <span class="number">15</span>&#125;, &#123;<span class="number">3</span>, <span class="number">20</span>&#125;, &#123;<span class="number">4</span>, <span class="number">30</span>&#125;&#125;);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 二维数组解法  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 背包大小  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> item 物品及重量及价值  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] item)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[item.length][n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp[<span class="number">0</span>].length &amp;&amp; n &gt;= item[<span class="number">0</span>][<span class="number">0</span>]; i++) &#123;  </span><br><span class="line">        dp[<span class="number">0</span>][i] = item[<span class="number">0</span>][<span class="number">1</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; item.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j - item[i][<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = Math.max(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - item[i][<span class="number">0</span>]] + item[i][<span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.deepToString(dp));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="01背包问题-一维">01背包问题 一维</h2><p>题目链接+解析：(<a class="link"   href="https://programmercarl.com/%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%8001%E8%83%8C%E5%8C%85-2" >https://programmercarl.com/背包理论基础01背包-2<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定<code>dp[j]</code>的含义：<strong>从物品里任意取，放进容量为j的背包，价值总和最大是多少</strong>。</p></li><li class="lvl-3"><p>递推公式：<code>dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i])</code>（即，要么等于原值，要么等于放入物品的值）</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[0] = 0</code>。</p></li><li class="lvl-3"><p>遍历顺序：<strong>从后向前遍历</strong>。（这里需要注意，因为递推公式内需要上一层的原值，只有倒序遍历，可以获取上一层的原值）</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 一维数组解法  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 背包大小  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> item 物品及重量及价值  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">integerBreak1</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[][] item)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] ints : item) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> dp.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j - ints[<span class="number">0</span>] &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - ints[<span class="number">0</span>]] + ints[<span class="number">1</span>]);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="416分割等和子集-2">416分割等和子集</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0416.%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86.html" >https://programmercarl.com/0416.分割等和子集.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定<code>dp[j]</code>的含义：<strong>从物品里任意取，求总量的最大值，判断是否等于<code>j</code>即<code>sum/2</code></strong>。这题要抽象，设置 i 位置的重量和价值都为 i</p></li><li class="lvl-3"><p>递推公式：<code>dp[j] = Math.max(dp[j], dp[j - weight[i]] + value[i])</code>（<strong>如果<code>dp[j] == j</code>说明，集合中的子集总和正好可以凑成总和 j</strong>）</p></li><li class="lvl-3"><p>dp 数组的初始化：因为是正整数数组，所以可以初始化为0。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">canPartition</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> Arrays.stream(nums).sum();  </span><br><span class="line">    <span class="keyword">if</span> (sum % <span class="number">2</span> != <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[sum / <span class="number">2</span> + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> dp.length - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (j - num &gt;= <span class="number">0</span>) &#123;  </span><br><span class="line">                dp[j] = Math.max(dp[j], dp[j - num] + num);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (dp[sum / <span class="number">2</span>] == sum / <span class="number">2</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：前两题为背包基础题，直接看的题解。416也是看的解析.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-20 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【AI 大模型全栈】Function Calling</title>
    <link href="https://kiml.github.io/posts/4ee04905/"/>
    <id>https://kiml.github.io/posts/4ee04905/</id>
    <published>2024-06-19T09:27:32.000Z</published>
    <updated>2024-06-20T08:20:39.752Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="55f23b47b107121630b3ac10c8f8c908170cfca8091c21ae26764e4db58ca603"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>面试-07 MySQL</title>
    <link href="https://kiml.github.io/posts/1f8a8b53/"/>
    <id>https://kiml.github.io/posts/1f8a8b53/</id>
    <published>2024-06-19T06:37:08.000Z</published>
    <updated>2024-06-20T03:23:37.523Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>❗表示必掌握，❔表示基本不会问</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-19 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>引擎</h1><h2 id="❗MySQL有哪些常用的存储引擎？它们的区别是什么？怎么选择？">❗MySQL有哪些常用的存储引擎？它们的区别是什么？怎么选择？</h2><p>常见的存储引擎有：InnoDB(最常用)，MyISAM(次常用)，MEMORY(最次)。</p><p>InnoDB：是最常用的存储引擎，采用BTree索引，最适用于需要增删改的表，支持事务，支持并发控制（MVCC），InnoDB是现在MySQL默认的存储引擎。<em>分库分表、读写分离、主备切换</em>（技术方案很成熟）</p><p>MyISAM：是5.5版本之前默认的存储引擎，采用BTree索引，访问速度快，但不支持事务和外键，所以只适用于查询需求的表。</p><ul class="lvl-0"><li class="lvl-2"><p>基于MyISAM的报表系统，hadoop前一天把报表数据查询然后保存到MySQL，后面只要查询。<strong>MySQL的单表建议控制数据量在几百万</strong>，一般是500w。后面这种报表数据量会很大，sql也很复杂，不适合用MySQL。<br>MEMORY：基于内存存储，采用的是哈希索引，速度快，但存储量受内存大小限制，而且安全性低，一但断电，内存就会清空，一般不使用这种存储引擎。</p></li></ul><h2 id="为什么MyISAM访问查询速度快？">为什么MyISAM访问查询速度快？</h2><p>MyISAM相比于InnoDB，不需要添加隐藏值来实现MVCC保证高并发，也不需要事务锁，MyISAM通过舍弃并发控制和事务保证来提升查询速度。</p><p>此外MyISAM是非聚集索引，且叶节点始终是地址直接指向数据文件，而InnoDB可能出现回表的情况，所以相对来说，MyISAM的访问速度比InnoDB快。</p><h2 id="❗MyISAM的底层数据结构是什么？">❗MyISAM的底层数据结构是什么？</h2><p>MyIsam 则是非聚集型索引，底层是BTree数据结构，myisam 存储会有三个文件，<strong>一个是表文件，一个是索引文件，另外一个是数据文件</strong> ，无论是否是主键索引，索引文件最终都是以地址指向数据文件中的表数据。</p><h2 id="❗InnoDB的数据结构又是什么？">❗InnoDB的数据结构又是什么？</h2><p>要求必须要有主键，默认内置根据主键建立一个索引，叫聚簇索引。<em>如果对于某个非主键的字段创建索引，最后那个叶子节点的值就是主键的值。可以用主键的值到聚簇索引里根据主键值再次找到数据。</em></p><p>InnoDB 的数据“类型”是BTree，底层数据“结构”是B+Tree，B+Tree 是 BTree 数据结构的变种，是绝对平衡树，所有叶节点在同一高度。</p><p>B+Tree 是一个多路平衡二叉树，也就是说它不只有左右两个分支，而是可以一个节点下有很多分支。</p><p>B+Tree 除叶子节点外，都只存储 key 值，所有的数据都存储在叶子节点上，<strong>且所有的叶子节点间都连有指针，使所有数据成为有序序列，可以用来做全表顺序描扫或范围查询</strong>。</p><p>B+Tree 的数据检索规则为左闭合区间，这样可以实现向右添加。</p><h3 id="为什么使用B-Tree而不使用普通的Tree？">为什么使用B+Tree而不使用普通的Tree？</h3><p>普通的tree最多只能有2路，而B+Tree则是多路数据结构，而且在数据量庞大的情况下，Tree可能高度会很高，增加IO次数，降低了性能，而B+Tree，一页大小为16KB，单纯用来存索引的话，假设索引为int类型，即4个字节，不考虑子节点引用的情况下，每个节点可以2000个关键字，即2000路，能够搜索的关键字个数远远的大于普通的二叉树（有只两路）。</p><h3 id="为什么使用B-Tree而不使用B-Tree？">为什么使用B+Tree而不使用B-Tree？</h3><p>数据库在查询数据时，以页的方式将磁盘数据加载到数据建库内存，默认每页数据大小是 16kb，为了提升查询效率，需要减少磁盘的 IO 次数。</p><p>B-Tree数据结构，每个节点中直接保存数据，这样的话16kb的页包含的节点数量就会比较少，所以在查询时，需要加载更多的页。</p><p>B+Tree数据结构，只有叶子节点包含数据，其他非叶子节点只包含索引列的值，16kb的页能包含的节点数量就大增，相对于BTree而言，能够更少的加载页。</p><h3 id="为什么不用Hash或者红黑数？">为什么不用Hash或者红黑数？</h3><p>业务查询一般可能不是查询一条，而是查询多条。</p><p>hash索引查询单条确实比较快，但是他是无序的，查询多条或者排序的话性能就比较低了，并且在内存资源紧张的情况下，树索引可以分批装入内存进行计算。</p><p>红黑树因为大数据存储下，树的高度很高，每个节点都有数且，这样可能会导致多次IO，查询效率比较低，红黑树并不适合庞大数据搜索。</p><p>而B+树可以一次性装入更多的叶子节点到内存，并且树的高度可以控制到很低，叶子节点存储数据并且形成链表可以避免跨层查询，这种“矮胖”的数据结构更适合于庞大数据搜索。</p><h3 id="B-Tree叶子节点中的数据怎么有序？">B+Tree叶子节点中的数据怎么有序？</h3><p>索引是表数据之外的一种数据结构，数据结构即是存储方式，也就是在表数据之外还会生成一张专门搜索而用的表，新加入的数据会找到对应子节点所在的范围，按照升序从小到大排列。</p><p>所以InnoDB的批量插入效率是较低的，如果需要批量插入，就需要进行一定的数据库优化。</p><h4 id="怎么优化数据库来提升数据批量插入的效率呢？">怎么优化数据库来提升数据批量插入的效率呢？</h4><ol><li class="lvl-3"><p>尽量保持数据有序。减少数据插入时对索引的维护成本。</p></li><li class="lvl-3"><p>一次插入多条数据(不宜过多)。减少日志，降低日志刷新磁盘的频率。减少sql解析次数。</p></li><li class="lvl-3"><p>尽量保证主键足够小，且表上没有多余的索引。</p></li><li class="lvl-3"><p>如果允许，考虑临时关闭二进制日志。</p></li><li class="lvl-3"><p>确保innodb_buffer_pool_size，innodb_log_buffer_size，max_allowed_packet 足够大。注：</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p>innodb_buffer_pool_size：InnoDB最重要的参数，缓存innodb表的素引、数据和插入数据的缓冲。</p></li><li class="lvl-2"><p>innodb_log_buffer_size：日志缓冲区，大量事务时可以将默认3M设为16M。</p></li><li class="lvl-2"><p>max_allowed_packet：网络包大小，避免出现较大的网络包错误。</p></li></ul><h2 id="为什么InnoDB能支持事务特性？">为什么InnoDB能支持事务特性？</h2><p>redo log 重做日志用来保证事务的持久性：当 commit 时，必须先将事务的所有日志写到重做日志文件进行持久化，直到 commit 结束日志才算完成。</p><p>undo log 回滚日志保证事务的原子性：事务完成前，操作并没有真正执行，而记录在日志中，undoglo 会记录之前事务对应的行数据，回滚时，会根据日志进行反向操作，对中间记录的每一步操作进行逻辑删除，从而保证原子性。</p><p>undo log+redo log 保证事务的一致性：操作过程中由 redo log 保证持久化，一但过程中出错，就由undo log 回滚。</p><p>锁（共享、排他）用来保证事务的隔离性：事务的隔离性的实现原理就是锁，InnoDB 主要有 2 种锁，行级锁跟意向锁。（具体见 MySQL锁回答）</p><h3 id="什么是InnoDB回表？">什么是InnoDB回表？</h3><p>即第一次 B+tree 的叶节点上没能直接获取数据，还需要通过叶节点上的数据做为新的索引在另一张表上进行第二次 B+tree 的扫描，直到获取最终想要的数据。</p><h4 id="那有没有好的解决办法？">那有没有好的解决办法？</h4><p>覆盖索引（就是联合索引）。解决回表问题，只需要在一棵索引树上就能获取 SQL 所需的所有数据，无需回表，速度更快。</p><p>覆盖索引的实现方法是，将需要查询的数据与主键共同设为索引，即联合索引，索引扫描遵循最左匹配原则，通过一次扫描 B+tree 即可查询到相应的结果，实现覆盖索引。</p><p>所以创建索引的时候，尽可能创建“覆盖索引”，减少回表操作，提升搜索性能。</p><h3 id="❗什么是最左匹配原则？">❗什么是最左匹配原则？</h3><p>联合索引进扫 B+tree 扫描时，会最左边的索引条件起点优先，任何连续的索引都能匹配的上。比如有一个联合索引为（name, price, address），那么它的匹配索引有三个，按照优先级分别是：name、name+price、name+price+address（注：必须是从最左开始，且连续）</p><ol><li class="lvl-3"><p>全列匹配，可以使用</p></li><li class="lvl-3"><p>最左前缀匹配。最左边，一列、两列、三列匹配都行</p></li><li class="lvl-3"><p>最左匹配原则，但是中间某个值没匹配。会匹配的部分走索引，然后后面的值根据过滤出来的值，再匹配。（<strong>线上常用，效果还好</strong>）</p></li><li class="lvl-3"><p>没有最左前缀匹配。<em>比如直接从 price 开始匹配，就不会走索引</em></p></li><li class="lvl-3"><p>前缀匹配。like 操作只有<code>XX%</code>才会进行匹配</p></li><li class="lvl-3"><p>范围列表查询。只有范围字段可以查询。</p></li><li class="lvl-3"><p>包含函数。使用函数的字段不会用上索引。</p></li></ol><h4 id="那是不是覆盖索引越多越好？">那是不是覆盖索引越多越好？</h4><p>不是。在BTree数据类型在保证树的平衡的过程中，每次关键字的变化，都会导致结构发生很大的变化，这个过程是特别浪费时间的，所以创建索引一定要创建合适的索引，而不是把所有的字段都创建索引，创建冗余索引只会在对数据进行新增，删除，修改时增加性能消耗。</p><h1>事务</h1><h2 id="❗你能说说事务的几个特性是啥？有哪几种隔离级别？">❗你能说说事务的几个特性是啥？有哪几种隔离级别？</h2><p>——ACID（只有InnoDB才支持事务）。</p><ol><li class="lvl-3"><p>原子性（undo log回滚保证事务的原子性）：指同一对的事务操作，要么全成功，要么全失败，操作失败不能对数据库有影响。</p></li><li class="lvl-3"><p>一致性（undo log+redo log保证事务一致性）：事务操作之后，数据库内的数据总量保持一致。（能量守恒）</p></li><li class="lvl-3"><p>隔离性（锁保证事务隔离性）：相同的表，不同事务之间不能互相干扰。</p></li><li class="lvl-3"><p>持久性（redo log重做日志用来保证事务持久性）：事务一旦被提交，就需要在数据永久化存储，即便故障也不会丢失提交事务的操作。</p></li></ol><p>4种。</p><ol><li class="lvl-3"><p>读未提交（RU：read uncommitted）：读到了别的事务没有提交的数据。可能存在【脏读+不可重复读+幻读】的问题。</p></li><li class="lvl-3"><p>读已提交（RC：read committed）：可能存在【不可重复读+幻读】问题。</p></li><li class="lvl-3"><p>可重复读（RR：repeatable read）：可能存在【幻读】问题。【MySQL默认】</p></li><li class="lvl-3"><p>串行化（serializable）：无以上问题，但效率低，一般在分布式事务的情况下用该级别。</p></li></ol><h3 id="❗什么是脏读？幻读？不可重复读？">❗什么是脏读？幻读？不可重复读？</h3><p>脏读(Drity Read)：是指在一个事务处理过程中读取了另一个未提交的事务中的数据 , 导致两次查询结果不一致。</p><p>可重复读(Non-repeatable read):事务开启后关闭前，多次读取同一条记录，结果却不能保证一致，所以叫不可重复读。主要问题不在同一个数据库的问题，而在不同的服务器，不同数据库时会出现的问题，因为两台电脑之间要保证数据相同，是需要时间进行复制的，从表在复制主表的过程中，很可能因为修改数据过快而导致复制到错误数据。</p><p>幻读(Phantom Read):select 某记录是否存在，不存在，准备插入此记录，但执行 insert 时发现此记录已存在，无法插入。或不存在执行delete删除，却发现删除成功。</p><h3 id="❗事务的隔离级别是怎么解决以上三种问题的？">❗事务的隔离级别是怎么解决以上三种问题的？</h3><p>解决脏读：修改时加排他锁（写锁），直到事务提交后才释放，读取时加共享锁（读锁），其他事务只能读取，不能再有更新操作。防止脏读。</p><p>解决不可重复读：innodb引擎采用了MVCC（多版本并发控制）来解决不可重复读问题。mvcc是利用在每条数据后面加了隐藏的两列（创建版本号和删除版本号）当执行查询的时，当前查询版本号&gt;= 创建版本号 并且 &gt;删除版本号，MVCC可以在大多数情况下代替行级锁，使用MVCC，能降低其系统开销。</p><p>解决幻读：采用next-key锁解决幻读问题，next-key锁包含两部分：记录锁（行锁）+间隙锁，就是在索引和索引之间上面加锁。</p><h3 id="❗InnoDB是怎么做到并发控制的？MVCC">❗InnoDB是怎么做到并发控制的？MVCC</h3><blockquote><p>事务 id，在 mysql 内部是全局唯一递增的。<br><strong>当一个事务内查询的时候，mysql只会查询创建事务id &lt;= 当前事务id的数据且当前事务id &lt; 删除事务id。</strong></p></blockquote><p>通过多版本并发控制（MVCC）实现。指的是一种提高并发的技术。最早的数据库系统，只有读读之间可以并发，读写，写读，写写都要阻塞。引入多版本之后，只有写写之间相互阻塞，其他三种操作都可以并行，这样大幅度提高了InnoDB的并发度。</p><p>在内部实现中，InnoDB通过undo log保存每条数据的多个版本，并且能够找回数据历史版本提供给用户读，每个事务读到的数据版本可能是不一样的。<strong>在同一个事务中，用户只能看到该事务创建快照之前已经提交的修改和该事务本身做的修改。</strong></p><p>MVCC在 Read Committed 和 Repeatable Read两个隔离级别下工作。</p><p>MySQL的InnoDB存储引擎默认事务隔离级别是RR(可重复读)，是通过 &quot;行级锁+MVCC&quot;一起实现的，正常读的时候不加锁，写的时候加锁。而 MVCC 的实现依赖：隐藏字段、Read View、Undo log。</p><p>隐藏字段是InnoDb存储引擎在每行数据的后面自动加上的字段，包括事务id字段（最重要，每次新增或修改会修改id号，删除的话是逻辑删除，当做更新处理，会多一个更新记录）和回滚指针字段（指向undo log的上一次事务对应的数据）。</p><p>ReadView就是快照，主要是用来做可见性判断的，保证其它事务对该事务不可见，里面包括该事务的最大事务ID，最小事务ID以及未提交的事务ID等。</p><p>Undo log中存储的是老版本数据，用于回滚。如当一个事务需要读取记录行时，如果当前记录行不可见，可以顺着undo log链找到满足其可见性条件的记录行版本。</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
❗表示必掌握，❔表示基本不会问&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-19 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="面试" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十三天-62不同路径、63不同路径 II、343 整数拆分、96不同的二叉搜索树</title>
    <link href="https://kiml.github.io/posts/5da9e7f4/"/>
    <id>https://kiml.github.io/posts/5da9e7f4/</id>
    <published>2024-06-19T01:04:59.000Z</published>
    <updated>2024-06-19T06:33:21.510Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：62AC、63AC、343不会。96一刷先跳过。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-19 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="62不同路径">62不同路径</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/unique-paths" >https://leetcode.cn/problems/unique-paths<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定<code>dp[m][n]</code>的含义：网格大小为 m x n 时的路径数</p></li><li class="lvl-3"><p>递推公式：<code>dp[m][n] = dp[m][n-1] + dp[m-1][n]</code></p></li><li class="lvl-3"><p>dp 数组的初始化：所有纵列横列为1的，都是1。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m + <span class="number">1</span>][n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (m &lt;= <span class="number">1</span> || n &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= m; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= n; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span> || j == <span class="number">1</span>) &#123;  </span><br><span class="line">                dp[i][j] = <span class="number">1</span>;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">return</span> dp[m][n];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="63不同路径-II">63不同路径 II</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/unique-paths-ii" >https://leetcode.cn/problems/unique-paths-ii<i class="fas fa-external-link-alt"></i></a>)</p><p>这题的五部曲分析应该和上题一样。多了障碍格子，遇到障碍格子时，数计0 （注意一下边界问题就行）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePathsWithObstacles</span><span class="params">(<span class="type">int</span>[][] obstacleGrid)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> obstacleGrid.length;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> obstacleGrid[<span class="number">0</span>].length;  </span><br><span class="line">    <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[m][n];  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; m; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][j] == <span class="number">1</span>) &#123;  </span><br><span class="line">                dp[i][j] = <span class="number">0</span>;  </span><br><span class="line">                <span class="keyword">continue</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">0</span> &amp;&amp; j == <span class="number">0</span>) &#123;  </span><br><span class="line">              dp[i][j] = <span class="number">1</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;  </span><br><span class="line">                dp[i][j] = dp[i][j - <span class="number">1</span>];  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (j == <span class="number">0</span>) &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j] + dp[i][j - <span class="number">1</span>];  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// System.out.println(&quot;dp = &quot; + Arrays.deepToString(dp));  </span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[m - <span class="number">1</span>][n - <span class="number">1</span>];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="343-整数拆分">343 整数拆分</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/integer-break/" >https://leetcode.cn/problems/integer-break/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定<code>dp[i]</code>的含义：正整数 i 的拆分最大化乘积。</p></li><li class="lvl-3"><p>递推公式：想不出来。🤕</p></li><li class="lvl-3"><p>dp 数组的初始化：<code>dp[2] = 1</code>。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><h2 id="96不同的二叉搜索树">96不同的二叉搜索树</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/unique-binary-search-trees" >https://leetcode.cn/problems/unique-binary-search-trees<i class="fas fa-external-link-alt"></i></a>)</p><h1>看解析</h1><h2 id="62不同路径-2">62不同路径</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0062.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84.html" >https://programmercarl.com/0062.不同路径.html<i class="fas fa-external-link-alt"></i></a>)<br>有一个状态压缩版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">uniquePaths</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// 在二维dp数组中，当前值的计算只依赖正上方和正左方，因此可以压缩成一维数组。</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n];</span><br><span class="line">        <span class="comment">// 初始化，第一行只能从正左方跳过来，所以只有一条路径。</span></span><br><span class="line">        Arrays.fill(dp, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; m; i ++) &#123;</span><br><span class="line">            <span class="comment">// 第一列也只有一条路，不用迭代，所以从第二列开始</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; n; j ++) &#123;</span><br><span class="line">                dp[j] += dp[j - <span class="number">1</span>]; <span class="comment">// dp[j] = dp[j] (正上方)+ dp[j - 1] (正左方)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="63不同路径-II-2">63不同路径 II</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0063.%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II.html" >https://programmercarl.com/0063.不同路径II.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="343-整数拆分-2">343 整数拆分</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0343.%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86.html" >https://programmercarl.com/0343.整数拆分.html<i class="fas fa-external-link-alt"></i></a>)</p><p>不是很懂，一刷先跳过了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">integerBreak</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt;= i - j; j++) &#123;  </span><br><span class="line">            <span class="comment">// 这里的 j 其实最大值为 i-j,再大只不过是重复而已，  </span></span><br><span class="line">            <span class="comment">// 并且，在本题中，我们分析 dp[0], dp[1]都是无意义的，  </span></span><br><span class="line">            <span class="comment">// j 最大到 i-j,就不会用到 dp[0]与dp[1]  </span></span><br><span class="line">            dp[i] = Math.max(dp[i], Math.max(j * (i - j), j * dp[i - j]));  </span><br><span class="line">            <span class="comment">// j * (i - j) 是单纯的把整数 i 拆分为两个数 也就是 i,i-j ，再相乘  </span></span><br><span class="line">            <span class="comment">//而j * dp[i - j]是将 i 拆分成两个以及两个以上的个数,再相乘。  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> dp[n];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本题也可以用贪心，每次拆成n个3，如果剩下是4，则保留4，然后相乘，<strong>但是这个结论需要数学证明其合理性！</strong> 🥴本来想这么写的，但是好像想错了。具体的数学推导：(<a class="link"   href="https://leetcode.cn/problems/integer-break/solutions/29098/343-zheng-shu-chai-fen-tan-xin-by-jyd/" >https://leetcode.cn/problems/integer-break/solutions/29098/343-zheng-shu-chai-fen-tan-xin-by-jyd/<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="96不同的二叉搜索树-2">96不同的二叉搜索树</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0096.%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91.html" >https://programmercarl.com/0096.不同的二叉搜索树.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：62AC、63AC、343不会。96一刷先跳过。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-19 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="动态规划" scheme="https://kiml.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>【AI 大模型全栈】Prompt Engineering</title>
    <link href="https://kiml.github.io/posts/bc2708e7/"/>
    <id>https://kiml.github.io/posts/bc2708e7/</id>
    <published>2024-06-18T09:15:03.000Z</published>
    <updated>2024-06-19T09:50:44.484Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="565ab27c5d8f0c2d4d9cdead910a441230707f286af56070e5d248244f170ff4"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>面试-计算机基础</title>
    <link href="https://kiml.github.io/posts/cb03b778/"/>
    <id>https://kiml.github.io/posts/cb03b778/</id>
    <published>2024-06-18T07:09:51.000Z</published>
    <updated>2024-06-18T14:21:53.741Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>❗表示必掌握，❔表示基本不会问</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-18 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>网络</h1><h2 id="❗TCP-IP四层网络模型、OSI七层网络模型">❗TCP IP四层网络模型、OSI七层网络模型</h2><blockquote><p>大白话描述。</p></blockquote><ol><li class="lvl-3"><p>物理层：网线，电缆，在物理层面连接网络。（可以发送0，1信号）</p></li><li class="lvl-3"><p>数据链路层：定义一套协议，对01数据进行分组。把一堆0/1电路洗脑，封装成数据包，包含头和数据，头包含了目标的 mac 地址（从一台电脑的网卡发送到另一台网卡）。</p><p>以太网规定了每个网卡包含一个 mac 地址（唯一）。</p><p>在一个局域网/子网内，电脑是广播给所有的电脑（通过<strong>网络交换机</strong>），通过头的 mac 地址，实现通信。</p></li><li class="lvl-3"><p>网络层：<strong>IP 协议</strong>。如果计算机不在子网内，需要路由器进行子网的连接（子网内的请求把路由器的 mac 地址和请求的mac地址都写上，路由器把请求转发出去：<em>这里可能是多个网关不断转发</em>）</p><p>判断两个 ip 是不是在同一个子网内，要用子网掩码做与运算。再比较前3位是否一致（代表网络）。</p><p>ARP 协议：局域网内，每个 ip 地址对应一个 mac 地址，局域网内的设备是互相知道的。</p><p><strong>网关</strong>：其实就是路由器的一种。可以把路由器上的 ip 地址认为是网关。</p></li><li class="lvl-3"><p>传输层：tcp 协议、udp 协议。端口对端口。（<em>端口号是0<sub>65536，0</sub>1023被占用，别的要用1024以上的端口</em>）</p><p>传输层的 tcp 协议，仅仅是规定了一套基于端口的点对点通信协议，包括如何建立连接，发送和读取消息，实际上要基于 tcp 协议开发，一般使用 socket。</p></li><li class="lvl-3"><p>应用层：http 协议，stp 协议（邮件）。读取数据，处理数据，发送响应……。</p></li></ol><p><strong>4层模型</strong>：数据链路层 -&gt; 网络层 -&gt; 传输层 -&gt; 应用层</p><p><strong>7层模型</strong>：物理层 -&gt; 4层模型（其中：会话层（SQL）、表示层（加密、ASCII）、应用层（HTTP） -&gt; 应用层）</p><p><strong>DNS 地址</strong>：把域名地址发送给 DNS 服务器，DNS 服务器（8.8.8.8）告诉你域名地址对应的 ip 和端口号。</p><h2 id="HTTP协议的特点有哪些？">HTTP协议的特点有哪些？</h2><ol><li class="lvl-3"><p>默认端口为80；</p></li><li class="lvl-3"><p>一次请求对应一次响应；</p></li><li class="lvl-3"><p>无状态：多次请求和响应间的数据是不共享的，可以通过会话技术解决该问题。</p></li></ol><h2 id="❗浏览器请求一个链接的全过程">❗浏览器请求一个链接的全过程</h2><ol><li class="lvl-3"><p>把域名地址发送给 DNS 服务器，DNS 解析域名到服务器地址</p></li><li class="lvl-3"><p>先会判断 ip 地址是不是在一个子网内，不是就走网关。直接把浏览器发送的数据按应用层协议，比如 http 协议打包成一个应用层数据包（包含 http 请求报文）。</p></li><li class="lvl-3"><p>按 tcp 协议的规定，生成 tcp 数据包，请求头包含，发送的端口和请求的端口；tcp 数据包包含 http 数据包。</p></li><li class="lvl-3"><p>按 ip 协议的规定，生成 ip 数据包，请求头包含，发送的 ip 地址和请求的 ip 地址；ip 数据包包含 tcp 数据包。</p></li><li class="lvl-3"><p>按以太网的协议，生成以太网数据包，请求头包含，发送的网卡 mac 地址和请求的网卡 mac 地址（网关的 mac 地址）；以太网数据包，包含 ip 数据包。以太网数据包限制大小1500字节，所以会进行切割。</p></li><li class="lvl-3"><p>打包完毕，把以太网数据包通过<strong>网络交换机</strong>发送给（路由器）<strong>网关</strong>，经过网关的多次转发，发送给请求域名的服务器。服务器按包的序号重新拼接、层层解包，获取 http 请求报文。程序获取请求，做出响应，一层层封装再响应。</p></li></ol><h2 id="❗画一下-TCP-三次握手、四次挥手流程图。为什么是三次？">❗画一下 TCP 三次握手、四次挥手流程图。为什么是三次？</h2><p>三次握手：客户端-&gt;服务端-&gt;客户端</p><p>四次挥手：客户端-&gt;服务端-&gt;服务端-&gt;客户端</p><p><strong>为什么是三次</strong>：如果只有二次握手，<em>可能会出现比如：发送一次请求，卡在半路；发送二次请求，握手成功。这时一次请求发送成功，服务端建立连接，但是客户端无响应，资源浪费</em>。如果是三次握手，第三次握手可以复位连接，释放资源。</p><h2 id="❗http-的工作流程？http1-0、http1-1、http2-0具体有哪些区别？">❗http 的工作流程？http1.0、http1.1、http2.0具体有哪些区别？</h2><p>工作流程就是<strong>浏览器请求一个链接的全过程</strong>。</p><p>http1.0：tcp 短连接。三次握手、四次挥手，断开连接。</p><p>http1.1：默认支持长连接，第一次打开网页，就会打开一个 tcp 连接，接着一段时间内都不关闭。所有网页资源的获取走同一个 tcp 连接，直到获取完毕，关闭连接。但是每个通道都需要一个线程守护，大大影响服务器的并发能力（目前是主流版本BIO）。</p><p>http2.0：支持多路复用，一个 tcp 连接可以并行发送多个请求以及接收响应数据。二进制分帧，将传输数据拆分成更小的包。（底层基于NIO的选择器技术实现，未普及）</p><h3 id="BIO、NIO、AIO有什么区别？">BIO、NIO、AIO有什么区别？</h3><p>BIO：Block IO 同步阻塞式 IO，就是我们平常使用的传统 IO，它的特点是模式简单使用方便，并发处理能力低。</p><p>NIO：Non IO 同步非阻塞 IO，是传统 IO 的升级，客户端和服务器端通过 Channel（通道）通讯，实现了多路复用。</p><p>AIO：Asynchronous IO 是 NIO 的升级，也叫 NIO2，实现了异步非堵塞 IO ，异步 IO 的操作基于事件和回调机制。</p><p>小结：</p><ul class="lvl-0"><li class="lvl-2"><p>BIO是一个连接一个线程。（只要连接，就分配一个线程）</p></li><li class="lvl-2"><p>NIO是一个请求一个线程。（只有IO请求，才分配一个线程）</p></li><li class="lvl-2"><p>AIO是一个有效请求一个线程。（AIO是异步的NIO）</p></li></ul><h2 id="❗聊聊-HTTPS-的工作原理？为什么用-HTTPS-就可以加密通信？">❗聊聊 HTTPS 的工作原理？为什么用 HTTPS 就可以加密通信？</h2><ol><li class="lvl-3"><p>浏览器把支持的加密规则发送给网站。网站选择一套加密算法和hash算法。</p></li><li class="lvl-3"><p>网站发自己的证书（网站地址、加密公钥、颁发机构）</p></li><li class="lvl-3"><p>浏览器去验证证书是否合法（合法链接会有一把锁）。浏览器接着生成<strong>一串随机数密码，然后用证书里的公钥进行加密</strong>，这块走的非对称加密；<strong>发送消息的 hash 值（这个是用随机密码加密过的）</strong></p></li><li class="lvl-3"><p>网站从消息里提出、公钥加密后的随机数密码（用私钥解密），用随机数密码再对消息进行解密，然后用 hash 算法对消息计算 hash 值并与浏览器发送的 hash 值进行比对。网站同样上面的步骤发送，浏览器同样解密。</p></li><li class="lvl-3"><p>之后浏览器和网站进行的通信，都是走随机密码加密，此时随机密码已经存在浏览器和网站的本地。后续不用再针对这个进行加密解密。（<strong>因为这个加密解密只在第一次链接发送，并且要证书才能加密解密，所以安全性较高</strong>）</p></li></ol><h2 id="http-的长连接的工作原理是什么？">http 的长连接的工作原理是什么？</h2><blockquote><p>dubbo 协议走的长连接，可能会带到这个。</p></blockquote><p>http1.0 底层 tcp 是短连接，http1.1 即以后都是长连接（建立了连接之后，无论有多少次请求都是走一个 tcp 连接）。</p><h2 id="GET请求和POST请求方式有什么区别吗？">GET请求和POST请求方式有什么区别吗？</h2><ol><li class="lvl-3"><p>请求参数的携带方式同：get请求放在请求行中，post放在请求体中。</p></li><li class="lvl-3"><p>get请求，请求参数是在请求行中，数据的大小受到浏览器限制；post请求则是放在请求体中，数据无大小限制。</p></li><li class="lvl-3"><p>get请求的安全性低，post请求相对安全性高（不会作为url的一部分，不会被缓存、保存在服务器日志、以及浏览器浏览记录中），且post可以进行加密操作。</p></li><li class="lvl-3"><p>get的效率比post更高，因为post请求在真正接受数据之前会先将请求头发送给服务器进行确认，然后才真正发送数据，所以get一定是先于post执行的。</p></li></ol><p><strong>但是：</strong> 本质上来说，GET请求和POST请求没什么区别，只是在浏览器端对它们的使用不同而已，它们底层都是基于TCP（三次握手、四次挥手）的Socket进行数据传输的。</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
❗表示必掌握，❔表示基本不会问&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-18 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="面试" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>【AI大模型全栈】大模型应用开发基础</title>
    <link href="https://kiml.github.io/posts/6e6eec5c/"/>
    <id>https://kiml.github.io/posts/6e6eec5c/</id>
    <published>2024-06-18T03:09:20.000Z</published>
    <updated>2024-06-18T09:14:57.483Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="56faf298918a70080c93ccb481fd5f1a9a2513ad93e4e14bbad1f68f940e626a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    <category term="阅读" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/"/>
    
    <category term="AI大模型全栈" scheme="https://kiml.github.io/categories/%E9%98%85%E8%AF%BB/AI%E5%A4%A7%E6%A8%A1%E5%9E%8B%E5%85%A8%E6%A0%88/"/>
    
    
    <category term="AI" scheme="https://kiml.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十二天-509斐波那契数、70爬楼梯、746使用最小花费爬楼梯</title>
    <link href="https://kiml.github.io/posts/bae90a3d/"/>
    <id>https://kiml.github.io/posts/bae90a3d/</id>
    <published>2024-06-18T01:09:37.000Z</published>
    <updated>2024-06-18T02:46:04.643Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：动态规划之前没有接触过，基本都不会。看了前面两题746按照解题方法AC了。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-18 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="509斐波那契数">509斐波那契数</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/fibonacci-number" >https://leetcode.cn/problems/fibonacci-number<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 递归做法</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> fib(n - <span class="number">1</span>) + fib(n - <span class="number">2</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="70爬楼梯">70爬楼梯</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/climbing-stairs/" >https://leetcode.cn/problems/climbing-stairs/<i class="fas fa-external-link-alt"></i></a>)<br>不会。</p><h2 id="746使用最小花费爬楼梯">746使用最小花费爬楼梯</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/min-cost-climbing-stairs/" >https://leetcode.cn/problems/min-cost-climbing-stairs/<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定<code>dp[i]</code>的含义：爬到 i 台阶需要的最小花费</p></li><li class="lvl-3"><p>递推公式：<code>Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2])</code></p></li><li class="lvl-3"><p>dp 数组的初始化 <code>dp[0] = 0</code>、<code>dp[1] = 1</code></p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] cost = &#123;<span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">100</span>, <span class="number">1</span>&#125;;  </span><br><span class="line">    minCostClimbingStairs(cost);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">minCostClimbingStairs</span><span class="params">(<span class="type">int</span>[] cost)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[cost.length + <span class="number">1</span>];  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; dp.length; i++) &#123;  </span><br><span class="line">        dp[i] = Math.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[cost.length];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看解析</h1><h2 id="509斐波那契数-2">509斐波那契数</h2><p>题解：(<a class="link"   href="https://programmercarl.com/0509.%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0.html" >https://programmercarl.com/0509.斐波那契数.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定<code>dp[i]</code>的含义：第 i 个斐波那契数</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = dp[i - 1] + dp[i - 2]</code></p></li><li class="lvl-3"><p>dp 数组的初始化 <code>dp[0] = 1</code>、<code>dp[1] = 1</code></p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibBp</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> n;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;  </span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n; i++) &#123;  </span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    System.out.println(Arrays.toString(dp));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[n];  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 只维护两个数值的版本</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">fib</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">2</span>];</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span> ; i &lt; n+<span class="number">1</span> ; i++)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span>  <span class="operator">=</span> dp[<span class="number">0</span>] + dp[<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">1</span>] = sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="70爬楼梯-2">70爬楼梯</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0070.%E7%88%AC%E6%A5%BC%E6%A2%AF.html" >https://programmercarl.com/0070.爬楼梯.html<i class="fas fa-external-link-alt"></i></a>)</p><ol><li class="lvl-3"><p>确定<code>dp[i]</code>的含义：爬 i 阶有几种方法</p></li><li class="lvl-3"><p>递推公式：<code>dp[i] = dp[i - 1] + dp[i - 2]</code>这里有点难理解：因为走到 i 阶只有两种情况，1️⃣从 i - 2 到 i 走两步；2️⃣从 i - 1 到 i 走两步。所以到 i 阶的总方法数 : <code>dp[i] = dp[i - 1] + dp[i - 2]</code></p></li><li class="lvl-3"><p>dp 数组的初始化 <code>dp[1] = 1</code>、<code>dp[2] = 2</code>。根据题目描述，n &gt; 0 所以这里这么设置。</p></li><li class="lvl-3"><p>遍历顺序：从前向后遍历。</p></li><li class="lvl-3"><p>打印 dp 数组（<em>用于 debug</em>）</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> n;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];  </span><br><span class="line">    dp[<span class="number">1</span>] = <span class="number">1</span>;  </span><br><span class="line">    dp[<span class="number">2</span>] = <span class="number">2</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;  </span><br><span class="line">        dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> dp[n];  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="746使用最小花费爬楼梯-2">746使用最小花费爬楼梯</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0746.%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF.html" >https://programmercarl.com/0746.使用最小花费爬楼梯.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：动态规划之前没有接触过，基本都不会。看了前面两题746按照解题方法AC了。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-18 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Keep 主题更新 tools 功能报错 btoa is not defined</title>
    <link href="https://kiml.github.io/posts/9344475e/"/>
    <id>https://kiml.github.io/posts/9344475e/</id>
    <published>2024-06-17T10:35:00.000Z</published>
    <updated>2024-06-17T13:03:07.156Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>不是专业前端，此问题通过Chat GLM解决</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-17 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>问题</h1><p>Keep主题更新tools功能，但是访问tools模板页面报错：btoa is not defined。</p><h1>原因</h1><p>根据Chat GLM的描述。</p><blockquote><p>如果你遇到了 <code>btoa is not defined</code> 的错误，这意味着 <code>btoa</code> 函数在你的环境中不可用。<code>btoa</code> 是浏览器环境中用于将字符串编码为 Base64 的函数，而在 Node.js 环境中没有这个全局函数。</p><p>在 Node.js 中，你可以使用 <code>Buffer</code> 类来实现相似的功能。下面是一个不使用 <code>btoa</code> 的替代方案，它可以在 Node.js 和浏览器环境中都工作。</p></blockquote><h1>解决</h1><p>找到<code>node_module</code>中 keep 主题的安装位置：一般在这个地方（<code>.../blog/node_modules/hexo-theme-keep/layout/_template</code>）。在这个文件夹中的<code>tools-nav.ejs</code>为更新后的tools页面模板文件。</p><p>修改开始部分代码，注释第一行，改成使用 Buffer 转换的方式（这部分也是Chat GLM给出的建议）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%  </span><br><span class="line"><span class="comment">// const btoaStr = (str) =&gt; btoa(encodeURIComponent(str)).trim().replaceAll(&#x27;=&#x27;, &#x27;&#x27;)  </span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">btoaStr</span> = (<span class="params">str</span>) =&gt; &#123;  </span><br><span class="line">    <span class="comment">// 使用 Buffer 将字符串转换为 Base64 编码  </span></span><br><span class="line">    <span class="keyword">const</span> base64 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(str).<span class="title function_">toString</span>(<span class="string">&#x27;base64&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 去除 Base64 编码字符串中的等号  </span></span><br><span class="line">    <span class="keyword">const</span> base64Url = base64.<span class="title function_">replace</span>(<span class="regexp">/\+/g</span>, <span class="string">&#x27;-&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/\//g</span>, <span class="string">&#x27;_&#x27;</span>).<span class="title function_">replace</span>(<span class="regexp">/=/g</span>, <span class="string">&#x27;&#x27;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> base64Url;  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">const</span> tools_data = theme.<span class="property">source_data</span>.<span class="property">tools</span>  </span><br><span class="line"><span class="keyword">const</span> tools_nav_data = theme.<span class="property">source_data</span>.<span class="property">tools</span>.<span class="title function_">filter</span>(<span class="function">(<span class="params">t</span>) =&gt;</span> t?.<span class="property">category</span>)  </span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
不是专业前端，此问题通过Chat GLM解决&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-17 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="bug记录" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/"/>
    
    <category term="2024" scheme="https://kiml.github.io/categories/bug%E8%AE%B0%E5%BD%95/2024/"/>
    
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十一天-56合并区间、738单调递增的数字、968监控二叉树</title>
    <link href="https://kiml.github.io/posts/28ed1b79/"/>
    <id>https://kiml.github.io/posts/28ed1b79/</id>
    <published>2024-06-17T01:05:37.000Z</published>
    <updated>2024-06-17T08:39:47.674Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：56、738AC。968看提示说比较难，先去做贪心的总结。968不会，直接看解析。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-17 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="56合并区间">56合并区间</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/merge-intervals" >https://leetcode.cn/problems/merge-intervals<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span>[][] merge(<span class="type">int</span>[][] intervals) &#123;  </span><br><span class="line">    ArrayList&lt;<span class="type">int</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// 按左边界排序  </span></span><br><span class="line">    Arrays.sort(intervals, (o1, o2) -&gt; &#123;  </span><br><span class="line">        <span class="keyword">if</span> (o1[<span class="number">0</span>] == o2[<span class="number">0</span>]) &#123;  </span><br><span class="line">            <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> o1[<span class="number">0</span>] - o2[<span class="number">0</span>];  </span><br><span class="line">    &#125;);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (intervals.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> intervals;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">0</span>];  </span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> intervals[<span class="number">0</span>][<span class="number">1</span>];  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 没有重合区间，将上一个合并区间加入list，并更新最新的合并区间  </span></span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt; intervals[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;  </span><br><span class="line">            list.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start, end&#125;);  </span><br><span class="line">            start = intervals[i][<span class="number">0</span>];  </span><br><span class="line">            end = intervals[i][<span class="number">1</span>];  </span><br><span class="line">        <span class="comment">// 更新合并的右边界  </span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            end = Math.max(end, intervals[i][<span class="number">1</span>]);  </span><br><span class="line">            <span class="comment">// 更新右边界  </span></span><br><span class="line">            intervals[i][<span class="number">1</span>] = end;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">// 最后需要将最后一个合并区间加入  </span></span><br><span class="line">    list.add(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;start, end&#125;);  </span><br><span class="line">    <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[list.size()][]);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="738单调递增的数字">738单调递增的数字</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/monotone-increasing-digits" >https://leetcode.cn/problems/monotone-increasing-digits<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">monotoneIncreasingDigits</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> n + <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">if</span> (num.length() &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> n;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">char</span>[] chars = num.toCharArray();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> chars.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (chars[i - <span class="number">1</span>] &gt; chars[i]) &#123;  </span><br><span class="line">            chars[i - <span class="number">1</span>]--;  </span><br><span class="line">            <span class="comment">// 从i开始都变成9  </span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &lt; chars.length; j++) &#123;  </span><br><span class="line">                chars[j] = <span class="string">&#x27;9&#x27;</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(String.valueOf(chars));  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化了一下，感觉循环还是放外面好</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">monotoneIncreasingDigits</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">num</span> <span class="operator">=</span> n + <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    <span class="keyword">if</span> (num.length() &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> n;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> -<span class="number">1</span>;  </span><br><span class="line">    <span class="type">char</span>[] chars = num.toCharArray();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> chars.length - <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (chars[i - <span class="number">1</span>] &gt; chars[i]) &#123;  </span><br><span class="line">            chars[i - <span class="number">1</span>]--;  </span><br><span class="line">            start = i;  </span><br><span class="line"><span class="comment">//          // 从i开始都变成9  </span></span><br><span class="line"><span class="comment">//          for (int j = i; j &lt; chars.length; j++) &#123;  </span></span><br><span class="line"><span class="comment">//              chars[j] = &#x27;9&#x27;;  </span></span><br><span class="line"><span class="comment">//          &#125;  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (start != -<span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="comment">// 从i开始都变成9  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> start; j &lt; chars.length; j++) &#123;  </span><br><span class="line">            chars[j] = <span class="string">&#x27;9&#x27;</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> Integer.parseInt(String.valueOf(chars));  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="968监控二叉树">968监控二叉树</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/binary-tree-cameras" >https://leetcode.cn/problems/binary-tree-cameras<i class="fas fa-external-link-alt"></i></a>)</p><h1>看解析</h1><h2 id="56合并区间-2">56合并区间</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0056.%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4.html" >https://programmercarl.com/0056.合并区间.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="738单调递增的数字-2">738单调递增的数字</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0738.%E5%8D%95%E8%B0%83%E9%80%92%E5%A2%9E%E7%9A%84%E6%95%B0%E5%AD%97.html" >https://programmercarl.com/0738.单调递增的数字.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="968监控二叉树-2">968监控二叉树</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0968.%E7%9B%91%E6%8E%A7%E4%BA%8C%E5%8F%89%E6%A0%91.html" >https://programmercarl.com/0968.监控二叉树.html<i class="fas fa-external-link-alt"></i></a>)</p><p>思路：本题要从叶子节点分析，贪心贪叶子节点的上一个节点为摄像头（这种情况下摄像头最少）。然后，根据节点状态，一共分了3种：0 无覆盖；1 有摄像头；2 有覆盖。按照下图的思路做题，就可以解出，还是比较难想的。</p><p>内链：[[968监控二叉树图示.excalidraw]]<br>外链：<img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2406/Snipaste_2024-06-17_16-14-55.png"                        alt="|1300"                 ></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minCameraCover</span><span class="params">(TreeNode root)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (minCameraCoverTravel(root) == <span class="number">0</span>) &#123;  </span><br><span class="line">        res++;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> res;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> <span class="title function_">minCameraCoverTravel</span><span class="params">(TreeNode root)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (root == <span class="literal">null</span>) &#123;  </span><br><span class="line">        <span class="comment">// 空节点默认为有覆盖的状态  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 后续遍历  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> minCameraCoverTravel(root.left);  </span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> minCameraCoverTravel(root.right);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 前两个if可以互换  </span></span><br><span class="line">    <span class="comment">// 情况1  </span></span><br><span class="line">    <span class="keyword">if</span> (left == <span class="number">2</span> &amp;&amp; right == <span class="number">2</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">// 情况2，加一个摄像头   </span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (left == <span class="number">0</span> || right == <span class="number">0</span>) &#123;  </span><br><span class="line">        res++;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：56、738AC。968看提示说比较难，先去做贪心的总结。968不会，直接看解析。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-17 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第三十天-452用最少数量的箭引爆气球、435无重叠区间、763划分字母区间</title>
    <link href="https://kiml.github.io/posts/253a4d3a/"/>
    <id>https://kiml.github.io/posts/253a4d3a/</id>
    <published>2024-06-15T01:04:21.000Z</published>
    <updated>2024-06-15T02:50:25.366Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：可能因为熬夜，思绪都是飘的。都是看了解析写出来的。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-15 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="452用最少数量的箭引爆气球">452用最少数量的箭引爆气球</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons" >https://leetcode.cn/problems/minimum-number-of-arrows-to-burst-balloons<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路。</p><h2 id="435无重叠区间">435无重叠区间</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/non-overlapping-intervals" >https://leetcode.cn/problems/non-overlapping-intervals<i class="fas fa-external-link-alt"></i></a>)</p><p>还是没有思路。</p><h2 id="763划分字母区间">763划分字母区间</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/partition-labels/description/" >https://leetcode.cn/problems/partition-labels/description/<i class="fas fa-external-link-alt"></i></a>)</p><p>直接看的解析。</p><h1>看解析</h1><h2 id="452用最少数量的箭引爆气球-2">452用最少数量的箭引爆气球</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0452.%E7%94%A8%E6%9C%80%E5%B0%91%E6%95%B0%E9%87%8F%E7%9A%84%E7%AE%AD%E5%BC%95%E7%88%86%E6%B0%94%E7%90%83.html" >https://programmercarl.com/0452.用最少数量的箭引爆气球.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：看了一下题目就是要求重叠的区间  </span></span><br><span class="line"><span class="comment"> * 关键在于更新最小右边界  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> points 坐标点  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 最小弓箭数  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findMinArrowShots</span><span class="params">(<span class="type">int</span>[][] points)</span> &#123;  </span><br><span class="line">    Arrays.sort(points, Comparator.comparingInt(o -&gt; o[<span class="number">0</span>]));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (points.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> points.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; points.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (points[i][<span class="number">0</span>] &gt; points[i - <span class="number">1</span>][<span class="number">1</span>]) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            points[i][<span class="number">1</span>] = Math.min(points[i][<span class="number">1</span>], points[i - <span class="number">1</span>][<span class="number">1</span>]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="435无重叠区间-2">435无重叠区间</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0435.%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4.html" >https://programmercarl.com/0435.无重叠区间.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：和上一题差不多，找重叠的，然后移除了  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> intervals 区间的集合  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">eraseOverlapIntervals</span><span class="params">(<span class="type">int</span>[][] intervals)</span> &#123;  </span><br><span class="line">    Arrays.sort(intervals, Comparator.comparingInt(o -&gt; o[<span class="number">0</span>]));  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (intervals.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> count;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; intervals.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (intervals[i][<span class="number">0</span>] &gt;= intervals[i - <span class="number">1</span>][<span class="number">1</span>])&#123;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">            intervals[i][<span class="number">1</span>] = Math.min(intervals[i][<span class="number">1</span>], intervals[i - <span class="number">1</span>][<span class="number">1</span>]);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="763划分字母区间-2">763划分字母区间</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0763.%E5%88%92%E5%88%86%E5%AD%97%E6%AF%8D%E5%8C%BA%E9%97%B4.html" >https://programmercarl.com/0763.划分字母区间.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：  </span></span><br><span class="line"><span class="comment"> * 1. 找到每个字母的区间  </span></span><br><span class="line"><span class="comment"> * 2. 根据遍历中最远结束节点，更新切割位置  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s 字符串  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title function_">partitionLabels</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    <span class="type">char</span>[] chars = s.toCharArray();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 记录每个字母最后出现的节点  </span></span><br><span class="line">    <span class="type">int</span>[] ints = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">26</span>];  </span><br><span class="line">    Arrays.fill(ints, -<span class="number">1</span>);  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;  </span><br><span class="line">        ints[chars[i] - <span class="string">&#x27;a&#x27;</span>] = i;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">idx</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">// 记录上一个切割的位置（用于计算存入list的长度）  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">last</span> <span class="operator">=</span> -<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 把节点更新为要结束的地方  </span></span><br><span class="line">        idx = Math.max(idx, ints[chars[i] - <span class="string">&#x27;a&#x27;</span>]);  </span><br><span class="line">        <span class="comment">// 直到可以结束  </span></span><br><span class="line">        <span class="keyword">if</span> (i == idx) &#123;  </span><br><span class="line">            list.add(i - last);  </span><br><span class="line">            last = i;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> list;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：可能因为熬夜，思绪都是飘的。都是看了解析写出来的。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-15 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>面试-反射、GC、JVM优化</title>
    <link href="https://kiml.github.io/posts/6f2f510a/"/>
    <id>https://kiml.github.io/posts/6f2f510a/</id>
    <published>2024-06-14T13:37:11.000Z</published>
    <updated>2024-06-18T07:05:59.800Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>❗表示必掌握，❔表示基本不会问</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">24-06-14 初始记录 这JVM的图居然是我以前画的，一点都不记得了。</span><br><span class="line">24-06-16 补充JVM，部分问题没有深入，需要看新的视频。</span><br><span class="line">24-06-18 补充剩下的内容</span><br></pre></td></tr></table></figure><span id="more"></span><h1>类加载器与反射</h1><h2 id="简述java类加载机制？">简述java类加载机制？</h2><p>虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的java类型。</p><h2 id="描述一下JVM加载Class文件的原理机制？">描述一下JVM加载Class文件的原理机制？</h2><p>Java中的所有类，都需要由类加载器装载到JVM中才能运行。类加载器本身也是一个类，而它的工作就是把class文件从硬盘读取到内存中。在写程序的时候，我们几乎不需要关心类的加载，因为这些都是隐式装载的，除非我们有特殊的用法，像是反射，就需要显式的加载所需要的类。</p><p>类装载方式，有两种 ：</p><ol><li class="lvl-3"><p>隐式装载， 程序在运行过程中当碰到通过 new 等方式生成对象时，隐式调用类装载器加载对应的类到 jvm 中</p></li><li class="lvl-3"><p>显式装载， 通过class.forname()等方法，显式加载需要的类</p></li></ol><p>Java 类的加载是动态的，它并不会一次性将所有类全部加载后再运行，而是保证程序运行的基础类(像是基类)完全加载到jvm中，至于其他类，则在需要的时候才加载。这当然就是为了节省内存开销。</p><h2 id="说一下类装载的执行过程？">说一下类装载的执行过程？</h2><p>类装载分为以下 5 个步骤：</p><ul class="lvl-0"><li class="lvl-2"><p>加载：根据查找路径找到相应的 class 文件然后导入；</p></li><li class="lvl-2"><p>验证：检查加载的 class 文件的正确性；</p></li><li class="lvl-2"><p>准备：给类中的静态变量分配内存空间；</p></li><li class="lvl-2"><p>解析：虚拟机将常量池中的符号引用替换成直接引用的过程。符号引用就理解为一个标示，而在直接引用直接指向内存中的地址；</p></li><li class="lvl-2"><p>初始化：对静态变量和静态代码块执行初始化工作。</p></li></ul><h2 id="什么是类加载器，类加载器有哪些">什么是类加载器，类加载器有哪些?</h2><p>宏观来看只有两种类加载器：启动类加载器（c++实现）和其他所有的类加载器（java语言）。</p><p>主要有一下四种类加载器:</p><ul class="lvl-0"><li class="lvl-2"><p>启动类加载器(Bootstrap ClassLoader)：用来加载java核心类库，无法被java程序直接引用。</p></li><li class="lvl-2"><p>平台/扩展类加载器(extensions class loader)：它用来加载 Java 的扩展库。Java 虚拟机的 实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载Java类。（JDK9之后，扩展类加载器被重命名为平台类加载器）。</p></li><li class="lvl-2"><p>系统类加载器（system class loader）：它根据 Java 应用的类路径（CLASSPATH）来加载 Java 类。一般来说，Java 应用的类都是由它来完成加载的。可以通过 ClassLoader.getSystemClassLoader()来获取它。</p></li><li class="lvl-2"><p>用户自定义类加载器，通过继承 java.lang.ClassLoader类的方式实现。</p></li></ul><h2 id="什么是反射机制？">什么是反射机制？</h2><p>JAVA反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。</p><h2 id="什么是静态编译，什么是动态编译？">什么是静态编译，什么是动态编译？</h2><p>静态编译：在编译时确定类型，绑定对象</p><p>动态编译：运行时确定类型，绑定对象</p><h2 id="反射机制的优缺点有哪些？">反射机制的优缺点有哪些？</h2><p>优点： 运行期类型的判断，动态加载类，提高代码灵活度。</p><p>缺点： 性能瓶颈：反射相当于一系列解释操作，通知 JVM 要做的事情，过程比直接的java代码要多了一步委托的过程，反射需要类加载器通过双亲委派模型实现动态编译，效率较低。</p><h2 id="什么是双亲委派机制？">什么是双亲委派机制？</h2><p>首先，JVM中有三大类加载器：启动类加载器（最顶层），平台类加载器（中层），系统类加载器（下层）。</p><p>双亲委派模型就是指一个类加载器收到了类加载请求，它不会直接自己先加载，而把请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，就再往上委托，赴到最顶层的类加载器，如果父类加载器可以完成类加载任务，就成功返回，若不能，就向下传递，让子加载器去加载，这就是双亲委派模式。双亲委派模型主要是用来保证同一个类只能被一个类加载器加载。</p><h2 id="怎么破坏双亲委派机制？">怎么破坏双亲委派机制？</h2><p>一般在自定义类加载器中，我们不希望通过双亲委派机制一层层向上再下来，而是希望直接通过自己定义的类加载器直接实现类加载，来提升加载性能，比如Tomcat中的web容器类加载器就是破坏了双亲委托模式的，里面的WebApplicationClassLoader除了核心类库外，都是优先加载自己路径下的Class。</p><p>要打破双亲委派机制，只要在重写loadclass的过程中，不遵从JVM规范就行了，也就是不盲目优先向Parednt的ClassLoader查找即可。</p><h2 id="你在哪些场景下用过反射？">你在哪些场景下用过反射？</h2><p>反射在框架中有频繁的被使用，比如JDK动态代理，Spring中的注入属性，调用方法等。</p><p>反射更多是为了灵活舍弃一部分性能，自己使用一般用在工具类中，比如频繁通过参数名来调用指定的方法时，可以用通过反射去匹配指定的方法名，然后实现功能。</p><h2 id="Java中获取反射的三种方法是什么？">Java中获取反射的三种方法是什么？</h2><ol><li class="lvl-3"><p>类名.class属性</p></li><li class="lvl-3"><p>对象名.getClass()方法</p></li><li class="lvl-3"><p>Class.forName(全类名)方法</p></li></ol><h2 id="反射可以获取私有方法或构造函数吗或私有成员变量吗？">反射可以获取私有方法或构造函数吗或私有成员变量吗？</h2><p>可以。有专门反射私有构造函数的方法<code>clazz.getDeclaredConstructor(int.class);</code>来读取私有的构造函数，私有成员变量和私有方法也一样，但用这个方法读取完还需要设置一下暴力反射才行：<code>c.setAccessible(true)</code>。</p><h1>JVM</h1><p>内链：[[JVM.excalidraw]]<br>外链：<img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/Z2406/Snipaste_2024-06-17_15-35-20.png"                        alt=""                 ><br>JVM包含两个子系统和两个组件，两个子系统为Class loader(类装载)、Execution engine(执行引擎)；两个组件为Runtime data area(运行时数据区)、Native Interface(本地接口)。</p><p>Class loader(类装载)：根据给定的全限定名类名(如：java.lang.Object)来装载class文件到Runtime data area中的method area。</p><p>Execution engine(执行引擎)：执行classes中的指令。</p><p>Native Interface(本地接口)：与native libraries交互，是其它编程语言交互的接口。</p><p>Runtime data area(运行时数据区域)：这就是我们常说的JVM的内存。</p><p>顺序 ：</p><ol><li class="lvl-3"><p>首先通过编译器把 Java 代码转换成字节码，类加载器（ClassLoader）再把字节码加载到内存中，将其放在运行时数据区（Runtime data area）的方法区内。</p></li><li class="lvl-3"><p>而字节码文件只是 JVM 的一套指令集规范，并不能直接交给底层操作系统去执行，因此需要特定的命令解析器执行引擎（Execution Engine），将字节码翻译成底层系统指令。</p></li><li class="lvl-3"><p>再交由 CPU 去执行，而这个过程中需要调用其他语言的本地库接口（Native Interface）来实现整个程序的功能。</p></li></ol><h2 id="❗JVM中有哪几块内存区域？Java-8之后对内存分代做了什么改进？">❗JVM中有哪几块内存区域？Java 8之后对内存分代做了什么改进？</h2><blockquote><p>首先：一般来说：Spring boot会内置一个tomcat，tomcat自己是基于java来开发的。我们启动的其实是tomcat（一个JVM进程），我们写的代码，会被tomcat加载到JVM中。</p><p>tomcat去负责接收请求，执行我们写好的代码（基于Spring框架的一堆代码）</p></blockquote><ol><li class="lvl-3"><p>程序计数器（Program Counter Register）：当前线程所执行的字节码的行号指示器，个人感觉的他就是为多线程准备的，程序计数器是每个线程独有的，所以是线程安全的。它主要用于记录每个线程的执行情况。</p></li><li class="lvl-3"><p>Java 虚拟机栈（Java Virtual Machine Stacks）：线程私有，用于存储局部变量表、操作数栈、动态链接、方法出口等信息。</p></li><li class="lvl-3"><p>本地方法栈（Native Method Stack）：线程私有，与虚拟机栈的作用是一样的，只不过虚拟机栈是服务 Java 方法的，而本地方法栈是为虚拟机调用 Native 方法服务的（Native方法是JVM底层的C语言对其它系统或硬件进行交互）。</p></li><li class="lvl-3"><p>Java 堆（Java Heap）：Java 虚拟机中内存最大的一块，是被所有线程共享的，几乎所有的对象实例都在这里分配内存；Java堆也叫GC堆，是垃圾收集器管理的主要区域，堆中可以细分为：新生代、老年代；再细致一点，新生代中又分为：Eden Space(伊甸园)、Survivor空间，Survivor空间又分为From区和to区。</p></li><li class="lvl-3"><p>方法区（Methed Area）：1.8之后方法区用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译后的代码等数据。</p></li></ol><ul class="lvl-0"><li class="lvl-2"><p><strong>方法区补充点：</strong></p><ul class="lvl-2"><li class="lvl-6">在JDK1.7以前HotSpot虚拟机使用永久代来实现方法区，永久代的大小在启动JVM时可以设置一个固定值（-XX:MaxPermSize），不可变。</li><li class="lvl-6">在JDK1.7中 存储在永久代的部分数据就已经转移到Java Heap（堆）或者Native memory。譬如符号引用(Symbols)转移到了native memory，原本存放在永久代的字符常量池移出。但永久代仍存在于JDK 1.7中，并没有完全移除。</li><li class="lvl-6">JDK1.8中进行了较大改动：<ul class="lvl-4"><li class="lvl-10">移除了永久代（PermGen），替换为元空间（Metaspace）；</li><li class="lvl-10">永久代中的 class metadata 转移到了 native memory（本地内存，而不是虚拟机）；</li><li class="lvl-10">永久代中的 interned Strings 和 class static variables 转移到了 Java heap（堆）；</li><li class="lvl-10">永久代参数 （PermSize MaxPermSize） -&gt; 元空间参数（MetaspaceSize MaxMetaspaceSize）</li></ul></li></ul></li><li class="lvl-2"><p>永久代（元空间）</p><ul class="lvl-2"><li class="lvl-6">在Java8中，永久代已经被移除，被一个称为“元数据区”（元空间，Metaspace）的区域所取代。</li><li class="lvl-6">值得注意的是：元空间并不在虚拟机中，而是使用本地内存（之前，永久代是在jvm中）。</li><li class="lvl-6">这样，解决了以前永久代的OOM问题，元数据和class对象存在永久代中，容易出现性能问题和内存溢出，毕竟是和老年代共享堆空间。java8后，永久代升级为元空间独立后，也降低了老年代GC的复杂度。</li></ul></li></ul><h2 id="❔你知道JVM是如何运行起来的吗？我们的对象是如何分配的。">❔你知道JVM是如何运行起来的吗？我们的对象是如何分配的。</h2><blockquote><p>大白话：比如说我们有一个类里面包含了main方法，你去执行这个main方法，此时会启动一个JVM的进程。默认会有一个main线程，这个main线程就负责执行这个main方法的代码，进而创建各种对象。</p><p>tomcat也是一样的，类加载到JVM里面，Spring将我们的类实例化成各种Bean容器。会有工作线程来执行我们bean实例对象里的方法和代码，进而也会创建其他的各种对象，实现业务逻辑。</p></blockquote><p>例子：Spring容器中的JVM。</p><ol><li class="lvl-3"><p>类加载器把我们写的类加载到元空间</p></li><li class="lvl-3"><p>Spring容器通过反射技术，获取元空间中的类，创建bean实例对象对象存入堆内存。</p></li><li class="lvl-3"><p>tomcat线程执行请求会在栈内存通过栈帧存放局部变量，引用堆内存中的实例变量</p></li></ol><h2 id="❗JVM在哪些情况下会触发垃圾回收">❗JVM在哪些情况下会触发垃圾回收</h2><blockquote><p>在JVM内存里必然有一个内存的分代模型。比如说一个4核8G的机器，堆内存可能也就4G左右（其他例如栈内存、元空间区域存放类信息也需要空间）。</p><p>堆内存内部再分，比如给年轻代2GB、给老年代2GB，默认情况下Eden和s1、s2的比例是：8:1:1。</p></blockquote><p>如果Eden满了，必然会触发垃圾回收（young GC）。<em>回收的对象就是没有人引用的对象</em>：方法执行过程中的局部变量引用对象、类中的静态变量引用的对象这两类对象不会被回收，其他对象基本上都可以被回收。</p><h3 id="什么是Full-GC？什么情况下会触发？">什么是Full GC？什么情况下会触发？</h3><p>Full GC是指清理整个堆空间——包括年轻代和老年代。</p><p>什么时候触发：</p><ol><li class="lvl-3"><p>调用System.gc</p></li><li class="lvl-3"><p>方法区空间不足</p></li><li class="lvl-3"><p>老年代空间不足，包括：</p><ol><li class="lvl-7">新创建的对象都会被分配到Eden区，如果该对象占用内存非常大，则直接分配到老年代区，此时老年代空间不足。</li><li class="lvl-7">做minor gc操作前，发现要移动的空间（Eden区、From区向To区复制时，To区的内存空间不足）比老年代剩余空间要大，则触发full gc，而不是minor gc。</li></ol></li></ol><h3 id="❗JVM年轻代的回收算法。">❗JVM年轻代的回收算法。</h3><blockquote><p>垃圾回收的时候有一个概念：stop the world。停止jvm内的工作线程的运行，然后扫描所有的对象，判断哪些可以回收，哪些不可以回收。</p><p>年轻代内大部分都是垃圾对象。</p></blockquote><p>垃圾回收：<strong>复制算法</strong>。</p><ol><li class="lvl-3"><p>把年轻代内的存活对象复制到s1，触发young GC把Eden清空。</p></li><li class="lvl-3"><p>第二次满，把年轻代内的存活对象和s1内存活的对象，复制到s2。然后把Eden和s1清空</p></li><li class="lvl-3"><p>Eden又满，把年轻代内的存活对象和s2内存活的对象，复制到s1。然后把Eden和s2清空</p></li></ol><h3 id="❗对象什么时候会转移到老年代中">❗对象什么时候会转移到老年代中</h3><ol><li class="lvl-3"><p>有的对象在年轻代里熬过了很多次垃圾回收（默认是15次，可以设置），就会被认为是长期存活的对象，会从年轻代转移到老年代。（例如：<em>Spring 容器内的一些Bean对象</em>）</p></li><li class="lvl-3"><p>Eden垃圾回收时，发现存活对象的大小，比Suivivor区还要大，就会直接放入老年代。</p></li><li class="lvl-3"><p>很大的对象，会直接存入老年代。</p></li></ol><h3 id="❗JVM老年代的回收算法">❗JVM老年代的回收算法</h3><blockquote><p>老年代内的对象，很多都是长期被引用的，不能用复制算法，效率比较低。</p></blockquote><p>老年代使用的算法是<strong>标记清除（回收）算法</strong>或者<strong>标记压缩算法</strong>。</p><p>标记清除（回收）：</p><ol><li class="lvl-3"><p>首先会从GC root进行遍历，把可达对象（存过的对象）打标记</p></li><li class="lvl-3"><p>再从GC root二次遍历，将没有被打上标记的对象清除掉。优点：老年代对象一般是比较稳定的，相比复制算法，不需要复制大量对象。之所以将所有对象扫描2次，看似比较消耗时间，其实不然，是节省了时间。举个栗子，数组 1,2,3,4,5,6。删除2,3,4，如果每次删除一个数字，那么5,6要移动3次，如果删除1次，那么5,6只需移动1次。</p></li></ol><p>缺点：这种方式需要中断其他线程（STW），相比复制算法，可能产生内存碎片。</p><p>标记压缩：和标记清除算法基本相同，不同的就是，在清除完成之后，会把存活的对象向内存的一边进行压缩，这样就可以解决内存碎片问题。</p><p>当老年代也满了装不下的时候，就会抛出OOM（Out of Memory）异常。</p><h3 id="怎么判断对象是否可以被回收？">怎么判断对象是否可以被回收？</h3><p>垃圾收集器在做垃圾回收的时候，首先需要判定的就是哪些内存是需要被回收的，哪些对象是「存活」的，是不可以被回收的；哪些对象已经「死掉」了，需要被回收。</p><p>一般有两种方法来判断：</p><ol><li class="lvl-3"><p>引用计数器法：为每个对象创建一个引用计数，有对象引用时计数器 +1，引用被释放时计数 -1，当计数器为 0 时就可以被回收。它有一个缺点不能解决循环引用的问题；</p></li><li class="lvl-3"><p>可达性分析算法：从 GC Roots 开始向下搜索，搜索所走过的路径称为引用链。当一个对象到 GC Roots 没有任何引用链相连时，则证明此对象是可以被回收的。</p></li></ol><h3 id="❗常用的垃圾回收器">❗常用的垃圾回收器</h3><ol><li class="lvl-3"><p>parnew+cms的组合（jdk8以及8以前）<br>parnew是新生代回收器，多线程。cms是老年代垃圾回收（比较慢，一般比年轻代慢10倍以上），cms的垃圾回收算法，刚开始用标记清理，然后整理。会产生几个阶段，尽可能并发进行</p></li><li class="lvl-3"><p>G1(Garbage First)（从jdk9往后主推）回收整个堆。</p></li></ol><h2 id="❗生产环境中的Tomcat如何设置JVM参数。如何检查JVM运行情况。">❗生产环境中的Tomcat如何设置JVM参数。如何检查JVM运行情况。</h2><blockquote><p>Java Web系统，在tomcat的一个配置脚本，catalina脚本里找一下。</p></blockquote><p>核心了解点：</p><ol><li class="lvl-3"><p>内存区域大小的分配，每个线程的栈大小，metaspace大小，堆内存的大小，年轻代和老年代分别的大小，eden和survivor区域的大小。（没有设置，会有默认值，可以通过命令行查看）</p></li><li class="lvl-3"><p>垃圾回收器用了什么，每种垃圾回收器是否有对应的一些特殊的参数设置，那些特殊的参数分别用来干什么的。</p></li></ol><p>❗为什么要这么设置？当前系统运行的时候，jvm的表现如何？<br>// todo 额，这部分都在打广告，打算看了另一个视频再补充。</p><h3 id="❗实际项目中是否做过JVM-GC优化，怎么做的？">❗实际项目中是否做过JVM GC优化，怎么做的？</h3><blockquote><p>没做过，直接单机压测，然后调优。</p></blockquote><p>// todo</p><h3 id="❗发生OOM之后，应该如何排查和处理线上系统的OOM问题？">❗发生OOM之后，应该如何排查和处理线上系统的OOM问题？</h3><p>解决的一个思路：在 JVM 里可以设置几个参数，如果一旦 JVM 发生了 OOM 之后，就会导出一份内存的快照。可以用类似MAT这样的工具去分析（<em>找出当时的内存占用最大的对象是谁，找出那些对象是在哪些地方创建出来的，一般来说是对内存去做一个调优</em>）。<br>// todo 这里要结合业务去思考，结合项目（模拟）</p><h2 id="Java会存在内存泄漏吗？请简单描述">Java会存在内存泄漏吗？请简单描述</h2><p>内存泄漏是指不再被使用的对象或者变量一直被占据在内存中。理论上来说，Java是有GC垃圾回收机制的，也就是说，不再被使用的对象，会被GC自动回收掉，自动从内存中清除。</p><p>但是，即使这样，Java也还是存在着内存泄漏的情况，java导致内存泄露的原因很明确：长生命周期的对象持有短生命周期对象的引用就很可能发生内存泄露，尽管短生命周期对象已经不再需要，但是因为长生命周期对象持有它的引用而导致不能被回收，这就是java中内存泄露的发生场景。</p><h2 id="有遇到过栈溢出吗？一般是什么问题导致？">有遇到过栈溢出吗？一般是什么问题导致？</h2><p>栈溢出（StackOverflowError）是指栈内容全部被占用，而数据还要往里放。一般是递归错误或者出现死循环导致。</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
❗表示必掌握，❔表示基本不会问&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-14 初始记录 这JVM的图居然是我以前画的，一点都不记得了。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-06-16 补充JVM，部分问题没有深入，需要看新的视频。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-06-18 补充剩下的内容&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
    
    <category term="面试" scheme="https://kiml.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="八股文" scheme="https://kiml.github.io/tags/%E5%85%AB%E8%82%A1%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十九天-134加油站、135分发糖果、860柠檬水找零、406根据身高重建队列</title>
    <link href="https://kiml.github.io/posts/d65e5e22/"/>
    <id>https://kiml.github.io/posts/d65e5e22/</id>
    <published>2024-06-14T06:29:22.000Z</published>
    <updated>2024-06-15T01:05:25.699Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：134AC但是时间比较长、135看了部分题解AC、860AC（但是HashMap）、406不会</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-14 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="134加油站">134加油站</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/gas-station" >https://leetcode.cn/problems/gas-station<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：有两个 式子 相-，可以得到一个数组。  </span></span><br><span class="line"><span class="comment"> * 然后求这个数组，sum &gt; 0 的情况。  </span></span><br><span class="line"><span class="comment"> * 环形循环不好处理，直接将路线延长一倍  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> gas 汽油  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> cost 消耗  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">startIndex</span> <span class="operator">=</span> -<span class="number">1</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = i; i &lt; gas.length * <span class="number">2</span> &amp;&amp; startIndex &lt; gas.length; i++, j++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (startIndex != -<span class="number">1</span> &amp;&amp; i - startIndex == gas.length) &#123;  </span><br><span class="line">            <span class="keyword">break</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (sum == <span class="number">0</span> &amp;&amp; i &lt; gas.length) &#123;  </span><br><span class="line">            startIndex = i;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (j &gt;= gas.length) &#123;  </span><br><span class="line">            j = i - gas.length;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 获取本段路的剩余情况  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">diff</span> <span class="operator">=</span> gas[j] - cost[j];  </span><br><span class="line">  </span><br><span class="line">        sum += diff;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            startIndex = -<span class="number">1</span>;  </span><br><span class="line">            sum = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> startIndex;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="135分发糖果">135分发糖果</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/candy" >https://leetcode.cn/problems/candy<i class="fas fa-external-link-alt"></i></a>)</p><p>提前看了一部分解析，不能同时考虑左右（没看真的想不到🤕）。但是很慢。看了解析，和我写的一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">candy</span><span class="params">(<span class="type">int</span>[] ratings)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (ratings.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> ratings.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span>[] result = <span class="keyword">new</span> <span class="title class_">int</span>[ratings.length];  </span><br><span class="line">    result[<span class="number">0</span>] = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; ratings.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (ratings[i] &gt; ratings[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            result[i] = result[i - <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">            result[i] = <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    System.out.println(Arrays.toString(result));  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> ratings.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (ratings[i] &gt; ratings[i + <span class="number">1</span>] &amp;&amp; result[i] &lt;= result[i + <span class="number">1</span>]) &#123;  </span><br><span class="line">            result[i] = result[i + <span class="number">1</span>] + <span class="number">1</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    System.out.println(Arrays.toString(result));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> Arrays.stream(result).sum();  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="860柠檬水找零">860柠檬水找零</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/lemonade-change" >https://leetcode.cn/problems/lemonade-change<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lemonadeChange</span><span class="params">(<span class="type">int</span>[] bills)</span> &#123;  </span><br><span class="line">    Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">    map.put(<span class="number">5</span>, <span class="number">0</span>);  </span><br><span class="line">    map.put(<span class="number">10</span>, <span class="number">0</span>);  </span><br><span class="line">    map.put(<span class="number">20</span>, <span class="number">0</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> bill : bills) &#123;  </span><br><span class="line">        <span class="comment">// 收钱  </span></span><br><span class="line">        map.put(bill, map.get(bill) + <span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (bill == <span class="number">10</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (map.get(<span class="number">5</span>) &lt; <span class="number">1</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            map.put(<span class="number">5</span>, map.get(<span class="number">5</span>) - <span class="number">1</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (bill == <span class="number">20</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (map.get(<span class="number">5</span>) &gt;= <span class="number">1</span> &amp;&amp; map.get(<span class="number">10</span>) &gt;= <span class="number">1</span>) &#123;  </span><br><span class="line">                map.put(<span class="number">5</span>, map.get(<span class="number">5</span>) - <span class="number">1</span>);  </span><br><span class="line">                map.put(<span class="number">10</span>, map.get(<span class="number">10</span>) - <span class="number">1</span>);  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (map.get(<span class="number">5</span>) &gt;= <span class="number">3</span>)&#123;  </span><br><span class="line">                map.put(<span class="number">5</span>, map.get(<span class="number">5</span>) - <span class="number">3</span>);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="406根据身高重建队列">406根据身高重建队列</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/queue-reconstruction-by-height" >https://leetcode.cn/problems/queue-reconstruction-by-height<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路，虽然看了提示要和135一样分开处理，但是还是没有思路。</p><h1>看解析</h1><h2 id="134加油站-2">134加油站</h2><p>题解：(<a class="link"   href="https://programmercarl.com/0134.%E5%8A%A0%E6%B2%B9%E7%AB%99.html" >https://programmercarl.com/0134.加油站.html<i class="fas fa-external-link-alt"></i></a>)</p><p>看了解析，明明思路是一样的，就是慢一点。❗忽略了一个点，<strong>如果总和大于0， 那么必定有解</strong>。无语解析里那个totalSum真的太妙了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">canCompleteCircuit</span><span class="params">(<span class="type">int</span>[] gas, <span class="type">int</span>[] cost)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">curSum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">totalSum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; gas.length; i++) &#123;  </span><br><span class="line">        curSum += gas[i] - cost[i];  </span><br><span class="line">        totalSum += gas[i] - cost[i];  </span><br><span class="line">        <span class="keyword">if</span> (curSum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            index = (i + <span class="number">1</span>) % gas.length;  </span><br><span class="line">            curSum = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">if</span> (totalSum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> index;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="135分发糖果-2">135分发糖果</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0135.%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C.html" >https://programmercarl.com/0135.分发糖果.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="860柠檬水找零-2">860柠檬水找零</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0860.%E6%9F%A0%E6%AA%AC%E6%B0%B4%E6%89%BE%E9%9B%B6.html" >https://programmercarl.com/0860.柠檬水找零.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">不用HashMap，直接两个<span class="type">int</span>进行加减🤡</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lemonadeChange</span><span class="params">(<span class="type">int</span>[] bills)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">five</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">ten</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> bill : bills) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (bill == <span class="number">5</span>) &#123;  </span><br><span class="line">            five++;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bill == <span class="number">10</span>) &#123;  </span><br><span class="line">            ten++;  </span><br><span class="line">            five--;  </span><br><span class="line">            <span class="keyword">if</span> (five &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bill == <span class="number">20</span>) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (five &gt;= <span class="number">1</span> &amp;&amp; ten &gt;= <span class="number">1</span>) &#123;  </span><br><span class="line">                five--;  </span><br><span class="line">                ten--;  </span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (five &gt;= <span class="number">3</span>) &#123;  </span><br><span class="line">                five -= <span class="number">3</span>;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="406根据身高重建队列-2">406根据身高重建队列</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0406.%E6%A0%B9%E6%8D%AE%E8%BA%AB%E9%AB%98%E9%87%8D%E5%BB%BA%E9%98%9F%E5%88%97.html" >https://programmercarl.com/0406.根据身高重建队列.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路: 先按身高排序, 然后根据前面的人数进行队列调整。  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> people 队伍需求  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 排号的队列  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span>[][] reconstructQueue(<span class="type">int</span>[][] people) &#123;  </span><br><span class="line">    Arrays.sort(people, (o1, o2) -&gt; &#123;  </span><br><span class="line">        <span class="keyword">if</span> (o1[<span class="number">0</span>] == o2[<span class="number">0</span>]) &#123;  </span><br><span class="line">            <span class="keyword">return</span> o1[<span class="number">1</span>] - o2[<span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> o2[<span class="number">0</span>] - o1[<span class="number">0</span>];  </span><br><span class="line">    &#125;);  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 队列调整用LinkedList。按顺序在下标位置插入，这样每次插入的值都在相应的下标上。</span></span><br><span class="line"><span class="comment">// 把旧的大于等于它的值往后调整，不影响之前的排序。</span></span><br><span class="line">    LinkedList&lt;<span class="type">int</span>[]&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span>[] person : people) &#123;  </span><br><span class="line">        list.add(person[<span class="number">1</span>], person);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> list.toArray(<span class="keyword">new</span> <span class="title class_">int</span>[people.length][]);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：134AC但是时间比较长、135看了部分题解AC、860AC（但是HashMap）、406不会&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-14 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十八天-122买卖股票的最佳时机II、55 跳跃游戏、45跳跃游戏II、1005K次取反后最大化的数组和</title>
    <link href="https://kiml.github.io/posts/8d31312e/"/>
    <id>https://kiml.github.io/posts/8d31312e/</id>
    <published>2024-06-14T01:01:01.000Z</published>
    <updated>2024-06-15T01:05:18.011Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：122AC，55看了题解AC，45AC，题解代码更简单一点</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-14 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="122买卖股票的最佳时机II">122买卖股票的最佳时机II</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii" >https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii<i class="fas fa-external-link-alt"></i></a>)</p><p>画图很简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 就是算所有增区间的值  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prices 列表  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 股票金额  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; prices.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (prices[i] &gt;= prices[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            sum +=prices[i] - prices[i - <span class="number">1</span>];  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> sum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="55-跳跃游戏">55 跳跃游戏</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/jump-game/" >https://leetcode.cn/problems/jump-game/<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路。看了部分题解，说是求覆盖最大的范围。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">canJump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (i &gt; maxIndex) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里看了题解优化了一下</span></span><br><span class="line">        maxIndex = Math.max(nums[i] + i, maxIndex);  </span><br><span class="line">        <span class="keyword">if</span> (maxIndex &gt;= nums.length - <span class="number">1</span>)&#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><h2 id="45跳跃游戏II">45跳跃游戏II</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/jump-game-ii/" >https://leetcode.cn/problems/jump-game-ii/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 假设每次都跳跃区间内最远的距离  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxIndex</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">maxJ</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (nums.length == <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> count;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length;) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (i + nums[i] &gt;= nums.length - <span class="number">1</span>) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">            <span class="keyword">return</span> count;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt;= i + nums[i] &amp;&amp; j &lt; nums.length; j++) &#123;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (j + nums[j] &gt;= maxIndex) &#123;  </span><br><span class="line">                maxIndex = j + nums[j];  </span><br><span class="line">                maxJ = j;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        count++;  </span><br><span class="line">        i = maxJ;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1005K次取反后最大化的数组和">1005K次取反后最大化的数组和</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations" >https://leetcode.cn/problems/maximize-sum-of-array-after-k-negations<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：可以多次选择同一个数字，返回最大和，说明可以先排序  </span></span><br><span class="line"><span class="comment"> * 1. 从小到大排列， 把所有负数变正  </span></span><br><span class="line"><span class="comment"> * 2. 还有次数剩余。奇数次剩余，就把绝对值最小的翻转一次。  </span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 数组  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> k 翻转次数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">largestSumAfterKNegations</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> k)</span> &#123;  </span><br><span class="line">    Arrays.sort(nums);  </span><br><span class="line">    <span class="type">int</span> <span class="variable">minAbs</span> <span class="operator">=</span> Integer.MAX_VALUE;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (Math.abs(nums[i]) &lt; minAbs) &#123;  </span><br><span class="line">            minAbs = Math.min(minAbs, Math.abs(nums[i]));  </span><br><span class="line">            index = i;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (k &gt; <span class="number">0</span> &amp;&amp; nums[i] &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            nums[i] = -nums[i];  </span><br><span class="line">            k--;  </span><br><span class="line">        &#125;  </span><br><span class="line">        sum += nums[i];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (k % <span class="number">2</span> == <span class="number">1</span>) &#123;  </span><br><span class="line">        sum -= <span class="number">2</span> * nums[index];  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> sum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看解析</h1><h2 id="122买卖股票的最佳时机II-2">122买卖股票的最佳时机II</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0122.%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII.html" >https://programmercarl.com/0122.买卖股票的最佳时机II.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="55-跳跃游戏-2">55 跳跃游戏</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0055.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F.html" >https://programmercarl.com/0055.跳跃游戏.html<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="45跳跃游戏II-2">45跳跃游戏II</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0045.%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII.html" >https://programmercarl.com/0045.跳跃游戏II.html<i class="fas fa-external-link-alt"></i></a>)</p><p>题解的思路在于增加覆盖范围。每更新一次覆盖范围，就结果+1（这里比较绕，但是这样就不用双层循环了）。简化版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">jump</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 当前覆盖的最远距离下标</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="comment">// 下一步覆盖的最远距离下标</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= end &amp;&amp; end &lt; nums.length - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">          temp = Math.max(temp, i + nums[i]);</span><br><span class="line">          <span class="comment">// 可达位置的改变次数就是跳跃次数</span></span><br><span class="line">          <span class="keyword">if</span> (i == end) &#123;</span><br><span class="line">              end = temp;</span><br><span class="line">              result++;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="1005K次取反后最大化的数组和-2">1005K次取反后最大化的数组和</h2><p>解析：(<a class="link"   href="https://programmercarl.com/1005.K%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C.html" >https://programmercarl.com/1005.K次取反后最大化的数组和.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：122AC，55看了题解AC，45AC，题解代码更简单一点&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-14 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十七天-455分发饼干、376摆动序列、53最大子序和</title>
    <link href="https://kiml.github.io/posts/dc3e282a/"/>
    <id>https://kiml.github.io/posts/dc3e282a/</id>
    <published>2024-06-13T01:17:44.000Z</published>
    <updated>2024-06-15T01:05:11.670Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：455AC、376、53都需要看解析，感觉贪心上来都是一点思路都没有，可能题做的不够多。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-13 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="455分发饼干">455分发饼干</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/assign-cookies" >https://leetcode.cn/problems/assign-cookies<i class="fas fa-external-link-alt"></i></a>)</p><p>属于小饼干优先。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">    <span class="type">int</span>[] g = &#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>&#125;;  </span><br><span class="line">    <span class="type">int</span>[] s = &#123;<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;  </span><br><span class="line">    System.out.println(findContentChildren(g, s));  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 感觉上s从小排序，g从小排序。按序分配就行。  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> g 孩子胃口  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s 饼干数  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">findContentChildren</span><span class="params">(<span class="type">int</span>[] g, <span class="type">int</span>[] s)</span> &#123;  </span><br><span class="line">    Arrays.sort(s);  </span><br><span class="line">    Arrays.sort(g);  </span><br><span class="line">  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>; i &lt; g.length &amp;&amp; j &lt; s.length; j++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (g[i] &lt;= s[j]) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">            i++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="376摆动序列">376摆动序列</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/wiggle-subsequence" >https://leetcode.cn/problems/wiggle-subsequence<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路。看了一点点解析，画图。把坡删了。（但是又忽略了单调坡的情况，具体题解在看解析部分）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> nums.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] != nums[<span class="number">1</span>]) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">2</span>) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        count = <span class="number">2</span>;  </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">        count = <span class="number">1</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">slopePre</span> <span class="operator">=</span> nums[i - <span class="number">1</span>] - nums[i - <span class="number">2</span>];  </span><br><span class="line">        <span class="type">int</span> <span class="variable">slope</span> <span class="operator">=</span> nums[i] - nums[i - <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ((slopePre &gt;= <span class="number">0</span>  &amp;&amp; slope &lt; <span class="number">0</span>) || (slopePre &lt;= <span class="number">0</span> &amp;&amp; slope &gt; <span class="number">0</span>)) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="53最大子序和">53最大子序和</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/maximum-subarray" >https://leetcode.cn/problems/maximum-subarray<i class="fas fa-external-link-alt"></i></a>)</p><p>没有思路。看了部分解析，说是连续和如果出现负数，直接抛弃，从下一个数开始。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路是连续和为负，就直接抛弃连续和  </span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> Integer.MIN_VALUE;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;  </span><br><span class="line">        sum += num;  </span><br><span class="line">        max = Math.max(sum, max);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> (sum &lt; <span class="number">0</span>) &#123;  </span><br><span class="line">            sum = <span class="number">0</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> max;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看解析</h1><h2 id="455分发饼干-2">455分发饼干</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0455.%E5%88%86%E5%8F%91%E9%A5%BC%E5%B9%B2.html" >https://programmercarl.com/0455.分发饼干.html<i class="fas fa-external-link-alt"></i></a>)</p><p>有两种思路，大饼干优先满足胃口大的；小饼干优先满足胃口小的。</p><h2 id="376摆动序列-2">376摆动序列</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0376.%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0376.摆动序列.html<i class="fas fa-external-link-alt"></i></a>)</p><p>思路：</p><ol><li class="lvl-3"><p>怎样算有峰值<code>(preDiff &gt;= 0  &amp;&amp; curDiff &lt; 0) || (preDiff &lt;= 0 &amp;&amp; curDiff &gt; 0)</code></p></li><li class="lvl-3"><p>数组首怎么计数：默认加上一个平节点，即preDiff为0</p></li><li class="lvl-3"><p>单调坡度有平坡：只在坡度进行更新的时候，才把前一个坡值进行记录</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">wiggleMaxLength</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (nums.length &lt;= <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> nums.length;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 当前的差值  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">curDiff</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="comment">// 前一个坡的差值  </span></span><br><span class="line">    <span class="type">int</span> <span class="variable">preDiff</span> <span class="operator">=</span> <span class="number">0</span>;  </span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">1</span>;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        curDiff = nums[i] - nums[i - <span class="number">1</span>];  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ((preDiff &gt;= <span class="number">0</span>  &amp;&amp; curDiff &lt; <span class="number">0</span>) || (preDiff &lt;= <span class="number">0</span> &amp;&amp; curDiff &gt; <span class="number">0</span>)) &#123;  </span><br><span class="line">            count++;  </span><br><span class="line">            <span class="comment">// 只有坡度更新才记录坡值  </span></span><br><span class="line">            preDiff = curDiff;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> count;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个偷懒版本是先去重，再找坡。但是要循环两次，时间复杂度变高。</p><h2 id="53最大子序和-2">53最大子序和</h2><p>解析：(<a class="link"   href="https://programmercarl.com/0053.%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C.html" >https://programmercarl.com/0053.最大子序和.html<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：455AC、376、53都需要看解析，感觉贪心上来都是一点思路都没有，可能题做的不够多。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-13 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="贪心算法" scheme="https://kiml.github.io/tags/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十六天-332重新安排行程、51N皇后、 37解数独</title>
    <link href="https://kiml.github.io/posts/cf86d462/"/>
    <id>https://kiml.github.io/posts/cf86d462/</id>
    <published>2024-06-12T03:06:01.000Z</published>
    <updated>2024-06-13T13:47:38.664Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：今天的题，看标注说都很难，先去总结再做这个。时间不太够了，都是直接看的解析然后做题。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-06-12 初始记录</span><br><span class="line">24-06-13 完成题解</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="332重新安排行程">332重新安排行程</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/reconstruct-itinerary" >https://leetcode.cn/problems/reconstruct-itinerary<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="51N皇后">51N皇后</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/n-queens" >https://leetcode.cn/problems/n-queens<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="37解数独">37解数独</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/sudoku-solver" >https://leetcode.cn/problems/sudoku-solver<i class="fas fa-external-link-alt"></i></a>)</p><h1>看解析</h1><h2 id="332重新安排行程-2">332重新安排行程</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0332.%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B.html" >https://programmercarl.com/0332.重新安排行程.html<i class="fas fa-external-link-alt"></i></a>)<br>解法超时（第80个用例）：加上剪枝不会超时。别的思路都和清晰，但是剪枝那一步有点难想到。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> &#123;  </span><br><span class="line">    List&lt;String&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 按字典排序排序（目的地排序）</span></span><br><span class="line">    tickets.sort(Comparator.comparing(o -&gt; o.get(<span class="number">1</span>)));  </span><br><span class="line">    <span class="comment">// 用于记录当前节点是否使用  </span></span><br><span class="line">    <span class="type">boolean</span>[] flagList = <span class="keyword">new</span> <span class="title class_">boolean</span>[tickets.size()];  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 行程必须从JFK开始  </span></span><br><span class="line">    resultOne.add(<span class="string">&quot;JFK&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 这里如果找到一条就直接返回  </span></span><br><span class="line">    findItineraryDFS(flagList, tickets, resultOne);  </span><br><span class="line">    <span class="keyword">return</span> resultOne;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">findItineraryDFS</span><span class="params">(<span class="type">boolean</span>[] flagList, List&lt;List&lt;String&gt;&gt; tickets, List&lt;String&gt; resultOne)</span> &#123;  </span><br><span class="line">    <span class="comment">// tickets为线路数，节点数要加1  </span></span><br><span class="line">    <span class="keyword">if</span> (resultOne.size() == tickets.size() + <span class="number">1</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tickets.size(); i++) &#123;  </span><br><span class="line">    <span class="comment">// 为了防止超时加上这句的剪枝</span></span><br><span class="line">    <span class="comment">// 如果这张票和上张票相同 且上张票没用过 说明是从上张票回溯过来的，已经遍历过这种情况，跳过</span></span><br><span class="line">    <span class="keyword">if</span>(i &gt; <span class="number">0</span> &amp;&amp; tickets.get(i).equals(tickets.get(i - <span class="number">1</span>)) &amp;&amp; !flagList[i - <span class="number">1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (!flagList[i] &amp;&amp; tickets.get(i).get(<span class="number">0</span>).equals(resultOne.get(resultOne.size() - <span class="number">1</span>))) &#123;  </span><br><span class="line">            resultOne.add(tickets.get(i).get(<span class="number">1</span>));  </span><br><span class="line">            flagList[i] = <span class="literal">true</span>;  </span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (findItineraryDFS(flagList, tickets, resultOne)) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">            resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">            flagList[i] = <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="51N皇后-2">51N皇后</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0051.N%E7%9A%87%E5%90%8E.html" >https://programmercarl.com/0051.N皇后.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE51</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  </span><br><span class="line">        solveNQueens(<span class="number">4</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;  </span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">        <span class="type">char</span>[][] chars = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] c : chars) &#123;  </span><br><span class="line">            Arrays.fill(c, <span class="string">&#x27;.&#x27;</span>);  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        solveNQueensDFS(<span class="number">0</span>, n, chars, result);  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> row    行数  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n      棋盘大小  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> chars  棋盘摆法  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 结果  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solveNQueensDFS</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> n, <span class="type">char</span>[][] chars, List&lt;List&lt;String&gt;&gt; result)</span> &#123;  </span><br><span class="line">        <span class="keyword">if</span> (row == n) &#123;  </span><br><span class="line">            List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span>[] aChar : chars) &#123;  </span><br><span class="line">                list.add(String.copyValueOf(aChar));  </span><br><span class="line">            &#125;  </span><br><span class="line">            result.add(list);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (isValid(row, i, n, chars)) &#123;  </span><br><span class="line">                chars[row][i] = <span class="string">&#x27;Q&#x27;</span>;  </span><br><span class="line">                solveNQueensDFS(row + <span class="number">1</span>, n, chars, result);  </span><br><span class="line">                chars[row][i] = <span class="string">&#x27;.&#x27;</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isValid</span><span class="params">(<span class="type">int</span> row, <span class="type">int</span> col, <span class="type">int</span> n, <span class="type">char</span>[][] chars)</span> &#123;  </span><br><span class="line">        <span class="comment">// 检查列  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; row; ++i) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (chars[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 检查45度对角线  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (chars[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 检查135度对角线  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt;= n - <span class="number">1</span>; i--, j++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (chars[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="37解数独-2">37解数独</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0037.%E8%A7%A3%E6%95%B0%E7%8B%AC.html" >https://programmercarl.com/0037.解数独.html<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LE37</span> &#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;  </span><br><span class="line">        solveSudokuDFS(board);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">solveSudokuDFS</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; board.length; i++) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (board[i][j] != <span class="string">&#x27;0&#x27;</span>) &#123;  </span><br><span class="line">                    <span class="keyword">continue</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="keyword">for</span> (<span class="type">char</span> <span class="variable">k</span> <span class="operator">=</span> <span class="string">&#x27;1&#x27;</span>; k &lt;= <span class="string">&#x27;9&#x27;</span>; k++) &#123;  </span><br><span class="line">                    <span class="keyword">if</span> (isvalid(i, j, k, board)) &#123;  </span><br><span class="line">                        board[i][j] = k;  </span><br><span class="line">  </span><br><span class="line">                        <span class="keyword">if</span> (solveSudokuDFS(board)) &#123;  </span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                        board[i][j] = <span class="string">&#x27;.&#x27;</span>;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">                <span class="comment">// 走到这一行，说明直到递归完毕，都没有返回true   </span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**  </span></span><br><span class="line"><span class="comment">     * 判断棋盘放入这个数是否合法  </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> i     行  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> j     列  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> k     值  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> board 棋盘  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 是否合法  </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isvalid</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j, <span class="type">char</span> k, <span class="type">char</span>[][] board)</span> &#123;  </span><br><span class="line">        <span class="comment">// 行中是否含有这个数  </span></span><br><span class="line">        <span class="comment">// 列中是否含有这个数  </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>; index &lt; board.length; index++) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (board[i][index] == k) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">            <span class="keyword">if</span> (board[index][j] == k) &#123;  </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 9宫格中是否含有这个数  </span></span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> (i / <span class="number">3</span>) * <span class="number">3</span>;  </span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> (j / <span class="number">3</span>) * <span class="number">3</span>;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">indexX</span> <span class="operator">=</span> x; indexX &lt; x + <span class="number">3</span>; indexX++) &#123;  </span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">indexY</span> <span class="operator">=</span> y; indexY &lt; y + <span class="number">3</span>; indexY++) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (board[indexX][indexY] == k) &#123;  </span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：今天的题，看标注说都很难，先去总结再做这个。时间不太够了，都是直接看的解析然后做题。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-12 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-06-13 完成题解&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="回溯算法" scheme="https://kiml.github.io/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十五天-491递增子序列 、46全排列 、47全排列 II</title>
    <link href="https://kiml.github.io/posts/f191c36/"/>
    <id>https://kiml.github.io/posts/f191c36/</id>
    <published>2024-06-11T08:02:17.000Z</published>
    <updated>2024-06-12T13:04:11.990Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：491超时。46AC。47不是很对，要看解析，主要是去重那一步。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">24-06-11 初始记录</span><br><span class="line">24-06-12 完成</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="491递增子序列">491递增子序列</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/non-decreasing-subsequences" >https://leetcode.cn/problems/non-decreasing-subsequences<i class="fas fa-external-link-alt"></i></a>)</p><p>超时了，主要是去重那一步应该。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    findSubsequencesDFS(<span class="number">0</span> , nums, resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findSubsequencesDFS</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span>[] nums, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;  </span><br><span class="line">    <span class="comment">// 先这样判断是否重复  </span></span><br><span class="line">    <span class="keyword">if</span> (resultOne.size() &gt;= <span class="number">2</span> &amp;&amp; !result.contains(resultOne)) &#123;  </span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (resultOne.size() != <span class="number">0</span> &amp;&amp; resultOne.get(resultOne.size() - <span class="number">1</span>) &gt; nums[i]) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        resultOne.add(nums[i]);   </span><br><span class="line">        findSubsequencesDFS(i + <span class="number">1</span>, nums, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="46全排列">46全排列</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/permutations/description/" >https://leetcode.cn/problems/permutations/description/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 排列每个变量都要统计，所以不需要startIndex</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    permuteDFS(nums, resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">permuteDFS</span><span class="params">(<span class="type">int</span>[] nums, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (resultOne.size() == nums.length) &#123;  </span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (resultOne.contains(nums[i])) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        resultOne.add(nums[i]);  </span><br><span class="line">        permuteDFS(nums, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="47全排列-II">47全排列 II</h2><p>题目链接：(<a class="link"   href="http://leetcode.cn/problems/permutations-ii/" >leetcode.cn/problems/permutations-ii/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 和上一题唯一的区别就是数组元素重复。  </span></span><br><span class="line"><span class="comment"> * 所以不能用数组直接统计，得用index记录这个是否被记过  </span></span><br><span class="line"><span class="comment"> * 还有点缺陷。重复元素会按不同下标被重复计入.  </span></span><br><span class="line"><span class="comment"> * 和之前一样，单层元素不能重复。  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums nums  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    Arrays.sort(nums);  </span><br><span class="line">    permuteUniqueDFS(nums, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">permuteUniqueDFS</span><span class="params">(<span class="type">int</span>[] nums, List&lt;Integer&gt; resultIndex, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (resultOne.size() == nums.length) &#123;  </span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 判断这层有没有使用过这个数字，和LE491一样  </span></span><br><span class="line">    HashSet&lt;Integer&gt; set = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();  </span><br><span class="line">    <span class="comment">// set记录下标  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (resultIndex.contains(i)) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (set.contains(nums[i])) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        resultIndex.add(i);  </span><br><span class="line">        resultOne.add(nums[i]);  </span><br><span class="line">        set.add(nums[i]);  </span><br><span class="line">        permuteUniqueDFS(nums, resultIndex, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">        resultIndex.remove(resultIndex.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看题解</h1><h2 id="491递增子序列-2">491递增子序列</h2><p>(<a class="link"   href="https://programmercarl.com/0491.%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97.html" >https://programmercarl.com/0491.递增子序列.html<i class="fas fa-external-link-alt"></i></a>)</p><p>视频讲解：(<a class="link"   href="https://www.bilibili.com/video/BV1EG4y1h78v" >https://www.bilibili.com/video/BV1EG4y1h78v<i class="fas fa-external-link-alt"></i></a>)<br>加了剪枝操作的优化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">findSubsequences</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    findSubsequencesDFS(<span class="number">0</span> , nums, resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">findSubsequencesDFS</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span>[] nums, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;   </span><br><span class="line">    <span class="keyword">if</span> (resultOne.size() &gt;= <span class="number">2</span>) &#123;  </span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    HashMap&lt;Integer,Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (resultOne.size() != <span class="number">0</span> &amp;&amp; resultOne.get(resultOne.size() - <span class="number">1</span>) &gt; nums[i]) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 判断这层是否使用  </span></span><br><span class="line">        <span class="keyword">if</span> (map.getOrDefault(nums[i], <span class="number">0</span>) &gt;= <span class="number">1</span>) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);  </span><br><span class="line">        resultOne.add(nums[i]);  </span><br><span class="line">        findSubsequencesDFS(i + <span class="number">1</span>, nums, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="46全排列-2">46全排列</h2><p>(<a class="link"   href="https://programmercarl.com/0046.%E5%85%A8%E6%8E%92%E5%88%97.html" >https://programmercarl.com/0046.全排列.html<i class="fas fa-external-link-alt"></i></a>)</p><p>视频讲解：(<a class="link"   href="https://www.bilibili.com/video/BV19v4y1S79W" >https://www.bilibili.com/video/BV19v4y1S79W<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="47全排列-II-2">47全排列 II</h2><p>(<a class="link"   href="https://programmercarl.com/0047.%E5%85%A8%E6%8E%92%E5%88%97II.html" >https://programmercarl.com/0047.全排列II.html<i class="fas fa-external-link-alt"></i></a>)</p><p>视频讲解：(<a class="link"   href="https://www.bilibili.com/video/BV1R84y1i7Tm" >https://www.bilibili.com/video/BV1R84y1i7Tm<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (nums == <span class="literal">null</span> || nums.length == <span class="number">0</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    Arrays.sort(nums);  </span><br><span class="line">    permuteUniqueDFS(nums, <span class="keyword">new</span> <span class="title class_">boolean</span>[]&#123;&#125;, resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 用数组标记因为这个树更像一个矩阵  </span></span><br><span class="line"><span class="comment"> * 数组可以标记nums又可以标记层数  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">permuteUniqueDFS</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">boolean</span>[] used, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (resultOne.size() == nums.length) &#123;  </span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// set记录下标  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="comment">// 记录了index值，即这index被使用了（这里可以理解）  </span></span><br><span class="line">        <span class="keyword">if</span> (used[i]) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 如果这个数值和前面的数值相同  </span></span><br><span class="line">        <span class="comment">// 首先一定要排序，这样nums数组中的前面一个节点，就一定是被用过了  </span></span><br><span class="line">        <span class="comment">// 然后现在到这个节点，前面一个节点的状态是false(这里横向看)，说明已经回溯了。节点已经被添加，跳过这层  </span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !used[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="comment">// 这层是否使用过  </span></span><br><span class="line">        used[i] = <span class="literal">true</span>;  </span><br><span class="line">        resultOne.add(nums[i]);  </span><br><span class="line">        permuteUniqueDFS(nums, used, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">        used[i] = <span class="literal">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：491超时。46AC。47不是很对，要看解析，主要是去重那一步。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-11 初始记录&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24-06-12 完成&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="回溯算法" scheme="https://kiml.github.io/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十四天-93复原IP地址、78子集、90子集II</title>
    <link href="https://kiml.github.io/posts/c27b36b8/"/>
    <id>https://kiml.github.io/posts/c27b36b8/</id>
    <published>2024-06-11T06:02:58.000Z</published>
    <updated>2024-06-12T13:03:38.862Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：93可以AC。78、90AC。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-11 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="93复原IP地址">93复原IP地址</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/restore-ip-addresses" >https://leetcode.cn/problems/restore-ip-addresses<i class="fas fa-external-link-alt"></i></a>)<br>解的时候不知道单字符串怎么操作了，加了一个数组。慢了很多。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;String&gt; temp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (s.length() &lt; <span class="number">4</span> || s.length() &gt; <span class="number">12</span>)&#123;  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    restoreIpAddressesDFS(<span class="number">0</span>, temp, s, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * * <span class="doctag">@param</span> startIndex 开始Index  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> s 输入的s  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> result 切割的字符串集  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">restoreIpAddressesDFS</span><span class="params">(<span class="type">int</span> startIndex, List&lt;String&gt; temp, String s, List&lt;String&gt; result)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (startIndex &gt;= s.length() &amp;&amp; temp.size() == <span class="number">4</span>) &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">resultOne</span> <span class="operator">=</span> String.join(<span class="string">&quot;.&quot;</span>, temp);  </span><br><span class="line">        result.add(resultOne);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; s.length() &amp;&amp; Integer.parseInt(s.substring(startIndex, i + <span class="number">1</span>)) &lt; <span class="number">256</span>; i++) &#123;  </span><br><span class="line">        <span class="comment">// 8 为 substring 的取值就在 1 - 3之间  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> s.substring(startIndex, i + <span class="number">1</span>);  </span><br><span class="line">        <span class="keyword">if</span> (substring.length() &lt; <span class="number">1</span> || substring.length() &gt; <span class="number">3</span>) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">if</span> (substring.length() &gt; <span class="number">1</span> &amp;&amp; substring.startsWith(<span class="string">&quot;0&quot;</span>)) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        temp.add(substring);  </span><br><span class="line">        restoreIpAddressesDFS(i + <span class="number">1</span>, temp, s, result);  </span><br><span class="line">        temp.remove(temp.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="78子集">78子集</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/subsets" >https://leetcode.cn/problems/subsets<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsets</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 排序  </span></span><br><span class="line">    Arrays.sort(nums);  </span><br><span class="line">    </span><br><span class="line">    subsetsDFS(<span class="number">0</span>, nums, resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 这个和之前的区别在于，如果转化成一颗树。之前只要求叶子节点。这个全部都要  </span></span><br><span class="line"><span class="comment"> * 而且还要不重复（😗写错了，看成90的题了。这题还要更简单一点。）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIndex 起始index  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">subsetsDFS</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span>[] nums, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;    </span><br><span class="line">    result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        resultOne.add(nums[i]);  </span><br><span class="line">        subsetsDFS(i + <span class="number">1</span>, nums, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="90子集II">90子集II</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/subsets-ii" >https://leetcode.cn/problems/subsets-ii<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">subsetsWithDup</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 排序  </span></span><br><span class="line">    Arrays.sort(nums);  </span><br><span class="line">  </span><br><span class="line">    subsetsDFS(<span class="number">0</span>, nums, resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIndex 起始index  </span></span><br><span class="line"><span class="comment"> */</span><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">subsetsDFS</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span>[] nums, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;  </span><br><span class="line">    result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; nums.length; i++) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= startIndex &amp;&amp; nums[i] == nums[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        resultOne.add(nums[i]);  </span><br><span class="line">        subsetsDFS(i + <span class="number">1</span>, nums, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>看解析</h1><h2 id="93复原IP地址-2">93复原IP地址</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0093.%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80.html" >https://programmercarl.com/0093.复原IP地址.html<i class="fas fa-external-link-alt"></i></a>)</p><p>视频讲解：(<a class="link"   href="https://www.bilibili.com/video/BV1XP4y1U73i/" >https://www.bilibili.com/video/BV1XP4y1U73i/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;String&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;String&gt;();</span><br><span class="line"><span class="type">StringBuilder</span> <span class="variable">stringBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;String&gt; <span class="title function_">restoreIpAddresses</span><span class="params">(String s)</span> &#123;</span><br><span class="line">restoreIpAddressesHandler(s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// number表示stringbuilder中ip段的数量</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">restoreIpAddressesHandler</span><span class="params">(String s, <span class="type">int</span> start, <span class="type">int</span> number)</span> &#123;</span><br><span class="line"><span class="comment">// 如果start等于s的长度并且ip段的数量是4，则加入结果集，并返回</span></span><br><span class="line"><span class="keyword">if</span> (start == s.length() &amp;&amp; number == <span class="number">4</span>) &#123;</span><br><span class="line">result.add(stringBuilder.toString());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 如果start等于s的长度但是ip段的数量不为4，或者ip段的数量为4但是start小于s的长度，则直接返回</span></span><br><span class="line"><span class="keyword">if</span> (start == s.length() || number == <span class="number">4</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 剪枝：ip段的长度最大是3，并且ip段处于[0,255]</span></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; s.length() &amp;&amp; i - start &lt; <span class="number">3</span> &amp;&amp; Integer.parseInt(s.substring(start, i + <span class="number">1</span>)) &gt;= <span class="number">0</span></span><br><span class="line">&amp;&amp; Integer.parseInt(s.substring(start, i + <span class="number">1</span>)) &lt;= <span class="number">255</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 如果ip段的长度大于1，并且第一位为0的话，continue</span></span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> - start &gt; <span class="number">1</span> &amp;&amp; s.charAt(start) - <span class="string">&#x27;0&#x27;</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">stringBuilder.append(s.substring(start, i + <span class="number">1</span>));</span><br><span class="line"><span class="comment">// 当stringBuilder里的网段数量小于3时，才会加点；如果等于3，说明已经有3段了，最后一段不需要再加点</span></span><br><span class="line"><span class="keyword">if</span> (number &lt; <span class="number">3</span>) &#123;</span><br><span class="line">stringBuilder.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">number++;</span><br><span class="line">restoreIpAddressesHandler(s, i + <span class="number">1</span>, number);</span><br><span class="line">number--;</span><br><span class="line"><span class="comment">// 删除当前stringBuilder最后一个网段，注意考虑点的数量的问题</span></span><br><span class="line"><span class="comment">// 主要这里没有写出来❗</span></span><br><span class="line">stringBuilder.delete(start + number, i + number + <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="78子集-2">78子集</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0078.%E5%AD%90%E9%9B%86.html" >https://programmercarl.com/0078.子集.html<i class="fas fa-external-link-alt"></i></a>)</p><p>视频讲解：(<a class="link"   href="https://www.bilibili.com/video/BV1U84y1q7Ci" >https://www.bilibili.com/video/BV1U84y1q7Ci<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="90子集II-2">90子集II</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0090.%E5%AD%90%E9%9B%86II.html" >https://programmercarl.com/0090.子集II.html<i class="fas fa-external-link-alt"></i></a>)</p><p>视频讲解：(<a class="link"   href="https://www.bilibili.com/video/BV1vm4y1F71J" >https://www.bilibili.com/video/BV1vm4y1F71J<i class="fas fa-external-link-alt"></i></a>)</p>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：93可以AC。78、90AC。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-11 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="回溯算法" scheme="https://kiml.github.io/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>代码随想录算法训练营第二十三天-39组合总和、40组合总和II、131分割回文串</title>
    <link href="https://kiml.github.io/posts/2f09909f/"/>
    <id>https://kiml.github.io/posts/2f09909f/</id>
    <published>2024-06-11T01:00:46.000Z</published>
    <updated>2024-06-12T09:59:59.483Z</updated>
    
    <content type="html"><![CDATA[<ul class="lvl-0"><li class="lvl-2"><p>前言<br>状态：39AC但是可以继续优化剪枝。40AC。131分割没有做过，直接看解析了（动态规划求回文这个没有看，后面刷到动态规划再研究）。</p></li><li class="lvl-2"><p>更新</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">24-06-11 初始记录</span><br></pre></td></tr></table></figure><span id="more"></span><h1>初步题解</h1><h2 id="39组合总和">39组合总和</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/combination-sum" >https://leetcode.cn/problems/combination-sum<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    combinationSumDFS(<span class="number">0</span>, <span class="number">0</span>, target, candidates, resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">combinationSumDFS</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span> sum, <span class="type">int</span> target, <span class="type">int</span>[] candidates, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (sum &gt;= target) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (target == sum) &#123;  </span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; candidates.length; i++) &#123;  </span><br><span class="line">        resultOne.add(candidates[i]);  </span><br><span class="line">        combinationSumDFS(i, sum + candidates[i], target, candidates, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="40组合总和II">40组合总和II</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/combination-sum-ii" >https://leetcode.cn/problems/combination-sum-ii<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">    Arrays.sort(candidates);  </span><br><span class="line">  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    combinationSum2DFS(<span class="number">0</span>, <span class="number">0</span>, target, candidates, resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 思路：  </span></span><br><span class="line"><span class="comment"> * 1. 和上题差不多。但是数组变成有重复元素的了。  </span></span><br><span class="line"><span class="comment"> * 2. 想法是每层遍历的时候，去重  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">combinationSum2DFS</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span> sum, <span class="type">int</span> target, <span class="type">int</span>[] candidates, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (sum == target) &#123;  </span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; candidates.length &amp;&amp; sum + candidates[i] &lt;= target; i++) &#123;</span><br><span class="line"><span class="comment">// 在单层的数组内去重</span></span><br><span class="line">        <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= startIndex &amp;&amp; candidates[i] == candidates[i - <span class="number">1</span>]) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        resultOne.add(candidates[i]);  </span><br><span class="line">        combinationSum2DFS(i + <span class="number">1</span>, sum + candidates[i], target, candidates, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="131分割回文串">131分割回文串</h2><p>题目链接：(<a class="link"   href="https://leetcode.cn/problems/palindrome-partitioning" >https://leetcode.cn/problems/palindrome-partitioning<i class="fas fa-external-link-alt"></i></a>)</p><h1>看解析</h1><h2 id="39组合总和-2">39组合总和</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0039.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C.html" >https://programmercarl.com/0039.组合总和.html<i class="fas fa-external-link-alt"></i></a>)</p><p>视频讲解：(<a class="link"   href="https://www.bilibili.com/video/BV1KT4y1M7HJ/" >https://www.bilibili.com/video/BV1KT4y1M7HJ/<i class="fas fa-external-link-alt"></i></a>)</p><p>本来以为只要return就不用优化了（好像没有什么关系，还是会继续往下走），但是题解中说可以减少一次进入递归。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;  </span><br><span class="line">    <span class="comment">// 要剪枝必须要排序  </span></span><br><span class="line">    Arrays.sort(candidates);  </span><br><span class="line">  </span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;Integer&gt; resultOne = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    combinationSumDFS(<span class="number">0</span>, <span class="number">0</span>, target, candidates, resultOne, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">combinationSumDFS</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span> sum, <span class="type">int</span> target, <span class="type">int</span>[] candidates, List&lt;Integer&gt; resultOne, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (target == sum) &#123;  </span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(resultOne));  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// for循环的判断做了剪枝优化处理  </span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; candidates.length &amp;&amp; sum + candidates[i] &lt;= target; i++) &#123;  </span><br><span class="line">        resultOne.add(candidates[i]);  </span><br><span class="line">        combinationSumDFS(i, sum + candidates[i], target, candidates, resultOne, result);  </span><br><span class="line">        resultOne.remove(resultOne.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="40组合总和II-2">40组合总和II</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html" >https://programmercarl.com/0040.组合总和II.html<i class="fas fa-external-link-alt"></i></a>)</p><p>视频讲解：(<a class="link"   href="https://www.bilibili.com/video/BV12V4y1V73A/" >https://www.bilibili.com/video/BV12V4y1V73A/<i class="fas fa-external-link-alt"></i></a>)</p><p><img                         lazyload                       alt="image"                       data-src="https://blog-resources.oss-cn-hangzhou.aliyuncs.com/240612/2020111820220675.png"                        alt=""                 ><br><strong>在candidates[i] == candidates[i - 1]相同的情况下：</strong></p><ul class="lvl-0"><li class="lvl-2"><p>used[i - 1] == true，说明同一树枝candidates[i - 1]使用过</p></li><li class="lvl-2"><p>used[i - 1] == false，说明同一树层candidates[i - 1]使用过</p></li></ul><h2 id="131分割回文串-2">131分割回文串</h2><p>题目链接/文章讲解：(<a class="link"   href="https://programmercarl.com/0131.%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2.html" >https://programmercarl.com/0131.分割回文串.html<i class="fas fa-external-link-alt"></i></a>)</p><p>视频讲解：(<a class="link"   href="https://www.bilibili.com/video/BV1c54y1e7k6/" >https://www.bilibili.com/video/BV1c54y1e7k6/<i class="fas fa-external-link-alt"></i></a>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;  </span><br><span class="line">    List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    List&lt;String&gt; string = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();  </span><br><span class="line">    partitionDFS(<span class="number">0</span>, s, string, result);  </span><br><span class="line">    <span class="keyword">return</span> result;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">partitionDFS</span><span class="params">(<span class="type">int</span> startIndex, String s, List&lt;String&gt; string, List&lt;List&lt;String&gt;&gt; result)</span> &#123;  </span><br><span class="line">    <span class="keyword">if</span> (startIndex &gt;= s.length()) &#123;  </span><br><span class="line">        result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(string));  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; s.length(); i++) &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">substring</span> <span class="operator">=</span> s.substring(startIndex, i + <span class="number">1</span>);  </span><br><span class="line">        <span class="keyword">if</span> (!isPartition(substring)) &#123;  </span><br><span class="line">            <span class="keyword">continue</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        string.add(substring);  </span><br><span class="line">        partitionDFS(i + <span class="number">1</span>, s, string, result);  </span><br><span class="line">        string.remove(string.size() - <span class="number">1</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line"><span class="comment">/**  </span></span><br><span class="line"><span class="comment"> * 判断传入字符串是否为回文字符串  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> substring 截取的字符串  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 结果  </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isPartition</span><span class="params">(String substring)</span> &#123;  </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j= substring.length() - <span class="number">1</span>; i &lt; j; i++, j--) &#123;  </span><br><span class="line">        <span class="keyword">if</span> (substring.charAt(i) != substring.charAt(j)) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化版 动态规划法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; result;</span><br><span class="line">    LinkedList&lt;String&gt; path;</span><br><span class="line">    <span class="type">boolean</span>[][] dp;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">partition</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[] str = s.toCharArray();</span><br><span class="line">        path = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[str.length + <span class="number">1</span>][str.length + <span class="number">1</span>];</span><br><span class="line">        isPalindrome(str);</span><br><span class="line">        backtracking(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtracking</span><span class="params">(String str, <span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (startIndex &gt;= str.length()) &#123;</span><br><span class="line">            <span class="comment">//如果起始位置大于s的大小，说明找到了一组分割方案</span></span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(path));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> startIndex; i &lt; str.length(); ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> (dp[startIndex][i]) &#123;</span><br><span class="line">                    <span class="comment">//是回文子串，进入下一步递归</span></span><br><span class="line">                    <span class="comment">//先将当前子串保存入path</span></span><br><span class="line">                    path.addLast(str.substring(startIndex, i + <span class="number">1</span>));</span><br><span class="line">                    <span class="comment">//起始位置后移，保证不重复</span></span><br><span class="line">                    backtracking(str, i + <span class="number">1</span>);</span><br><span class="line">                    path.pollLast();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//不是回文子串，跳过</span></span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过动态规划判断是否是回文串,参考动态规划篇 52 回文子串</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">isPalindrome</span><span class="params">(<span class="type">char</span>[] str)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= str.length; ++i) &#123;</span><br><span class="line">            dp[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; str.length; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (str[j] == str[i]) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (i - j &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">                        dp[j][i] = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (dp[j + <span class="number">1</span>][i - <span class="number">1</span>]) &#123;</span><br><span class="line">                        dp[j][i] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;前言&lt;br&gt;
状态：39AC但是可以继续优化剪枝。40AC。131分割没有做过，直接看解析了（动态规划求回文这个没有看，后面刷到动态规划再研究）。&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;更新&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;24-06-11 初始记录&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="面试" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/"/>
    
    <category term="代码随想录" scheme="https://kiml.github.io/categories/%E9%9D%A2%E8%AF%95/%E4%BB%A3%E7%A0%81%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
    <category term="回溯算法" scheme="https://kiml.github.io/tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
